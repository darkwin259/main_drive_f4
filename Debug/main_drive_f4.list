
main_drive_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006a64  08006a64  00007a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c88  08006c88  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c88  08006c88  00007c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c90  08006c90  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c90  08006c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c94  08006c94  00007c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006c98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          000005f0  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000065c  2000065c  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fec  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a3  00000000  00000000  0001a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  0001c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1c  00000000  00000000  0001d780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c01  00000000  00000000  0001e29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a88  00000000  00000000  00042e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd9b6  00000000  00000000  00055925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001332db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047ac  00000000  00000000  00133320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00137acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a4c 	.word	0x08006a4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006a4c 	.word	0x08006a4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <TIM3_Init>:

volatile int temp_x,temp_y;
volatile uint8_t temp1 = 100,temp2 = 100;

void TIM3_Init(void)	///50Hz PWM (4 pin: 2 BLDC, !
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	@ 0x38
 8000574:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000576:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	615a      	str	r2, [r3, #20]
 800059e:	619a      	str	r2, [r3, #24]


  htim3.Instance = TIM3;
 80005a0:	4b45      	ldr	r3, [pc, #276]	@ (80006b8 <TIM3_Init+0x148>)
 80005a2:	4a46      	ldr	r2, [pc, #280]	@ (80006bc <TIM3_Init+0x14c>)
 80005a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80005a6:	4b44      	ldr	r3, [pc, #272]	@ (80006b8 <TIM3_Init+0x148>)
 80005a8:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80005ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b42      	ldr	r3, [pc, #264]	@ (80006b8 <TIM3_Init+0x148>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80005b4:	4b40      	ldr	r3, [pc, #256]	@ (80006b8 <TIM3_Init+0x148>)
 80005b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80005ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005bc:	4b3e      	ldr	r3, [pc, #248]	@ (80006b8 <TIM3_Init+0x148>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c2:	4b3d      	ldr	r3, [pc, #244]	@ (80006b8 <TIM3_Init+0x148>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005c8:	483b      	ldr	r0, [pc, #236]	@ (80006b8 <TIM3_Init+0x148>)
 80005ca:	f002 fd21 	bl	8003010 <HAL_TIM_Base_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <TIM3_Init+0x68>
	  {
		Error_Handler();
 80005d4:	f000 fb9e 	bl	8000d14 <Error_Handler>
	  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4834      	ldr	r0, [pc, #208]	@ (80006b8 <TIM3_Init+0x148>)
 80005e6:	f003 f8f9 	bl	80037dc <HAL_TIM_ConfigClockSource>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <TIM3_Init+0x84>
	  {
		Error_Handler();
 80005f0:	f000 fb90 	bl	8000d14 <Error_Handler>
	  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005f4:	4830      	ldr	r0, [pc, #192]	@ (80006b8 <TIM3_Init+0x148>)
 80005f6:	f002 fdb3 	bl	8003160 <HAL_TIM_PWM_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <TIM3_Init+0x94>
	  {
		Error_Handler();
 8000600:	f000 fb88 	bl	8000d14 <Error_Handler>
	  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000604:	482c      	ldr	r0, [pc, #176]	@ (80006b8 <TIM3_Init+0x148>)
 8000606:	f002 fd52 	bl	80030ae <HAL_TIM_OC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <TIM3_Init+0xa4>
	  {
		Error_Handler();
 8000610:	f000 fb80 	bl	8000d14 <Error_Handler>
	  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4619      	mov	r1, r3
 8000622:	4825      	ldr	r0, [pc, #148]	@ (80006b8 <TIM3_Init+0x148>)
 8000624:	f003 fcd0 	bl	8003fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <TIM3_Init+0xc2>
	  {
		Error_Handler();
 800062e:	f000 fb71 	bl	8000d14 <Error_Handler>
	  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000632:	2360      	movs	r3, #96	@ 0x60
 8000634:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0; /// 100 200(min max)
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	481b      	ldr	r0, [pc, #108]	@ (80006b8 <TIM3_Init+0x148>)
 800064a:	f003 f805 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <TIM3_Init+0xe8>
	  {
		Error_Handler();
 8000654:	f000 fb5e 	bl	8000d14 <Error_Handler>
	  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2204      	movs	r2, #4
 800065c:	4619      	mov	r1, r3
 800065e:	4816      	ldr	r0, [pc, #88]	@ (80006b8 <TIM3_Init+0x148>)
 8000660:	f002 ff9e 	bl	80035a0 <HAL_TIM_OC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <TIM3_Init+0xfe>
	  {
		Error_Handler();
 800066a:	f000 fb53 	bl	8000d14 <Error_Handler>
	  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2208      	movs	r2, #8
 8000672:	4619      	mov	r1, r3
 8000674:	4810      	ldr	r0, [pc, #64]	@ (80006b8 <TIM3_Init+0x148>)
 8000676:	f002 ffef 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <TIM3_Init+0x114>
	  {
		Error_Handler();
 8000680:	f000 fb48 	bl	8000d14 <Error_Handler>
	  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	220c      	movs	r2, #12
 8000688:	4619      	mov	r1, r3
 800068a:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <TIM3_Init+0x148>)
 800068c:	f002 ff88 	bl	80035a0 <HAL_TIM_OC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <TIM3_Init+0x12a>
	  {
		Error_Handler();
 8000696:	f000 fb3d 	bl	8000d14 <Error_Handler>
	  }

  HAL_TIM_MspPostInit(&htim3);
 800069a:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <TIM3_Init+0x148>)
 800069c:	f001 f908 	bl	80018b0 <HAL_TIM_MspPostInit>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <TIM3_Init+0x148>)
 80006a4:	f002 fdac 	bl	8003200 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <TIM3_Init+0x148>)
 80006ac:	f002 fda8 	bl	8003200 <HAL_TIM_PWM_Start>
}
 80006b0:	bf00      	nop
 80006b2:	3738      	adds	r7, #56	@ 0x38
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000394 	.word	0x20000394
 80006bc:	40000400 	.word	0x40000400

080006c0 <TIM2_Init>:

void TIM2_Init(void)	///dong co goc tam
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	@ 0x38
 80006c4:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]
 80006ee:	619a      	str	r2, [r3, #24]


  htim2.Instance = TIM2;
 80006f0:	4b3a      	ldr	r3, [pc, #232]	@ (80007dc <TIM2_Init+0x11c>)
 80006f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80006f8:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <TIM2_Init+0x11c>)
 80006fa:	2247      	movs	r2, #71	@ 0x47
 80006fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <TIM2_Init+0x11c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000704:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <TIM2_Init+0x11c>)
 8000706:	2264      	movs	r2, #100	@ 0x64
 8000708:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <TIM2_Init+0x11c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000710:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <TIM2_Init+0x11c>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000716:	4831      	ldr	r0, [pc, #196]	@ (80007dc <TIM2_Init+0x11c>)
 8000718:	f002 fc7a 	bl	8003010 <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <TIM2_Init+0x66>
	  {
		Error_Handler();
 8000722:	f000 faf7 	bl	8000d14 <Error_Handler>
	  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000730:	4619      	mov	r1, r3
 8000732:	482a      	ldr	r0, [pc, #168]	@ (80007dc <TIM2_Init+0x11c>)
 8000734:	f003 f852 	bl	80037dc <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <TIM2_Init+0x82>
	  {
		Error_Handler();
 800073e:	f000 fae9 	bl	8000d14 <Error_Handler>
	  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000742:	4826      	ldr	r0, [pc, #152]	@ (80007dc <TIM2_Init+0x11c>)
 8000744:	f002 fd0c 	bl	8003160 <HAL_TIM_PWM_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <TIM2_Init+0x92>
	  {
		Error_Handler();
 800074e:	f000 fae1 	bl	8000d14 <Error_Handler>
	  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000752:	4822      	ldr	r0, [pc, #136]	@ (80007dc <TIM2_Init+0x11c>)
 8000754:	f002 fcab 	bl	80030ae <HAL_TIM_OC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <TIM2_Init+0xa2>
	  {
		Error_Handler();
 800075e:	f000 fad9 	bl	8000d14 <Error_Handler>
	  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4619      	mov	r1, r3
 8000770:	481a      	ldr	r0, [pc, #104]	@ (80007dc <TIM2_Init+0x11c>)
 8000772:	f003 fc29 	bl	8003fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <TIM2_Init+0xc0>
	  {
		Error_Handler();
 800077c:	f000 faca 	bl	8000d14 <Error_Handler>
	  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	@ 0x60
 8000782:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	4811      	ldr	r0, [pc, #68]	@ (80007dc <TIM2_Init+0x11c>)
 8000798:	f002 ff5e 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <TIM2_Init+0xe6>
	  {
		Error_Handler();
 80007a2:	f000 fab7 	bl	8000d14 <Error_Handler>
	  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2204      	movs	r2, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <TIM2_Init+0x11c>)
 80007ae:	f002 fef7 	bl	80035a0 <HAL_TIM_OC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <TIM2_Init+0xfc>
	  {
		Error_Handler();
 80007b8:	f000 faac 	bl	8000d14 <Error_Handler>
//  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
//	  {
//		Error_Handler();
//	  }

  HAL_TIM_MspPostInit(&htim2);
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <TIM2_Init+0x11c>)
 80007be:	f001 f877 	bl	80018b0 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007c2:	2100      	movs	r1, #0
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <TIM2_Init+0x11c>)
 80007c6:	f002 fd1b 	bl	8003200 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007ca:	2104      	movs	r1, #4
 80007cc:	4803      	ldr	r0, [pc, #12]	@ (80007dc <TIM2_Init+0x11c>)
 80007ce:	f002 fd17 	bl	8003200 <HAL_TIM_PWM_Start>
}
 80007d2:	bf00      	nop
 80007d4:	3738      	adds	r7, #56	@ 0x38
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200004b0 	.word	0x200004b0

080007e0 <angle_adjust>:
void angle_adjust(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

	temp_y = values[3];
 80007e4:	4b3f      	ldr	r3, [pc, #252]	@ (80008e4 <angle_adjust+0x104>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4a3f      	ldr	r2, [pc, #252]	@ (80008e8 <angle_adjust+0x108>)
 80007ea:	6013      	str	r3, [r2, #0]


	if (abs(temp_y) < 63 ) temp_y = 0;
 80007ec:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <angle_adjust+0x108>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bfb8      	it	lt
 80007f4:	425b      	neglt	r3, r3
 80007f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80007f8:	dc02      	bgt.n	8000800 <angle_adjust+0x20>
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <angle_adjust+0x108>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]

	if(values[13]  && temp_y > 65)
 8000800:	4b38      	ldr	r3, [pc, #224]	@ (80008e4 <angle_adjust+0x104>)
 8000802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00c      	beq.n	8000822 <angle_adjust+0x42>
 8000808:	4b37      	ldr	r3, [pc, #220]	@ (80008e8 <angle_adjust+0x108>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b41      	cmp	r3, #65	@ 0x41
 800080e:	dd08      	ble.n	8000822 <angle_adjust+0x42>
	{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,90);
 8000810:	4b36      	ldr	r3, [pc, #216]	@ (80008ec <angle_adjust+0x10c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	225a      	movs	r2, #90	@ 0x5a
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 8000818:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <angle_adjust+0x10c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2200      	movs	r2, #0
 800081e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000820:	e019      	b.n	8000856 <angle_adjust+0x76>

	}else if (values[13]  && temp_y < -65)
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <angle_adjust+0x104>)
 8000824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00d      	beq.n	8000846 <angle_adjust+0x66>
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <angle_adjust+0x108>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f113 0f41 	cmn.w	r3, #65	@ 0x41
 8000832:	da08      	bge.n	8000846 <angle_adjust+0x66>
	{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8000834:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <angle_adjust+0x10c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2200      	movs	r2, #0
 800083a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,90);
 800083c:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <angle_adjust+0x10c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	225a      	movs	r2, #90	@ 0x5a
 8000842:	639a      	str	r2, [r3, #56]	@ 0x38
 8000844:	e007      	b.n	8000856 <angle_adjust+0x76>
	}  else
	{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8000846:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <angle_adjust+0x10c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 800084e:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <angle_adjust+0x10c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2200      	movs	r2, #0
 8000854:	639a      	str	r2, [r3, #56]	@ 0x38
	}

		if(values[4])
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <angle_adjust+0x104>)
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d025      	beq.n	80008aa <angle_adjust+0xca>
		{
			if(temp1 >= 100 && temp1 <= 160)
 800085e:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <angle_adjust+0x110>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b63      	cmp	r3, #99	@ 0x63
 8000866:	d929      	bls.n	80008bc <angle_adjust+0xdc>
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <angle_adjust+0x110>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2ba0      	cmp	r3, #160	@ 0xa0
 8000870:	d824      	bhi.n	80008bc <angle_adjust+0xdc>
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,temp1);
 8000872:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <angle_adjust+0x110>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <angle_adjust+0x114>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	635a      	str	r2, [r3, #52]	@ 0x34

					temp1 = temp1 + 5;
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <angle_adjust+0x110>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	3305      	adds	r3, #5
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <angle_adjust+0x110>)
 800088a:	701a      	strb	r2, [r3, #0]
					if (temp1 > 160)
 800088c:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <angle_adjust+0x110>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2ba0      	cmp	r3, #160	@ 0xa0
 8000894:	d912      	bls.n	80008bc <angle_adjust+0xdc>
					{
						temp1 = 160;
 8000896:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <angle_adjust+0x110>)
 8000898:	22a0      	movs	r2, #160	@ 0xa0
 800089a:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,temp1);
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <angle_adjust+0x110>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <angle_adjust+0x114>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80008a8:	e008      	b.n	80008bc <angle_adjust+0xdc>
					}
				}
		}else
		{
			temp1 = 100;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <angle_adjust+0x110>)
 80008ac:	2264      	movs	r2, #100	@ 0x64
 80008ae:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,temp1);
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <angle_adjust+0x110>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <angle_adjust+0x114>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	635a      	str	r2, [r3, #52]	@ 0x34
		}

	if(values[10])
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <angle_adjust+0x104>)
 80008be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d006      	beq.n	80008d2 <angle_adjust+0xf2>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ca:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <angle_adjust+0x118>)
 80008cc:	f001 ff2e 	bl	800272c <HAL_GPIO_WritePin>
	//	}




}
 80008d0:	e005      	b.n	80008de <angle_adjust+0xfe>
		}else {HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);}
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d8:	4807      	ldr	r0, [pc, #28]	@ (80008f8 <angle_adjust+0x118>)
 80008da:	f001 ff27 	bl	800272c <HAL_GPIO_WritePin>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200005b4 	.word	0x200005b4
 80008e8:	20000258 	.word	0x20000258
 80008ec:	200004b0 	.word	0x200004b0
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000394 	.word	0x20000394
 80008f8:	40020c00 	.word	0x40020c00

080008fc <HAL_TIM_PeriodElapsedCallback>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d104      	bne.n	8000918 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		time_run++;
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000916:	6013      	str	r3, [r2, #0]
	}
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40000800 	.word	0x40000800
 8000928:	200002b0 	.word	0x200002b0

0800092c <main>:

//static void MX_USART2_UART_Init(void);
//static void MX_USART3_UART_Init(void);

int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000930:	f001 fb4a 	bl	8001fc8 <HAL_Init>


	SystemClock_Config();
 8000934:	f000 f88e 	bl	8000a54 <SystemClock_Config>

	MX_GPIO_Init();
 8000938:	f000 f8f6 	bl	8000b28 <MX_GPIO_Init>


	MX_USART5_UART_Init();
 800093c:	f000 fce6 	bl	800130c <MX_USART5_UART_Init>

	PWM_Init();
 8000940:	f000 fb64 	bl	800100c <PWM_Init>
	TIM3_Init();
 8000944:	f7ff fe14 	bl	8000570 <TIM3_Init>
	TIM2_Init();
 8000948:	f7ff feba 	bl	80006c0 <TIM2_Init>


	if(flag != 1)
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <main+0x4c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d009      	beq.n	8000968 <main+0x3c>
	{
		memset(&data, 0, sizeof(data));
 8000954:	223c      	movs	r2, #60	@ 0x3c
 8000956:	2100      	movs	r1, #0
 8000958:	4808      	ldr	r0, [pc, #32]	@ (800097c <main+0x50>)
 800095a:	f004 fcc0 	bl	80052de <memset>
		HAL_UART_Receive_IT(&huart5,&rcv_buffer,1);
 800095e:	2201      	movs	r2, #1
 8000960:	4907      	ldr	r1, [pc, #28]	@ (8000980 <main+0x54>)
 8000962:	4808      	ldr	r0, [pc, #32]	@ (8000984 <main+0x58>)
 8000964:	f003 fc5f 	bl	8004226 <HAL_UART_Receive_IT>
	}
	while (1)
	{
//	  Hand_Control();
//	  flag =0;
		if(flag)
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <main+0x4c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0fb      	beq.n	8000968 <main+0x3c>
		{
			Hand_Control();
 8000970:	f000 fe36 	bl	80015e0 <Hand_Control>
		if(flag)
 8000974:	e7f8      	b.n	8000968 <main+0x3c>
 8000976:	bf00      	nop
 8000978:	20000090 	.word	0x20000090
 800097c:	20000618 	.word	0x20000618
 8000980:	200005b0 	.word	0x200005b0
 8000984:	200003dc 	.word	0x200003dc

08000988 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART5)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a24      	ldr	r2, [pc, #144]	@ (8000a28 <HAL_UART_RxCpltCallback+0xa0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d142      	bne.n	8000a20 <HAL_UART_RxCpltCallback+0x98>
	{

		if ((rcv_buffer == 'd') & (flag != 1))
 800099a:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <HAL_UART_RxCpltCallback+0xa4>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b64      	cmp	r3, #100	@ 0x64
 80009a0:	bf0c      	ite	eq
 80009a2:	2301      	moveq	r3, #1
 80009a4:	2300      	movne	r3, #0
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <HAL_UART_RxCpltCallback+0xa8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4013      	ands	r3, r2
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d00b      	beq.n	80009d6 <HAL_UART_RxCpltCallback+0x4e>
		{
			count = 0;
 80009be:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <HAL_UART_RxCpltCallback+0xac>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
			flag = 1;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <HAL_UART_RxCpltCallback+0xa8>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart5,&rcv_buffer,1);
 80009ca:	2201      	movs	r2, #1
 80009cc:	4917      	ldr	r1, [pc, #92]	@ (8000a2c <HAL_UART_RxCpltCallback+0xa4>)
 80009ce:	481a      	ldr	r0, [pc, #104]	@ (8000a38 <HAL_UART_RxCpltCallback+0xb0>)
 80009d0:	f003 fc29 	bl	8004226 <HAL_UART_Receive_IT>

		}


	}
}
 80009d4:	e024      	b.n	8000a20 <HAL_UART_RxCpltCallback+0x98>
		}else if ((rcv_buffer != 'd') & (flag != 1))
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_UART_RxCpltCallback+0xa4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b64      	cmp	r3, #100	@ 0x64
 80009dc:	bf14      	ite	ne
 80009de:	2301      	movne	r3, #1
 80009e0:	2300      	moveq	r3, #0
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_UART_RxCpltCallback+0xa8>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4013      	ands	r3, r2
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d012      	beq.n	8000a20 <HAL_UART_RxCpltCallback+0x98>
			data[count++] = rcv_buffer;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <HAL_UART_RxCpltCallback+0xac>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	b2d1      	uxtb	r1, r2
 8000a02:	4a0c      	ldr	r2, [pc, #48]	@ (8000a34 <HAL_UART_RxCpltCallback+0xac>)
 8000a04:	7011      	strb	r1, [r2, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_UART_RxCpltCallback+0xa4>)
 8000a0a:	7819      	ldrb	r1, [r3, #0]
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <HAL_UART_RxCpltCallback+0xb4>)
 8000a0e:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart5,&rcv_buffer,1);
 8000a10:	2201      	movs	r2, #1
 8000a12:	4906      	ldr	r1, [pc, #24]	@ (8000a2c <HAL_UART_RxCpltCallback+0xa4>)
 8000a14:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <HAL_UART_RxCpltCallback+0xb0>)
 8000a16:	f003 fc06 	bl	8004226 <HAL_UART_Receive_IT>
			flag = 0;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <HAL_UART_RxCpltCallback+0xa8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40005000 	.word	0x40005000
 8000a2c:	200005b0 	.word	0x200005b0
 8000a30:	20000090 	.word	0x20000090
 8000a34:	20000654 	.word	0x20000654
 8000a38:	200003dc 	.word	0x200003dc
 8000a3c:	20000618 	.word	0x20000618

08000a40 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uint16_t count;
	if(htim->Instance == TIM3)
	{

	}
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	@ 0x50
 8000a58:	af00      	add	r7, sp, #0
//  {
//    Error_Handler();
//  }


	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	@ 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f004 fc3b 	bl	80052de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <SystemClock_Config+0xcc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a27      	ldr	r2, [pc, #156]	@ (8000b20 <SystemClock_Config+0xcc>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b25      	ldr	r3, [pc, #148]	@ (8000b20 <SystemClock_Config+0xcc>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <SystemClock_Config+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a21      	ldr	r2, [pc, #132]	@ (8000b24 <SystemClock_Config+0xd0>)
 8000a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <SystemClock_Config+0xd0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 8000ac8:	2390      	movs	r3, #144	@ 0x90
 8000aca:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fe41 	bl	8002760 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x94>
	{
	Error_Handler();
 8000ae4:	f000 f916 	bl	8000d14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000af8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afe:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2104      	movs	r1, #4
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 f8a2 	bl	8002c50 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xc2>
	{
	Error_Handler();
 8000b12:	f000 f8ff 	bl	8000d14 <Error_Handler>
//
//	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
//	  {
//	    Error_Handler();
//	  }
}
 8000b16:	bf00      	nop
 8000b18:	3750      	adds	r7, #80	@ 0x50
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b6e      	ldr	r3, [pc, #440]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a6d      	ldr	r2, [pc, #436]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b48:	f043 0310 	orr.w	r3, r3, #16
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b67      	ldr	r3, [pc, #412]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a66      	ldr	r2, [pc, #408]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b64      	ldr	r3, [pc, #400]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b60      	ldr	r3, [pc, #384]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a5f      	ldr	r2, [pc, #380]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b5d      	ldr	r3, [pc, #372]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b59      	ldr	r3, [pc, #356]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a58      	ldr	r2, [pc, #352]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b56      	ldr	r3, [pc, #344]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b52      	ldr	r3, [pc, #328]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a51      	ldr	r2, [pc, #324]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000cfc <MX_GPIO_Init+0x1d4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000bca:	237f      	movs	r3, #127	@ 0x7f
 8000bcc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4847      	ldr	r0, [pc, #284]	@ (8000d00 <MX_GPIO_Init+0x1d8>)
 8000be2:	f001 fc07 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000be6:	f24f 030f 	movw	r3, #61455	@ 0xf00f
 8000bea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4841      	ldr	r0, [pc, #260]	@ (8000d04 <MX_GPIO_Init+0x1dc>)
 8000c00:	f001 fbf8 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c04:	23f0      	movs	r3, #240	@ 0xf0
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c14:	2305      	movs	r3, #5
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	483a      	ldr	r0, [pc, #232]	@ (8000d08 <MX_GPIO_Init+0x1e0>)
 8000c20:	f001 fbe8 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000c24:	f24f 0304 	movw	r3, #61444	@ 0xf004
 8000c28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4834      	ldr	r0, [pc, #208]	@ (8000d0c <MX_GPIO_Init+0x1e4>)
 8000c3a:	f001 fbdb 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000c3e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000c42:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	482b      	ldr	r0, [pc, #172]	@ (8000d00 <MX_GPIO_Init+0x1d8>)
 8000c54:	f001 fbce 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_5
 8000c58:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8000c5c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4828      	ldr	r0, [pc, #160]	@ (8000d10 <MX_GPIO_Init+0x1e8>)
 8000c6e:	f001 fbc1 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD15 PD2
                           PD3 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_2
 8000c72:	f64e 430f 	movw	r3, #60431	@ 0xec0f
 8000c76:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3 | GPIO_PIN_14|GPIO_PIN_0 | GPIO_PIN_1| GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4821      	ldr	r0, [pc, #132]	@ (8000d10 <MX_GPIO_Init+0x1e8>)
 8000c8c:	f001 fbb2 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4818      	ldr	r0, [pc, #96]	@ (8000d10 <MX_GPIO_Init+0x1e8>)
 8000cae:	f001 fba1 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480f      	ldr	r0, [pc, #60]	@ (8000d08 <MX_GPIO_Init+0x1e0>)
 8000ccc:	f001 fb92 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cd0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_GPIO_Init+0x1dc>)
 8000cee:	f001 fb81 	bl	80023f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1,htim8,htim5;


void MX_TIM1_Init(void)//5kHz
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b096      	sub	sp, #88	@ 0x58
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2220      	movs	r2, #32
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 fac0 	bl	80052de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d5e:	4b50      	ldr	r3, [pc, #320]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000d60:	4a50      	ldr	r2, [pc, #320]	@ (8000ea4 <MX_TIM1_Init+0x184>)
 8000d62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d64:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000d66:	2247      	movs	r2, #71	@ 0x47
 8000d68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 8000d70:	4b4b      	ldr	r3, [pc, #300]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000d72:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000d76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b49      	ldr	r3, [pc, #292]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d7e:	4b48      	ldr	r3, [pc, #288]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b46      	ldr	r3, [pc, #280]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d8a:	4845      	ldr	r0, [pc, #276]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000d8c:	f002 f940 	bl	8003010 <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d96:	f7ff ffbd 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000da0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000da4:	4619      	mov	r1, r3
 8000da6:	483e      	ldr	r0, [pc, #248]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000da8:	f002 fd18 	bl	80037dc <HAL_TIM_ConfigClockSource>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000db2:	f7ff ffaf 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000db6:	483a      	ldr	r0, [pc, #232]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000db8:	f002 f9d2 	bl	8003160 <HAL_TIM_PWM_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dc2:	f7ff ffa7 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4832      	ldr	r0, [pc, #200]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000dd6:	f003 f8f7 	bl	8003fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000de0:	f7ff ff98 	bl	8000d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de4:	2360      	movs	r3, #96	@ 0x60
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e04:	2200      	movs	r2, #0
 8000e06:	4619      	mov	r1, r3
 8000e08:	4825      	ldr	r0, [pc, #148]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000e0a:	f002 fc25 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e14:	f7ff ff7e 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481f      	ldr	r0, [pc, #124]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000e22:	f002 fc19 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e2c:	f7ff ff72 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	2208      	movs	r2, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	4819      	ldr	r0, [pc, #100]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000e3a:	f002 fc0d 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e44:	f7ff ff66 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4c:	220c      	movs	r2, #12
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4813      	ldr	r0, [pc, #76]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000e52:	f002 fc01 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000e5c:	f7ff ff5a 	bl	8000d14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4807      	ldr	r0, [pc, #28]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000e84:	f003 f91c 	bl	80040c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000e8e:	f7ff ff41 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e92:	4803      	ldr	r0, [pc, #12]	@ (8000ea0 <MX_TIM1_Init+0x180>)
 8000e94:	f000 fd0c 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 8000e98:	bf00      	nop
 8000e9a:	3758      	adds	r7, #88	@ 0x58
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000468 	.word	0x20000468
 8000ea4:	40010000 	.word	0x40010000

08000ea8 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b092      	sub	sp, #72	@ 0x48
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2220      	movs	r2, #32
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 fa03 	bl	80052de <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000eda:	4a4b      	ldr	r2, [pc, #300]	@ (8001008 <MX_TIM8_Init+0x160>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 71;
 8000ede:	4b49      	ldr	r3, [pc, #292]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000ee0:	2247      	movs	r2, #71	@ 0x47
 8000ee2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b47      	ldr	r3, [pc, #284]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 400;
 8000eea:	4b46      	ldr	r3, [pc, #280]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000eec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000ef0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b44      	ldr	r3, [pc, #272]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ef8:	4b42      	ldr	r3, [pc, #264]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b41      	ldr	r3, [pc, #260]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f04:	483f      	ldr	r0, [pc, #252]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000f06:	f002 f92b 	bl	8003160 <HAL_TIM_PWM_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000f10:	f7ff ff00 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000f14:	483b      	ldr	r0, [pc, #236]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000f16:	f002 f8ca 	bl	80030ae <HAL_TIM_OC_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000f20:	f7ff fef8 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f30:	4619      	mov	r1, r3
 8000f32:	4834      	ldr	r0, [pc, #208]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000f34:	f003 f848 	bl	8003fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8000f3e:	f7ff fee9 	bl	8000d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f42:	2360      	movs	r3, #96	@ 0x60
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	2200      	movs	r2, #0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4827      	ldr	r0, [pc, #156]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000f68:	f002 fb76 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 8000f72:	f7ff fecf 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4821      	ldr	r0, [pc, #132]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000f80:	f002 fb6a 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000f8a:	f7ff fec3 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	2208      	movs	r2, #8
 8000f94:	4619      	mov	r1, r3
 8000f96:	481b      	ldr	r0, [pc, #108]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000f98:	f002 fb5e 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000fa2:	f7ff feb7 	bl	8000d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000faa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fae:	220c      	movs	r2, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4814      	ldr	r0, [pc, #80]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000fb4:	f002 faf4 	bl	80035a0 <HAL_TIM_OC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM8_Init+0x11a>
  {
    Error_Handler();
 8000fbe:	f7ff fea9 	bl	8000d14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4807      	ldr	r0, [pc, #28]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000fe6:	f003 f86b 	bl	80040c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 8000ff0:	f7ff fe90 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <MX_TIM8_Init+0x15c>)
 8000ff6:	f000 fc5b 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 8000ffa:	bf00      	nop
 8000ffc:	3748      	adds	r7, #72	@ 0x48
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000564 	.word	0x20000564
 8001008:	40010400 	.word	0x40010400

0800100c <PWM_Init>:




void PWM_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 8001010:	f7ff fe86 	bl	8000d20 <MX_TIM1_Init>
	MX_TIM8_Init();
 8001014:	f7ff ff48 	bl	8000ea8 <MX_TIM8_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001018:	2100      	movs	r1, #0
 800101a:	4810      	ldr	r0, [pc, #64]	@ (800105c <PWM_Init+0x50>)
 800101c:	f002 f8f0 	bl	8003200 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001020:	2104      	movs	r1, #4
 8001022:	480e      	ldr	r0, [pc, #56]	@ (800105c <PWM_Init+0x50>)
 8001024:	f002 f8ec 	bl	8003200 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001028:	2108      	movs	r1, #8
 800102a:	480c      	ldr	r0, [pc, #48]	@ (800105c <PWM_Init+0x50>)
 800102c:	f002 f8e8 	bl	8003200 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001030:	210c      	movs	r1, #12
 8001032:	480a      	ldr	r0, [pc, #40]	@ (800105c <PWM_Init+0x50>)
 8001034:	f002 f8e4 	bl	8003200 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001038:	2100      	movs	r1, #0
 800103a:	4809      	ldr	r0, [pc, #36]	@ (8001060 <PWM_Init+0x54>)
 800103c:	f002 f8e0 	bl	8003200 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001040:	2104      	movs	r1, #4
 8001042:	4807      	ldr	r0, [pc, #28]	@ (8001060 <PWM_Init+0x54>)
 8001044:	f002 f8dc 	bl	8003200 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001048:	2108      	movs	r1, #8
 800104a:	4805      	ldr	r0, [pc, #20]	@ (8001060 <PWM_Init+0x54>)
 800104c:	f002 f8d8 	bl	8003200 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001050:	210c      	movs	r1, #12
 8001052:	4803      	ldr	r0, [pc, #12]	@ (8001060 <PWM_Init+0x54>)
 8001054:	f002 f8d4 	bl	8003200 <HAL_TIM_PWM_Start>
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
//	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,120);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000468 	.word	0x20000468
 8001060:	20000564 	.word	0x20000564

08001064 <st_motor1>:

void st_motor1(int speed)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);}
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f935 	bl	80012dc <speed_shift>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd05      	ble.n	8001084 <st_motor1+0x20>
 8001078:	2201      	movs	r2, #1
 800107a:	2101      	movs	r1, #1
 800107c:	480f      	ldr	r0, [pc, #60]	@ (80010bc <st_motor1+0x58>)
 800107e:	f001 fb55 	bl	800272c <HAL_GPIO_WritePin>
 8001082:	e00a      	b.n	800109a <st_motor1+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);}
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f929 	bl	80012dc <speed_shift>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	da04      	bge.n	800109a <st_motor1+0x36>
 8001090:	2200      	movs	r2, #0
 8001092:	2101      	movs	r1, #1
 8001094:	4809      	ldr	r0, [pc, #36]	@ (80010bc <st_motor1+0x58>)
 8001096:	f001 fb49 	bl	800272c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(speed_shift(speed))-12);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f91e 	bl	80012dc <speed_shift>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bfb8      	it	lt
 80010a6:	425b      	neglt	r3, r3
 80010a8:	f1a3 020c 	sub.w	r2, r3, #12
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <st_motor1+0x5c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	20000468 	.word	0x20000468

080010c4 <st_motor2>:

void st_motor2(int speed)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);}
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f905 	bl	80012dc <speed_shift>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dd06      	ble.n	80010e6 <st_motor2+0x22>
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010de:	4810      	ldr	r0, [pc, #64]	@ (8001120 <st_motor2+0x5c>)
 80010e0:	f001 fb24 	bl	800272c <HAL_GPIO_WritePin>
 80010e4:	e00b      	b.n	80010fe <st_motor2+0x3a>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);}
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8f8 	bl	80012dc <speed_shift>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	da05      	bge.n	80010fe <st_motor2+0x3a>
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f8:	4809      	ldr	r0, [pc, #36]	@ (8001120 <st_motor2+0x5c>)
 80010fa:	f001 fb17 	bl	800272c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,abs(speed_shift(speed))-12);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f8ec 	bl	80012dc <speed_shift>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	bfb8      	it	lt
 800110a:	425b      	neglt	r3, r3
 800110c:	f1a3 020c 	sub.w	r2, r3, #12
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <st_motor2+0x60>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020000 	.word	0x40020000
 8001124:	20000468 	.word	0x20000468

08001128 <st_motor3>:

void st_motor3(int speed)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);}
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f8d3 	bl	80012dc <speed_shift>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	dd05      	ble.n	8001148 <st_motor3+0x20>
 800113c:	2201      	movs	r2, #1
 800113e:	2108      	movs	r1, #8
 8001140:	480f      	ldr	r0, [pc, #60]	@ (8001180 <st_motor3+0x58>)
 8001142:	f001 faf3 	bl	800272c <HAL_GPIO_WritePin>
 8001146:	e00a      	b.n	800115e <st_motor3+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);}
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f8c7 	bl	80012dc <speed_shift>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	da04      	bge.n	800115e <st_motor3+0x36>
 8001154:	2200      	movs	r2, #0
 8001156:	2108      	movs	r1, #8
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <st_motor3+0x58>)
 800115a:	f001 fae7 	bl	800272c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,abs(speed_shift(speed))-12);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f8bc 	bl	80012dc <speed_shift>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bfb8      	it	lt
 800116a:	425b      	neglt	r3, r3
 800116c:	f1a3 020c 	sub.w	r2, r3, #12
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <st_motor3+0x5c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020c00 	.word	0x40020c00
 8001184:	20000468 	.word	0x20000468

08001188 <st_motor4>:

void st_motor4(int speed)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	if(speed_shift(speed) > 0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);}
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f8a3 	bl	80012dc <speed_shift>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd05      	ble.n	80011a8 <st_motor4+0x20>
 800119c:	2201      	movs	r2, #1
 800119e:	2102      	movs	r1, #2
 80011a0:	480f      	ldr	r0, [pc, #60]	@ (80011e0 <st_motor4+0x58>)
 80011a2:	f001 fac3 	bl	800272c <HAL_GPIO_WritePin>
 80011a6:	e00a      	b.n	80011be <st_motor4+0x36>
	else if(speed_shift(speed) <0){HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);}
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f897 	bl	80012dc <speed_shift>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da04      	bge.n	80011be <st_motor4+0x36>
 80011b4:	2200      	movs	r2, #0
 80011b6:	2102      	movs	r1, #2
 80011b8:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <st_motor4+0x58>)
 80011ba:	f001 fab7 	bl	800272c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,abs(speed_shift(speed))-12);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f88c 	bl	80012dc <speed_shift>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bfb8      	it	lt
 80011ca:	425b      	neglt	r3, r3
 80011cc:	f1a3 020c 	sub.w	r2, r3, #12
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <st_motor4+0x5c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	20000468 	.word	0x20000468

080011e8 <chay_thang>:

//////////**************************************************************////////////////////////

void chay_thang(int speed)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	st_motor1(speed);//DC 1
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff37 	bl	8001064 <st_motor1>
	st_motor2(speed);//DC 2
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff64 	bl	80010c4 <st_motor2>
	st_motor3(-speed);//DC 3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	425b      	negs	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff91 	bl	8001128 <st_motor3>
	st_motor4(-speed);//DC 4
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	425b      	negs	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffbc 	bl	8001188 <st_motor4>

}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <chay_phai>:
	st_motor3(speed);//DC 3
	st_motor4(speed);//DC 4
}

void chay_phai(int speed)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	st_motor1(-speed);//DC 1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	425b      	negs	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff1d 	bl	8001064 <st_motor1>
	st_motor2(speed);//DC 2
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff4a 	bl	80010c4 <st_motor2>
	st_motor3(-speed);//DC 3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	425b      	negs	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff77 	bl	8001128 <st_motor3>
	st_motor4(speed);//DC 4
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa4 	bl	8001188 <st_motor4>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <xoay_phai>:
	st_motor3(8);//DC 3
	st_motor4(-speed);//DC 4
}

void xoay_phai(int speed)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	st_motor1(speed);//DC 1
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff07 	bl	8001064 <st_motor1>
	st_motor2(speed);//DC 2
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff34 	bl	80010c4 <st_motor2>
	st_motor3(speed);//DC 3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff63 	bl	8001128 <st_motor3>
	st_motor4(speed);//DC 4
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff90 	bl	8001188 <st_motor4>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <xoay_trai>:

void xoay_trai(int speed)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	st_motor1(-speed);//DC 1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	425b      	negs	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fef1 	bl	8001064 <st_motor1>
	st_motor2(-speed);//DC 2
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	425b      	negs	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff1c 	bl	80010c4 <st_motor2>
	st_motor3(-speed);//DC 3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	425b      	negs	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff49 	bl	8001128 <st_motor3>
	st_motor4(-speed);//DC 4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	425b      	negs	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff74 	bl	8001188 <st_motor4>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <stop>:
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,8);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,8);
}
void stop(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,12);
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <stop+0x30>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	220c      	movs	r2, #12
 80012b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,12);
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <stop+0x30>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	220c      	movs	r2, #12
 80012ba:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,12);
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <stop+0x30>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	220c      	movs	r2, #12
 80012c2:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,12);
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <stop+0x30>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	220c      	movs	r2, #12
 80012ca:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000468 	.word	0x20000468

080012dc <speed_shift>:
///////////////////////////////////////Loai truong hop khoa cung dong co/////////////////////////////////

int speed_shift(int speed)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	if(speed <0){return (speed - 12);}
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da02      	bge.n	80012f0 <speed_shift+0x14>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3b0c      	subs	r3, #12
 80012ee:	e007      	b.n	8001300 <speed_shift+0x24>
	if(speed >0){return (speed + 12);}
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dd02      	ble.n	80012fc <speed_shift+0x20>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	330c      	adds	r3, #12
 80012fa:	e001      	b.n	8001300 <speed_shift+0x24>
	else {return (speed + 12);}
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	330c      	adds	r3, #12

}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <MX_USART5_UART_Init>:
					16: Share		| 17: Option 		| 18: PS_Button 	| 19: Tounch_pad 	| 20:Battery 												*/
uint16_t sspeed;
uint8_t flag =0;

void MX_USART5_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0


  huart5.Instance = UART5;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_USART5_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <MX_USART5_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <MX_USART5_UART_Init+0x4c>)
 8001318:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800131c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_USART5_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_USART5_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_USART5_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_USART5_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_USART5_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_USART5_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_USART5_UART_Init+0x4c>)
 8001344:	f002 ff22 	bl	800418c <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART5_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f7ff fce1 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200003dc 	.word	0x200003dc
 800135c:	40005000 	.word	0x40005000

08001360 <split_array>:

void split_array(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0



     // Mảng để lưu các giá trị
    char *token;
    char delim[] = ","; // Ký tự phân tách giữa các giá trị
 8001366:	232c      	movs	r3, #44	@ 0x2c
 8001368:	80bb      	strh	r3, [r7, #4]
    int i = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]

    // Sử dụng strtok để tách chuỗi
    token = strtok(data, delim);
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	480f      	ldr	r0, [pc, #60]	@ (80013b0 <split_array+0x50>)
 8001374:	f003 ffbc 	bl	80052f0 <strtok>
 8001378:	60f8      	str	r0, [r7, #12]

    // Duyệt qua các phần tử đã được tách
    while (token != NULL) {
 800137a:	e011      	b.n	80013a0 <split_array+0x40>
        sscanf(token, "%d", &values[i]); // Chuyển đổi chuỗi thành số nguyên và lưu vào mảng
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4a0c      	ldr	r2, [pc, #48]	@ (80013b4 <split_array+0x54>)
 8001382:	4413      	add	r3, r2
 8001384:	461a      	mov	r2, r3
 8001386:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <split_array+0x58>)
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f003 ff39 	bl	8005200 <siscanf>
        i++;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3301      	adds	r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
        token = strtok(NULL, delim); // Tiếp tục tách chuỗi
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	2000      	movs	r0, #0
 800139a:	f003 ffa9 	bl	80052f0 <strtok>
 800139e:	60f8      	str	r0, [r7, #12]
    while (token != NULL) {
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ea      	bne.n	800137c <split_array+0x1c>
    }

}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000618 	.word	0x20000618
 80013b4:	200005b4 	.word	0x200005b4
 80013b8:	08006a64 	.word	0x08006a64

080013bc <Control_Move>:




void Control_Move(void)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
	int tempy,tempx,xoay;
	xoay =	values[2];
 80013c2:	4b82      	ldr	r3, [pc, #520]	@ (80015cc <Control_Move+0x210>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	607b      	str	r3, [r7, #4]
	tempy = values[1];
 80013c8:	4b80      	ldr	r3, [pc, #512]	@ (80015cc <Control_Move+0x210>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	60fb      	str	r3, [r7, #12]
	tempx = values[0];
 80013ce:	4b7f      	ldr	r3, [pc, #508]	@ (80015cc <Control_Move+0x210>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	60bb      	str	r3, [r7, #8]
	//gioi han gia tri
	if(abs(tempx) < 63)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f113 0f3e 	cmn.w	r3, #62	@ 0x3e
 80013da:	db04      	blt.n	80013e6 <Control_Move+0x2a>
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b3e      	cmp	r3, #62	@ 0x3e
 80013e0:	dc01      	bgt.n	80013e6 <Control_Move+0x2a>
	{
		tempx = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
	}

	if(abs(tempy) < 63)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f113 0f3e 	cmn.w	r3, #62	@ 0x3e
 80013ec:	db04      	blt.n	80013f8 <Control_Move+0x3c>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80013f2:	dc01      	bgt.n	80013f8 <Control_Move+0x3c>
	{
		tempy = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
	}

	if(abs(xoay) < 63)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f113 0f3e 	cmn.w	r3, #62	@ 0x3e
 80013fe:	db04      	blt.n	800140a <Control_Move+0x4e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b3e      	cmp	r3, #62	@ 0x3e
 8001404:	dc01      	bgt.n	800140a <Control_Move+0x4e>
	{
		xoay = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
	}

	if(abs(tempx) > abs(tempy))
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001410:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	bfb8      	it	lt
 800141a:	425b      	neglt	r3, r3
 800141c:	429a      	cmp	r2, r3
 800141e:	dd02      	ble.n	8001426 <Control_Move+0x6a>
	{
		tempy = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e00c      	b.n	8001440 <Control_Move+0x84>
	}
	else if(abs(tempx) < abs(tempy))
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800142c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	bfb8      	it	lt
 8001436:	425b      	neglt	r3, r3
 8001438:	429a      	cmp	r2, r3
 800143a:	da01      	bge.n	8001440 <Control_Move+0x84>
	{
		tempx = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
	}


		if(  (values[12] == 1  ||  values[14] == 1)   &&  (abs(tempy)>0 || abs(tempx)>0 || abs(xoay)> 0) )
 8001440:	4b62      	ldr	r3, [pc, #392]	@ (80015cc <Control_Move+0x210>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001444:	2b01      	cmp	r3, #1
 8001446:	d004      	beq.n	8001452 <Control_Move+0x96>
 8001448:	4b60      	ldr	r3, [pc, #384]	@ (80015cc <Control_Move+0x210>)
 800144a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800144c:	2b01      	cmp	r3, #1
 800144e:	f040 80a6 	bne.w	800159e <Control_Move+0x1e2>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	bfb8      	it	lt
 8001458:	425b      	neglt	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	dc0c      	bgt.n	8001478 <Control_Move+0xbc>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	bfb8      	it	lt
 8001464:	425b      	neglt	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	dc06      	bgt.n	8001478 <Control_Move+0xbc>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	bfb8      	it	lt
 8001470:	425b      	neglt	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	f340 8093 	ble.w	800159e <Control_Move+0x1e2>
		{// neu EABLE
			if( values[12]  && abs(tempy)>0)
 8001478:	4b54      	ldr	r3, [pc, #336]	@ (80015cc <Control_Move+0x210>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	2b00      	cmp	r3, #0
 800147e:	d019      	beq.n	80014b4 <Control_Move+0xf8>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	bfb8      	it	lt
 8001486:	425b      	neglt	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	dd13      	ble.n	80014b4 <Control_Move+0xf8>
				{
					sspeed = Basic_speed;
 800148c:	4b50      	ldr	r3, [pc, #320]	@ (80015d0 <Control_Move+0x214>)
 800148e:	2282      	movs	r2, #130	@ 0x82
 8001490:	801a      	strh	r2, [r3, #0]
					RobotSpeed_y = sspeed * sign(tempy);
 8001492:	4b4f      	ldr	r3, [pc, #316]	@ (80015d0 <Control_Move+0x214>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	461c      	mov	r4, r3
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f000 f8b5 	bl	8001608 <sign>
 800149e:	4603      	mov	r3, r0
 80014a0:	fb04 f303 	mul.w	r3, r4, r3
 80014a4:	4a4b      	ldr	r2, [pc, #300]	@ (80015d4 <Control_Move+0x218>)
 80014a6:	6013      	str	r3, [r2, #0]
					chay_thang(	RobotSpeed_y);
 80014a8:	4b4a      	ldr	r3, [pc, #296]	@ (80015d4 <Control_Move+0x218>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe9b 	bl	80011e8 <chay_thang>
 80014b2:	e020      	b.n	80014f6 <Control_Move+0x13a>
				}else if( values[14]  &&  abs(tempy)>0)
 80014b4:	4b45      	ldr	r3, [pc, #276]	@ (80015cc <Control_Move+0x210>)
 80014b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d019      	beq.n	80014f0 <Control_Move+0x134>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bfb8      	it	lt
 80014c2:	425b      	neglt	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dd13      	ble.n	80014f0 <Control_Move+0x134>
				{
					sspeed=Fast_speed;
 80014c8:	4b41      	ldr	r3, [pc, #260]	@ (80015d0 <Control_Move+0x214>)
 80014ca:	22c8      	movs	r2, #200	@ 0xc8
 80014cc:	801a      	strh	r2, [r3, #0]
					RobotSpeed_y=  sspeed * sign(tempy);
 80014ce:	4b40      	ldr	r3, [pc, #256]	@ (80015d0 <Control_Move+0x214>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	461c      	mov	r4, r3
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f897 	bl	8001608 <sign>
 80014da:	4603      	mov	r3, r0
 80014dc:	fb04 f303 	mul.w	r3, r4, r3
 80014e0:	4a3c      	ldr	r2, [pc, #240]	@ (80015d4 <Control_Move+0x218>)
 80014e2:	6013      	str	r3, [r2, #0]
					chay_thang(	RobotSpeed_y);
 80014e4:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <Control_Move+0x218>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fe7d 	bl	80011e8 <chay_thang>
 80014ee:	e002      	b.n	80014f6 <Control_Move+0x13a>
				}		else RobotSpeed_y=0;
 80014f0:	4b38      	ldr	r3, [pc, #224]	@ (80015d4 <Control_Move+0x218>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

			if( values[12]  && sign(tempx)>0 )
 80014f6:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <Control_Move+0x210>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d019      	beq.n	8001532 <Control_Move+0x176>
 80014fe:	68b8      	ldr	r0, [r7, #8]
 8001500:	f000 f882 	bl	8001608 <sign>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	dd13      	ble.n	8001532 <Control_Move+0x176>
				{
					sspeed = Basic_speed;
 800150a:	4b31      	ldr	r3, [pc, #196]	@ (80015d0 <Control_Move+0x214>)
 800150c:	2282      	movs	r2, #130	@ 0x82
 800150e:	801a      	strh	r2, [r3, #0]
					RobotSpeed_x = sspeed * sign(tempx) ;
 8001510:	4b2f      	ldr	r3, [pc, #188]	@ (80015d0 <Control_Move+0x214>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	461c      	mov	r4, r3
 8001516:	68b8      	ldr	r0, [r7, #8]
 8001518:	f000 f876 	bl	8001608 <sign>
 800151c:	4603      	mov	r3, r0
 800151e:	fb04 f303 	mul.w	r3, r4, r3
 8001522:	4a2d      	ldr	r2, [pc, #180]	@ (80015d8 <Control_Move+0x21c>)
 8001524:	6013      	str	r3, [r2, #0]
					chay_phai(RobotSpeed_x);
 8001526:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <Control_Move+0x21c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fe74 	bl	8001218 <chay_phai>
 8001530:	e020      	b.n	8001574 <Control_Move+0x1b8>
				}else if( values[12]  &&  sign(tempx)<0)
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <Control_Move+0x210>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	2b00      	cmp	r3, #0
 8001538:	d019      	beq.n	800156e <Control_Move+0x1b2>
 800153a:	68b8      	ldr	r0, [r7, #8]
 800153c:	f000 f864 	bl	8001608 <sign>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	da13      	bge.n	800156e <Control_Move+0x1b2>
				{
					sspeed = Basic_speed;
 8001546:	4b22      	ldr	r3, [pc, #136]	@ (80015d0 <Control_Move+0x214>)
 8001548:	2282      	movs	r2, #130	@ 0x82
 800154a:	801a      	strh	r2, [r3, #0]
					RobotSpeed_x =  sspeed * sign(tempx) ;
 800154c:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <Control_Move+0x214>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	461c      	mov	r4, r3
 8001552:	68b8      	ldr	r0, [r7, #8]
 8001554:	f000 f858 	bl	8001608 <sign>
 8001558:	4603      	mov	r3, r0
 800155a:	fb04 f303 	mul.w	r3, r4, r3
 800155e:	4a1e      	ldr	r2, [pc, #120]	@ (80015d8 <Control_Move+0x21c>)
 8001560:	6013      	str	r3, [r2, #0]
					chay_phai(RobotSpeed_x);
 8001562:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <Control_Move+0x21c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fe56 	bl	8001218 <chay_phai>
 800156c:	e002      	b.n	8001574 <Control_Move+0x1b8>
				}		else RobotSpeed_x = 0;
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <Control_Move+0x21c>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
			//xoay
			 if(    values[12]  &&   xoay > 0 )    	xoay_phai(Turn_speed);
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <Control_Move+0x210>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <Control_Move+0x1cc>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	dd02      	ble.n	8001588 <Control_Move+0x1cc>
 8001582:	2048      	movs	r0, #72	@ 0x48
 8001584:	f7ff fe60 	bl	8001248 <xoay_phai>
			 if(    values[12]  &&   xoay < 0 )    	xoay_trai(Turn_speed);
 8001588:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <Control_Move+0x210>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00f      	beq.n	80015b0 <Control_Move+0x1f4>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da0c      	bge.n	80015b0 <Control_Move+0x1f4>
 8001596:	2048      	movs	r0, #72	@ 0x48
 8001598:	f7ff fe6a 	bl	8001270 <xoay_trai>
 800159c:	e008      	b.n	80015b0 <Control_Move+0x1f4>


		}else
		{

			stop();// neu nut 9 and 11  = 0 thi stop het
 800159e:	f7ff fe83 	bl	80012a8 <stop>
			RobotSpeed_x=0;
 80015a2:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <Control_Move+0x21c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
			RobotSpeed_y=0;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <Control_Move+0x218>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e000      	b.n	80015b2 <Control_Move+0x1f6>
			 if(    values[12]  &&   xoay < 0 )    	xoay_trai(Turn_speed);
 80015b0:	bf00      	nop

//		 if(values[16] == 1)
//		 {
//			 tha_long();
//		 }
		tempx=0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
		tempy=0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
		xoay=0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
		flag = 0;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <Control_Move+0x220>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	200005b4 	.word	0x200005b4
 80015d0:	200005b2 	.word	0x200005b2
 80015d4:	20000088 	.word	0x20000088
 80015d8:	2000008c 	.word	0x2000008c
 80015dc:	20000090 	.word	0x20000090

080015e0 <Hand_Control>:

void Hand_Control(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	split_array();
 80015e4:	f7ff febc 	bl	8001360 <split_array>
	angle_adjust();
 80015e8:	f7ff f8fa 	bl	80007e0 <angle_adjust>
	Control_Move();
 80015ec:	f7ff fee6 	bl	80013bc <Control_Move>
	HAL_UART_Receive_IT(&huart5,&rcv_buffer,1);
 80015f0:	2201      	movs	r2, #1
 80015f2:	4903      	ldr	r1, [pc, #12]	@ (8001600 <Hand_Control+0x20>)
 80015f4:	4803      	ldr	r0, [pc, #12]	@ (8001604 <Hand_Control+0x24>)
 80015f6:	f002 fe16 	bl	8004226 <HAL_UART_Receive_IT>
	//HAL_Delay(10);
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200005b0 	.word	0x200005b0
 8001604:	200003dc 	.word	0x200003dc

08001608 <sign>:


int  sign(int number)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	int dau;
	if(number > 0)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	dd02      	ble.n	800161c <sign+0x14>
	{
		dau = 1;
 8001616:	2301      	movs	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e008      	b.n	800162e <sign+0x26>
	}
	else if(number < 0)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	da03      	bge.n	800162a <sign+0x22>
	{
		dau = -1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e001      	b.n	800162e <sign+0x26>
	}else dau = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
	return dau;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_MspInit>:




void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001650:	6453      	str	r3, [r2, #68]	@ 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a29      	ldr	r2, [pc, #164]	@ (8001740 <HAL_TIM_Base_MspInit+0xb4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10e      	bne.n	80016bc <HAL_TIM_Base_MspInit+0x30>
  {

    __HAL_RCC_TIM1_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	4a27      	ldr	r2, [pc, #156]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ae:	4b25      	ldr	r3, [pc, #148]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_TIM4_CLK_ENABLE();

  }

}
 80016ba:	e03a      	b.n	8001732 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c4:	d10e      	bne.n	80016e4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
}
 80016e2:	e026      	b.n	8001732 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <HAL_TIM_Base_MspInit+0xbc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d10e      	bne.n	800170c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a13      	ldr	r2, [pc, #76]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	e012      	b.n	8001732 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0e      	ldr	r2, [pc, #56]	@ (800174c <HAL_TIM_Base_MspInit+0xc0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10d      	bne.n	8001732 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a09      	ldr	r2, [pc, #36]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <HAL_TIM_Base_MspInit+0xb8>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
}
 8001732:	bf00      	nop
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40010000 	.word	0x40010000
 8001744:	40023800 	.word	0x40023800
 8001748:	40000400 	.word	0x40000400
 800174c:	40000800 	.word	0x40000800

08001750 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08e      	sub	sp, #56	@ 0x38
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a4b      	ldr	r2, [pc, #300]	@ (800189c <HAL_TIM_PWM_MspInit+0x14c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10d      	bne.n	800178e <HAL_TIM_PWM_MspInit+0x3e>
  {

    __HAL_RCC_TIM5_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
 8001776:	4b4a      	ldr	r3, [pc, #296]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	4a49      	ldr	r2, [pc, #292]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6413      	str	r3, [r2, #64]	@ 0x40
 8001782:	4b47      	ldr	r3, [pc, #284]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	623b      	str	r3, [r7, #32]
 800178c:	6a3b      	ldr	r3, [r7, #32]

  }
  if(htim->Instance==TIM2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001796:	d14b      	bne.n	8001830 <HAL_TIM_PWM_MspInit+0xe0>
    {


      __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	4b40      	ldr	r3, [pc, #256]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a0:	4a3f      	ldr	r2, [pc, #252]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a8:	4b3d      	ldr	r3, [pc, #244]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	4b39      	ldr	r3, [pc, #228]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	4a38      	ldr	r2, [pc, #224]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c4:	4b36      	ldr	r3, [pc, #216]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	69bb      	ldr	r3, [r7, #24]
      /**TIM2 GPIO Configuration
      PA15     ------> TIM2_CH1
      PB3     ------> TIM2_CH2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	633b      	str	r3, [r7, #48]	@ 0x30
      GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017e2:	2301      	movs	r3, #1
 80017e4:	637b      	str	r3, [r7, #52]	@ 0x34
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	482d      	ldr	r0, [pc, #180]	@ (80018a4 <HAL_TIM_PWM_MspInit+0x154>)
 80017ee:	f000 fe01 	bl	80023f4 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f2:	2308      	movs	r3, #8
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	@ 0x30
      GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001802:	2301      	movs	r3, #1
 8001804:	637b      	str	r3, [r7, #52]	@ 0x34
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180a:	4619      	mov	r1, r3
 800180c:	4826      	ldr	r0, [pc, #152]	@ (80018a8 <HAL_TIM_PWM_MspInit+0x158>)
 800180e:	f000 fdf1 	bl	80023f4 <HAL_GPIO_Init>
      __HAL_RCC_TIM2_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6413      	str	r3, [r2, #64]	@ 0x40
 8001822:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_TIM3_CLK_ENABLE();
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
    }
}
 800182e:	e030      	b.n	8001892 <HAL_TIM_PWM_MspInit+0x142>
    else if(htim->Instance==TIM3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <HAL_TIM_PWM_MspInit+0x15c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12b      	bne.n	8001892 <HAL_TIM_PWM_MspInit+0x142>
      __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
      GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;//|GPIO_PIN_8|GPIO_PIN_9;
 8001856:	2330      	movs	r3, #48	@ 0x30
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001866:	2302      	movs	r3, #2
 8001868:	637b      	str	r3, [r7, #52]	@ 0x34
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	480d      	ldr	r0, [pc, #52]	@ (80018a8 <HAL_TIM_PWM_MspInit+0x158>)
 8001872:	f000 fdbf 	bl	80023f4 <HAL_GPIO_Init>
      __HAL_RCC_TIM3_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6413      	str	r3, [r2, #64]	@ 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_TIM_PWM_MspInit+0x150>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
}
 8001892:	bf00      	nop
 8001894:	3738      	adds	r7, #56	@ 0x38
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40000c00 	.word	0x40000c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40000400 	.word	0x40000400

080018b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b090      	sub	sp, #64	@ 0x40
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a7f      	ldr	r2, [pc, #508]	@ (8001acc <HAL_TIM_MspPostInit+0x21c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d12d      	bne.n	800192e <HAL_TIM_MspPostInit+0x7e>
  {

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018d6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80018ee:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001900:	2301      	movs	r3, #1
 8001902:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001908:	4619      	mov	r1, r3
 800190a:	4872      	ldr	r0, [pc, #456]	@ (8001ad4 <HAL_TIM_MspPostInit+0x224>)
 800190c:	f000 fd72 	bl	80023f4 <HAL_GPIO_Init>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
 8001914:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001918:	4a6d      	ldr	r2, [pc, #436]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001920:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
        __HAL_RCC_TIM8_CLK_ENABLE();
  }


}
 800192c:	e0ca      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001936:	d13d      	bne.n	80019b4 <HAL_TIM_MspPostInit+0x104>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
 800193c:	4b64      	ldr	r3, [pc, #400]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	4a63      	ldr	r2, [pc, #396]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6313      	str	r3, [r2, #48]	@ 0x30
 8001948:	4b61      	ldr	r3, [pc, #388]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	623b      	str	r3, [r7, #32]
 8001952:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	6313      	str	r3, [r2, #48]	@ 0x30
 8001964:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001970:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001982:	2301      	movs	r3, #1
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800198a:	4619      	mov	r1, r3
 800198c:	4851      	ldr	r0, [pc, #324]	@ (8001ad4 <HAL_TIM_MspPostInit+0x224>)
 800198e:	f000 fd31 	bl	80023f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001992:	2308      	movs	r3, #8
 8001994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a2:	2301      	movs	r3, #1
 80019a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019aa:	4619      	mov	r1, r3
 80019ac:	484a      	ldr	r0, [pc, #296]	@ (8001ad8 <HAL_TIM_MspPostInit+0x228>)
 80019ae:	f000 fd21 	bl	80023f4 <HAL_GPIO_Init>
}
 80019b2:	e087      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a48      	ldr	r2, [pc, #288]	@ (8001adc <HAL_TIM_MspPostInit+0x22c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12c      	bne.n	8001a18 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	4b43      	ldr	r3, [pc, #268]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a42      	ldr	r2, [pc, #264]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b40      	ldr	r3, [pc, #256]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;//|GPIO_PIN_8|GPIO_PIN_9;
 80019da:	2330      	movs	r3, #48	@ 0x30
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019ea:	2302      	movs	r3, #2
 80019ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f2:	4619      	mov	r1, r3
 80019f4:	4838      	ldr	r0, [pc, #224]	@ (8001ad8 <HAL_TIM_MspPostInit+0x228>)
 80019f6:	f000 fcfd 	bl	80023f4 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	4a33      	ldr	r2, [pc, #204]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0a:	4b31      	ldr	r3, [pc, #196]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
}
 8001a16:	e055      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x214>
  else if(htim->Instance==TIM5)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ae0 <HAL_TIM_MspPostInit+0x230>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d11e      	bne.n	8001a60 <HAL_TIM_MspPostInit+0x1b0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a29      	ldr	r2, [pc, #164]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a56:	4619      	mov	r1, r3
 8001a58:	481e      	ldr	r0, [pc, #120]	@ (8001ad4 <HAL_TIM_MspPostInit+0x224>)
 8001a5a:	f000 fccb 	bl	80023f4 <HAL_GPIO_Init>
}
 8001a5e:	e031      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x214>
    else if(htim->Instance==TIM8)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae4 <HAL_TIM_MspPostInit+0x234>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d12c      	bne.n	8001ac4 <HAL_TIM_MspPostInit+0x214>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a86:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	633b      	str	r3, [r7, #48]	@ 0x30
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63bb      	str	r3, [r7, #56]	@ 0x38
        GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4811      	ldr	r0, [pc, #68]	@ (8001ae8 <HAL_TIM_MspPostInit+0x238>)
 8001aa4:	f000 fca6 	bl	80023f4 <HAL_GPIO_Init>
        __HAL_RCC_TIM8_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab0:	4a07      	ldr	r2, [pc, #28]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_TIM_MspPostInit+0x220>)
 8001aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	3740      	adds	r7, #64	@ 0x40
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40000c00 	.word	0x40000c00
 8001ae4:	40010400 	.word	0x40010400
 8001ae8:	40020800 	.word	0x40020800

08001aec <HAL_UART_MspInit>:

}


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b090      	sub	sp, #64	@ 0x40
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a75      	ldr	r2, [pc, #468]	@ (8001ce0 <HAL_UART_MspInit+0x1f4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d134      	bne.n	8001b78 <HAL_UART_MspInit+0x8c>
  {
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b12:	4b74      	ldr	r3, [pc, #464]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a73      	ldr	r2, [pc, #460]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b71      	ldr	r3, [pc, #452]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	4a6c      	ldr	r2, [pc, #432]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b46:	23c0      	movs	r3, #192	@ 0xc0
 8001b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b56:	2307      	movs	r3, #7
 8001b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4861      	ldr	r0, [pc, #388]	@ (8001ce8 <HAL_UART_MspInit+0x1fc>)
 8001b62:	f000 fc47 	bl	80023f4 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(USART1_IRQn, 0, 3);
 8001b66:	2203      	movs	r2, #3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2025      	movs	r0, #37	@ 0x25
 8001b6c:	f000 fb79 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b70:	2025      	movs	r0, #37	@ 0x25
 8001b72:	f000 fb92 	bl	800229a <HAL_NVIC_EnableIRQ>
      HAL_NVIC_SetPriority(UART5_IRQn, 0, 3);
      HAL_NVIC_EnableIRQ(UART5_IRQn);

    }

}
 8001b76:	e0ae      	b.n	8001cd6 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5b      	ldr	r2, [pc, #364]	@ (8001cec <HAL_UART_MspInit+0x200>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d134      	bne.n	8001bec <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
 8001b86:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4a56      	ldr	r2, [pc, #344]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	4b54      	ldr	r3, [pc, #336]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	4b50      	ldr	r3, [pc, #320]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a4f      	ldr	r2, [pc, #316]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bba:	230c      	movs	r3, #12
 8001bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bca:	2307      	movs	r3, #7
 8001bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4846      	ldr	r0, [pc, #280]	@ (8001cf0 <HAL_UART_MspInit+0x204>)
 8001bd6:	f000 fc0d 	bl	80023f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2026      	movs	r0, #38	@ 0x26
 8001be0:	f000 fb3f 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001be4:	2026      	movs	r0, #38	@ 0x26
 8001be6:	f000 fb58 	bl	800229a <HAL_NVIC_EnableIRQ>
}
 8001bea:	e074      	b.n	8001cd6 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a40      	ldr	r2, [pc, #256]	@ (8001cf4 <HAL_UART_MspInit+0x208>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d135      	bne.n	8001c62 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a39      	ldr	r2, [pc, #228]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	4b33      	ldr	r3, [pc, #204]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a32      	ldr	r2, [pc, #200]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b30      	ldr	r3, [pc, #192]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c40:	2307      	movs	r3, #7
 8001c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4827      	ldr	r0, [pc, #156]	@ (8001ce8 <HAL_UART_MspInit+0x1fc>)
 8001c4c:	f000 fbd2 	bl	80023f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	2027      	movs	r0, #39	@ 0x27
 8001c56:	f000 fb04 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c5a:	2027      	movs	r0, #39	@ 0x27
 8001c5c:	f000 fb1d 	bl	800229a <HAL_NVIC_EnableIRQ>
}
 8001c60:	e039      	b.n	8001cd6 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==UART5)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a24      	ldr	r2, [pc, #144]	@ (8001cf8 <HAL_UART_MspInit+0x20c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d134      	bne.n	8001cd6 <HAL_UART_MspInit+0x1ea>
      __HAL_RCC_UART5_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	4a14      	ldr	r2, [pc, #80]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_UART_MspInit+0x1f8>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
      GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8001ca4:	f241 0304 	movw	r3, #4100	@ 0x1004
 8001ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	633b      	str	r3, [r7, #48]	@ 0x30
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	637b      	str	r3, [r7, #52]	@ 0x34
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	480e      	ldr	r0, [pc, #56]	@ (8001cfc <HAL_UART_MspInit+0x210>)
 8001cc2:	f000 fb97 	bl	80023f4 <HAL_GPIO_Init>
      HAL_NVIC_SetPriority(UART5_IRQn, 0, 3);
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2035      	movs	r0, #53	@ 0x35
 8001ccc:	f000 fac9 	bl	8002262 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001cd0:	2035      	movs	r0, #53	@ 0x35
 8001cd2:	f000 fae2 	bl	800229a <HAL_NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3740      	adds	r7, #64	@ 0x40
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40004400 	.word	0x40004400
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40004800 	.word	0x40004800
 8001cf8:	40005000 	.word	0x40005000
 8001cfc:	40020c00 	.word	0x40020c00

08001d00 <NMI_Handler>:
extern UART_HandleTypeDef huart3;

extern TIM_HandleTypeDef  htim3;
extern TIM_HandleTypeDef  htim4;
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <NMI_Handler+0x4>

08001d08 <TIM4_IRQHandler>:
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

void TIM4_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim4);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <TIM4_IRQHandler+0x10>)
 8001d0e:	f001 fb3f 	bl	8003390 <HAL_TIM_IRQHandler>
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000268 	.word	0x20000268

08001d1c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <TIM3_IRQHandler+0x10>)
 8001d22:	f001 fb35 	bl	8003390 <HAL_TIM_IRQHandler>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000394 	.word	0x20000394

08001d30 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <MemManage_Handler+0x4>

08001d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <BusFault_Handler+0x4>

08001d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <UsageFault_Handler+0x4>

08001d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7e:	f000 f975 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <UART5_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <UART5_IRQHandler+0x10>)
 8001d8e:	f002 fa7b 	bl	8004288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200003dc 	.word	0x200003dc

08001d9c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <USART2_IRQHandler+0x10>)
 8001da2:	f002 fa71 	bl	8004288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200004f8 	.word	0x200004f8

08001db0 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <USART3_IRQHandler+0x10>)
 8001db6:	f002 fa67 	bl	8004288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200002b4 	.word	0x200002b4

08001dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_kill>:

int _kill(int pid, int sig)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dde:	f003 fb29 	bl	8005434 <__errno>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2216      	movs	r2, #22
 8001de6:	601a      	str	r2, [r3, #0]
  return -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_exit>:

void _exit (int status)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ffe7 	bl	8001dd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e06:	bf00      	nop
 8001e08:	e7fd      	b.n	8001e06 <_exit+0x12>

08001e0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e00a      	b.n	8001e32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e1c:	f3af 8000 	nop.w
 8001e20:	4601      	mov	r1, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	60ba      	str	r2, [r7, #8]
 8001e28:	b2ca      	uxtb	r2, r1
 8001e2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dbf0      	blt.n	8001e1c <_read+0x12>
  }

  return len;
 8001e3a:	687b      	ldr	r3, [r7, #4]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	e009      	b.n	8001e6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	60ba      	str	r2, [r7, #8]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3301      	adds	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	dbf1      	blt.n	8001e56 <_write+0x12>
  }
  return len;
 8001e72:	687b      	ldr	r3, [r7, #4]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_close>:

int _close(int file)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ea4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_isatty>:

int _isatty(int file)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ebc:	2301      	movs	r3, #1
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	@ (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f14:	f003 fa8e 	bl	8005434 <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20020000 	.word	0x20020000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	20000094 	.word	0x20000094
 8001f4c:	20000660 	.word	0x20000660

08001f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <SystemInit+0x20>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5a:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <SystemInit+0x20>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f78:	480d      	ldr	r0, [pc, #52]	@ (8001fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f7a:	490e      	ldr	r1, [pc, #56]	@ (8001fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f90:	4c0b      	ldr	r4, [pc, #44]	@ (8001fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f9e:	f7ff ffd7 	bl	8001f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f003 fa4d 	bl	8005440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7fe fcc1 	bl	800092c <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fb8:	08006c98 	.word	0x08006c98
  ldr r2, =_sbss
 8001fbc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001fc0:	2000065c 	.word	0x2000065c

08001fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <HAL_Init+0x40>)
 8001fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <HAL_Init+0x40>)
 8001fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	@ (8002008 <HAL_Init+0x40>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f92b 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f000 f808 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff fb1e 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_InitTick+0x54>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <HAL_InitTick+0x58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f943 	bl	80022b6 <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f000 f90b 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	@ (8002068 <HAL_InitTick+0x5c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000004 	.word	0x20000004
 8002064:	2000000c 	.word	0x2000000c
 8002068:	20000008 	.word	0x20000008

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	2000000c 	.word	0x2000000c
 8002090:	20000658 	.word	0x20000658

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000658 	.word	0x20000658

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db0b      	blt.n	800213a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4907      	ldr	r1, [pc, #28]	@ (8002148 <__NVIC_EnableIRQ+0x38>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2001      	movs	r0, #1
 8002132:	fa00 f202 	lsl.w	r2, r0, r2
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	@ (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	@ (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	@ 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	@ 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ff8e 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff29 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff3e 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff8e 	bl	80021a0 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5d 	bl	800214c <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff31 	bl	8002110 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa2 	bl	8002208 <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff feda 	bl	8002094 <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d008      	beq.n	8002300 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2280      	movs	r2, #128	@ 0x80
 80022f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e052      	b.n	80023a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0216 	bic.w	r2, r2, #22
 800230e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800231e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <HAL_DMA_Abort+0x62>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0208 	bic.w	r2, r2, #8
 800233e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002350:	e013      	b.n	800237a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002352:	f7ff fe9f 	bl	8002094 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b05      	cmp	r3, #5
 800235e:	d90c      	bls.n	800237a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e015      	b.n	80023a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e4      	bne.n	8002352 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238c:	223f      	movs	r2, #63	@ 0x3f
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d004      	beq.n	80023cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2280      	movs	r2, #128	@ 0x80
 80023c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e00c      	b.n	80023e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2205      	movs	r2, #5
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	@ 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	e16b      	b.n	80026e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	429a      	cmp	r2, r3
 800242a:	f040 815a 	bne.w	80026e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d005      	beq.n	8002446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	2b02      	cmp	r3, #2
 8002444:	d130      	bne.n	80024a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 0201 	and.w	r2, r3, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d017      	beq.n	80024e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d123      	bne.n	8002538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3208      	adds	r2, #8
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0203 	and.w	r2, r3, #3
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80b4 	beq.w	80026e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b60      	ldr	r3, [pc, #384]	@ (8002700 <HAL_GPIO_Init+0x30c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	4a5f      	ldr	r2, [pc, #380]	@ (8002700 <HAL_GPIO_Init+0x30c>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002588:	6453      	str	r3, [r2, #68]	@ 0x44
 800258a:	4b5d      	ldr	r3, [pc, #372]	@ (8002700 <HAL_GPIO_Init+0x30c>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002596:	4a5b      	ldr	r2, [pc, #364]	@ (8002704 <HAL_GPIO_Init+0x310>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	@ (8002708 <HAL_GPIO_Init+0x314>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02b      	beq.n	800261a <HAL_GPIO_Init+0x226>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a51      	ldr	r2, [pc, #324]	@ (800270c <HAL_GPIO_Init+0x318>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d025      	beq.n	8002616 <HAL_GPIO_Init+0x222>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a50      	ldr	r2, [pc, #320]	@ (8002710 <HAL_GPIO_Init+0x31c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01f      	beq.n	8002612 <HAL_GPIO_Init+0x21e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002714 <HAL_GPIO_Init+0x320>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d019      	beq.n	800260e <HAL_GPIO_Init+0x21a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002718 <HAL_GPIO_Init+0x324>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0x216>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	@ (800271c <HAL_GPIO_Init+0x328>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00d      	beq.n	8002606 <HAL_GPIO_Init+0x212>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002720 <HAL_GPIO_Init+0x32c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002724 <HAL_GPIO_Init+0x330>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_GPIO_Init+0x20a>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e00e      	b.n	800261c <HAL_GPIO_Init+0x228>
 80025fe:	2308      	movs	r3, #8
 8002600:	e00c      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002602:	2306      	movs	r3, #6
 8002604:	e00a      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002606:	2305      	movs	r3, #5
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x228>
 800260a:	2304      	movs	r3, #4
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x228>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x228>
 800261a:	2300      	movs	r3, #0
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262c:	4935      	ldr	r1, [pc, #212]	@ (8002704 <HAL_GPIO_Init+0x310>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <HAL_GPIO_Init+0x334>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265e:	4a32      	ldr	r2, [pc, #200]	@ (8002728 <HAL_GPIO_Init+0x334>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002664:	4b30      	ldr	r3, [pc, #192]	@ (8002728 <HAL_GPIO_Init+0x334>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002688:	4a27      	ldr	r2, [pc, #156]	@ (8002728 <HAL_GPIO_Init+0x334>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268e:	4b26      	ldr	r3, [pc, #152]	@ (8002728 <HAL_GPIO_Init+0x334>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002728 <HAL_GPIO_Init+0x334>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <HAL_GPIO_Init+0x334>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026dc:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <HAL_GPIO_Init+0x334>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	f67f ae90 	bls.w	8002410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3724      	adds	r7, #36	@ 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40013800 	.word	0x40013800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40021400 	.word	0x40021400
 8002720:	40021800 	.word	0x40021800
 8002724:	40021c00 	.word	0x40021c00
 8002728:	40013c00 	.word	0x40013c00

0800272c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
 8002738:	4613      	mov	r3, r2
 800273a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e267      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d075      	beq.n	800286a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800277e:	4b88      	ldr	r3, [pc, #544]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b04      	cmp	r3, #4
 8002788:	d00c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278a:	4b85      	ldr	r3, [pc, #532]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002792:	2b08      	cmp	r3, #8
 8002794:	d112      	bne.n	80027bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002796:	4b82      	ldr	r3, [pc, #520]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027a2:	d10b      	bne.n	80027bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	4b7e      	ldr	r3, [pc, #504]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d05b      	beq.n	8002868 <HAL_RCC_OscConfig+0x108>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d157      	bne.n	8002868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e242      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_OscConfig+0x74>
 80027c6:	4b76      	ldr	r3, [pc, #472]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a75      	ldr	r2, [pc, #468]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e01d      	b.n	8002810 <HAL_RCC_OscConfig+0xb0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x98>
 80027de:	4b70      	ldr	r3, [pc, #448]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a6f      	ldr	r2, [pc, #444]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b6d      	ldr	r3, [pc, #436]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6c      	ldr	r2, [pc, #432]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0xb0>
 80027f8:	4b69      	ldr	r3, [pc, #420]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a68      	ldr	r2, [pc, #416]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b66      	ldr	r3, [pc, #408]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a65      	ldr	r2, [pc, #404]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff fc3c 	bl	8002094 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002820:	f7ff fc38 	bl	8002094 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	@ 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e207      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b5b      	ldr	r3, [pc, #364]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0xc0>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7ff fc28 	bl	8002094 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002848:	f7ff fc24 	bl	8002094 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	@ 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1f3      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	4b51      	ldr	r3, [pc, #324]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0xe8>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d063      	beq.n	800293e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002876:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002882:	4b47      	ldr	r3, [pc, #284]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288a:	2b08      	cmp	r3, #8
 800288c:	d11c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b44      	ldr	r3, [pc, #272]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	4b41      	ldr	r3, [pc, #260]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x152>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e1c7      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4937      	ldr	r1, [pc, #220]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	e03a      	b.n	800293e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d0:	4b34      	ldr	r3, [pc, #208]	@ (80029a4 <HAL_RCC_OscConfig+0x244>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7ff fbdd 	bl	8002094 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028de:	f7ff fbd9 	bl	8002094 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e1a8      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b28      	ldr	r3, [pc, #160]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4925      	ldr	r1, [pc, #148]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
 8002910:	e015      	b.n	800293e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCC_OscConfig+0x244>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff fbbc 	bl	8002094 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002920:	f7ff fbb8 	bl	8002094 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e187      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d036      	beq.n	80029b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_RCC_OscConfig+0x248>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7ff fb9c 	bl	8002094 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002960:	f7ff fb98 	bl	8002094 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e167      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x200>
 800297e:	e01b      	b.n	80029b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_OscConfig+0x248>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7ff fb85 	bl	8002094 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	e00e      	b.n	80029ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298e:	f7ff fb81 	bl	8002094 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d907      	bls.n	80029ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e150      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
 80029a0:	40023800 	.word	0x40023800
 80029a4:	42470000 	.word	0x42470000
 80029a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ea      	bne.n	800298e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8097 	beq.w	8002af4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b81      	ldr	r3, [pc, #516]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b7d      	ldr	r3, [pc, #500]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e6:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b77      	ldr	r3, [pc, #476]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a02:	4b74      	ldr	r3, [pc, #464]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a73      	ldr	r2, [pc, #460]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0e:	f7ff fb41 	bl	8002094 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7ff fb3d 	bl	8002094 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e10c      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x2ea>
 8002a3c:	4b64      	ldr	r3, [pc, #400]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a63      	ldr	r2, [pc, #396]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x324>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x30c>
 8002a52:	4b5f      	ldr	r3, [pc, #380]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a56:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0x324>
 8002a6c:	4b58      	ldr	r3, [pc, #352]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a70:	4a57      	ldr	r2, [pc, #348]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a78:	4b55      	ldr	r3, [pc, #340]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7c:	4a54      	ldr	r2, [pc, #336]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f023 0304 	bic.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fb02 	bl	8002094 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7ff fafe 	bl	8002094 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0cb      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	4b49      	ldr	r3, [pc, #292]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ee      	beq.n	8002a94 <HAL_RCC_OscConfig+0x334>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7ff faec 	bl	8002094 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7ff fae8 	bl	8002094 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0b5      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ee      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b39      	ldr	r3, [pc, #228]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	4a38      	ldr	r2, [pc, #224]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a1 	beq.w	8002c40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002afe:	4b34      	ldr	r3, [pc, #208]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d05c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d141      	bne.n	8002b96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b31      	ldr	r3, [pc, #196]	@ (8002bd8 <HAL_RCC_OscConfig+0x478>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7ff fabc 	bl	8002094 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7ff fab8 	bl	8002094 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e087      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b27      	ldr	r3, [pc, #156]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	491b      	ldr	r1, [pc, #108]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd8 <HAL_RCC_OscConfig+0x478>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7ff fa91 	bl	8002094 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b76:	f7ff fa8d 	bl	8002094 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e05c      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x416>
 8002b94:	e054      	b.n	8002c40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_RCC_OscConfig+0x478>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff fa7a 	bl	8002094 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7ff fa76 	bl	8002094 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e045      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x444>
 8002bc2:	e03d      	b.n	8002c40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e038      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x4ec>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d028      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d121      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d11a      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d111      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	3b01      	subs	r3, #1
 8002c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0cc      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b68      	ldr	r3, [pc, #416]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d90c      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b65      	ldr	r3, [pc, #404]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b63      	ldr	r3, [pc, #396]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b8      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca4:	4b59      	ldr	r3, [pc, #356]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cbc:	4b53      	ldr	r3, [pc, #332]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b50      	ldr	r3, [pc, #320]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	494d      	ldr	r1, [pc, #308]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d044      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b47      	ldr	r3, [pc, #284]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d119      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e06f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e067      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b37      	ldr	r3, [pc, #220]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4934      	ldr	r1, [pc, #208]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d40:	f7ff f9a8 	bl	8002094 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7ff f9a4 	bl	8002094 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e04f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d20c      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e032      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4916      	ldr	r1, [pc, #88]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc2:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	490e      	ldr	r1, [pc, #56]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dd6:	f000 f821 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	490a      	ldr	r1, [pc, #40]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	5ccb      	ldrb	r3, [r1, r3]
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a09      	ldr	r2, [pc, #36]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f908 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023c00 	.word	0x40023c00
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	08006a74 	.word	0x08006a74
 8002e14:	20000004 	.word	0x20000004
 8002e18:	20000008 	.word	0x20000008

08002e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e20:	b090      	sub	sp, #64	@ 0x40
 8002e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e28:	2300      	movs	r3, #0
 8002e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e34:	4b59      	ldr	r3, [pc, #356]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d00d      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x40>
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	f200 80a1 	bhi.w	8002f88 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e4e:	e09b      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b53      	ldr	r3, [pc, #332]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002e54:	e09b      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e56:	4b53      	ldr	r3, [pc, #332]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e5a:	e098      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e66:	4b4d      	ldr	r3, [pc, #308]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d028      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e72:	4b4a      	ldr	r3, [pc, #296]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	2200      	movs	r2, #0
 8002e7a:	623b      	str	r3, [r7, #32]
 8002e7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e84:	2100      	movs	r1, #0
 8002e86:	4b47      	ldr	r3, [pc, #284]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e88:	fb03 f201 	mul.w	r2, r3, r1
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	fb00 f303 	mul.w	r3, r0, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	4a43      	ldr	r2, [pc, #268]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e96:	fba0 1202 	umull	r1, r2, r0, r2
 8002e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e9c:	460a      	mov	r2, r1
 8002e9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea2:	4413      	add	r3, r2
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	61fa      	str	r2, [r7, #28]
 8002eae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002eb6:	f7fd f9e3 	bl	8000280 <__aeabi_uldivmod>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec2:	e053      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec4:	4b35      	ldr	r3, [pc, #212]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	2200      	movs	r2, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	617a      	str	r2, [r7, #20]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ed6:	f04f 0b00 	mov.w	fp, #0
 8002eda:	4652      	mov	r2, sl
 8002edc:	465b      	mov	r3, fp
 8002ede:	f04f 0000 	mov.w	r0, #0
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	0159      	lsls	r1, r3, #5
 8002ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eec:	0150      	lsls	r0, r2, #5
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	ebb2 080a 	subs.w	r8, r2, sl
 8002ef6:	eb63 090b 	sbc.w	r9, r3, fp
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f0e:	ebb2 0408 	subs.w	r4, r2, r8
 8002f12:	eb63 0509 	sbc.w	r5, r3, r9
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	00eb      	lsls	r3, r5, #3
 8002f20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f24:	00e2      	lsls	r2, r4, #3
 8002f26:	4614      	mov	r4, r2
 8002f28:	461d      	mov	r5, r3
 8002f2a:	eb14 030a 	adds.w	r3, r4, sl
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	eb45 030b 	adc.w	r3, r5, fp
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f42:	4629      	mov	r1, r5
 8002f44:	028b      	lsls	r3, r1, #10
 8002f46:	4621      	mov	r1, r4
 8002f48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	028a      	lsls	r2, r1, #10
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f56:	2200      	movs	r2, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	60fa      	str	r2, [r7, #12]
 8002f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f60:	f7fd f98e 	bl	8000280 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	3301      	adds	r3, #1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002f7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3740      	adds	r7, #64	@ 0x40
 8002f94:	46bd      	mov	sp, r7
 8002f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	017d7840 	.word	0x017d7840

08002fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fac:	4b03      	ldr	r3, [pc, #12]	@ (8002fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000004 	.word	0x20000004

08002fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fc4:	f7ff fff0 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0a9b      	lsrs	r3, r3, #10
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4903      	ldr	r1, [pc, #12]	@ (8002fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	08006a84 	.word	0x08006a84

08002fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fec:	f7ff ffdc 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	0b5b      	lsrs	r3, r3, #13
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4903      	ldr	r1, [pc, #12]	@ (800300c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800
 800300c:	08006a84 	.word	0x08006a84

08003010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e041      	b.n	80030a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fb28 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f000 fcaa 	bl	80039a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e041      	b.n	8003144 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d106      	bne.n	80030da <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f839 	bl	800314c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	4619      	mov	r1, r3
 80030ec:	4610      	mov	r0, r2
 80030ee:	f000 fc5b 	bl	80039a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e041      	b.n	80031f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe fae2 	bl	8001750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f000 fc02 	bl	80039a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_TIM_PWM_Start+0x24>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e022      	b.n	800326a <HAL_TIM_PWM_Start+0x6a>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d109      	bne.n	800323e <HAL_TIM_PWM_Start+0x3e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	e015      	b.n	800326a <HAL_TIM_PWM_Start+0x6a>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d109      	bne.n	8003258 <HAL_TIM_PWM_Start+0x58>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e008      	b.n	800326a <HAL_TIM_PWM_Start+0x6a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e07c      	b.n	800336c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0x82>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003280:	e013      	b.n	80032aa <HAL_TIM_PWM_Start+0xaa>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0x92>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003290:	e00b      	b.n	80032aa <HAL_TIM_PWM_Start+0xaa>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_PWM_Start+0xa2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a0:	e003      	b.n	80032aa <HAL_TIM_PWM_Start+0xaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fe62 	bl	8003f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003374 <HAL_TIM_PWM_Start+0x174>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_TIM_PWM_Start+0xcc>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003378 <HAL_TIM_PWM_Start+0x178>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_PWM_Start+0xd0>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_TIM_PWM_Start+0xd2>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a22      	ldr	r2, [pc, #136]	@ (8003374 <HAL_TIM_PWM_Start+0x174>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_TIM_PWM_Start+0x136>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f8:	d01d      	beq.n	8003336 <HAL_TIM_PWM_Start+0x136>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1f      	ldr	r2, [pc, #124]	@ (800337c <HAL_TIM_PWM_Start+0x17c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_TIM_PWM_Start+0x136>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <HAL_TIM_PWM_Start+0x180>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_TIM_PWM_Start+0x136>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <HAL_TIM_PWM_Start+0x184>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_TIM_PWM_Start+0x136>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a16      	ldr	r2, [pc, #88]	@ (8003378 <HAL_TIM_PWM_Start+0x178>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_TIM_PWM_Start+0x136>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a18      	ldr	r2, [pc, #96]	@ (8003388 <HAL_TIM_PWM_Start+0x188>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_TIM_PWM_Start+0x136>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a16      	ldr	r2, [pc, #88]	@ (800338c <HAL_TIM_PWM_Start+0x18c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d111      	bne.n	800335a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d010      	beq.n	800336a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003358:	e007      	b.n	800336a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40010000 	.word	0x40010000
 8003378:	40010400 	.word	0x40010400
 800337c:	40000400 	.word	0x40000400
 8003380:	40000800 	.word	0x40000800
 8003384:	40000c00 	.word	0x40000c00
 8003388:	40014000 	.word	0x40014000
 800338c:	40001800 	.word	0x40001800

08003390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0202 	mvn.w	r2, #2
 80033bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd fb34 	bl	8000a40 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fac5 	bl	800396a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 facc 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b04      	cmp	r3, #4
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0204 	mvn.w	r2, #4
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fb0a 	bl	8000a40 <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa9b 	bl	800396a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 faa2 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b08      	cmp	r3, #8
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b08      	cmp	r3, #8
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0208 	mvn.w	r2, #8
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2204      	movs	r2, #4
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fae0 	bl	8000a40 <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa71 	bl	800396a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fa78 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0210 	mvn.w	r2, #16
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2208      	movs	r2, #8
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fab6 	bl	8000a40 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa47 	bl	800396a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fa4e 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d10e      	bne.n	8003514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0201 	mvn.w	r2, #1
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd f9f4 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351e:	2b80      	cmp	r3, #128	@ 0x80
 8003520:	d10e      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b80      	cmp	r3, #128	@ 0x80
 800352e:	d107      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fe1c 	bl	8004178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354a:	2b40      	cmp	r3, #64	@ 0x40
 800354c:	d10e      	bne.n	800356c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003558:	2b40      	cmp	r3, #64	@ 0x40
 800355a:	d107      	bne.n	800356c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa13 	bl	8003992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b20      	cmp	r3, #32
 8003578:	d10e      	bne.n	8003598 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b20      	cmp	r3, #32
 8003586:	d107      	bne.n	8003598 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0220 	mvn.w	r2, #32
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fde6 	bl	8004164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_TIM_OC_ConfigChannel+0x1e>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e048      	b.n	8003650 <HAL_TIM_OC_ConfigChannel+0xb0>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d839      	bhi.n	8003640 <HAL_TIM_OC_ConfigChannel+0xa0>
 80035cc:	a201      	add	r2, pc, #4	@ (adr r2, 80035d4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	08003609 	.word	0x08003609
 80035d8:	08003641 	.word	0x08003641
 80035dc:	08003641 	.word	0x08003641
 80035e0:	08003641 	.word	0x08003641
 80035e4:	08003617 	.word	0x08003617
 80035e8:	08003641 	.word	0x08003641
 80035ec:	08003641 	.word	0x08003641
 80035f0:	08003641 	.word	0x08003641
 80035f4:	08003625 	.word	0x08003625
 80035f8:	08003641 	.word	0x08003641
 80035fc:	08003641 	.word	0x08003641
 8003600:	08003641 	.word	0x08003641
 8003604:	08003633 	.word	0x08003633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa6a 	bl	8003ae8 <TIM_OC1_SetConfig>
      break;
 8003614:	e017      	b.n	8003646 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fad3 	bl	8003bc8 <TIM_OC2_SetConfig>
      break;
 8003622:	e010      	b.n	8003646 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fb42 	bl	8003cb4 <TIM_OC3_SetConfig>
      break;
 8003630:	e009      	b.n	8003646 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fbaf 	bl	8003d9c <TIM_OC4_SetConfig>
      break;
 800363e:	e002      	b.n	8003646 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	75fb      	strb	r3, [r7, #23]
      break;
 8003644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003672:	2302      	movs	r3, #2
 8003674:	e0ae      	b.n	80037d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	f200 809f 	bhi.w	80037c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003686:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	080036c1 	.word	0x080036c1
 8003690:	080037c5 	.word	0x080037c5
 8003694:	080037c5 	.word	0x080037c5
 8003698:	080037c5 	.word	0x080037c5
 800369c:	08003701 	.word	0x08003701
 80036a0:	080037c5 	.word	0x080037c5
 80036a4:	080037c5 	.word	0x080037c5
 80036a8:	080037c5 	.word	0x080037c5
 80036ac:	08003743 	.word	0x08003743
 80036b0:	080037c5 	.word	0x080037c5
 80036b4:	080037c5 	.word	0x080037c5
 80036b8:	080037c5 	.word	0x080037c5
 80036bc:	08003783 	.word	0x08003783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fa0e 	bl	8003ae8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0208 	orr.w	r2, r2, #8
 80036da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0204 	bic.w	r2, r2, #4
 80036ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6999      	ldr	r1, [r3, #24]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	619a      	str	r2, [r3, #24]
      break;
 80036fe:	e064      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fa5e 	bl	8003bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800371a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800372a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6999      	ldr	r1, [r3, #24]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	619a      	str	r2, [r3, #24]
      break;
 8003740:	e043      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fab3 	bl	8003cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0208 	orr.w	r2, r2, #8
 800375c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0204 	bic.w	r2, r2, #4
 800376c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	61da      	str	r2, [r3, #28]
      break;
 8003780:	e023      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fb07 	bl	8003d9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800379c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69d9      	ldr	r1, [r3, #28]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	021a      	lsls	r2, r3, #8
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	61da      	str	r2, [r3, #28]
      break;
 80037c2:	e002      	b.n	80037ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	75fb      	strb	r3, [r7, #23]
      break;
 80037c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_TIM_ConfigClockSource+0x1c>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e0b4      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x186>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800381e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003830:	d03e      	beq.n	80038b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003836:	f200 8087 	bhi.w	8003948 <HAL_TIM_ConfigClockSource+0x16c>
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800383e:	f000 8086 	beq.w	800394e <HAL_TIM_ConfigClockSource+0x172>
 8003842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003846:	d87f      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b70      	cmp	r3, #112	@ 0x70
 800384a:	d01a      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0xa6>
 800384c:	2b70      	cmp	r3, #112	@ 0x70
 800384e:	d87b      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x16c>
 8003850:	2b60      	cmp	r3, #96	@ 0x60
 8003852:	d050      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003854:	2b60      	cmp	r3, #96	@ 0x60
 8003856:	d877      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x16c>
 8003858:	2b50      	cmp	r3, #80	@ 0x50
 800385a:	d03c      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0xfa>
 800385c:	2b50      	cmp	r3, #80	@ 0x50
 800385e:	d873      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x16c>
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d058      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x13a>
 8003864:	2b40      	cmp	r3, #64	@ 0x40
 8003866:	d86f      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x16c>
 8003868:	2b30      	cmp	r3, #48	@ 0x30
 800386a:	d064      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x15a>
 800386c:	2b30      	cmp	r3, #48	@ 0x30
 800386e:	d86b      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b20      	cmp	r3, #32
 8003872:	d060      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x15a>
 8003874:	2b20      	cmp	r3, #32
 8003876:	d867      	bhi.n	8003948 <HAL_TIM_ConfigClockSource+0x16c>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d05c      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x15a>
 800387c:	2b10      	cmp	r3, #16
 800387e:	d05a      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x15a>
 8003880:	e062      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6899      	ldr	r1, [r3, #8]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f000 fb53 	bl	8003f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	609a      	str	r2, [r3, #8]
      break;
 80038ae:	e04f      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6899      	ldr	r1, [r3, #8]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f000 fb3c 	bl	8003f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038d2:	609a      	str	r2, [r3, #8]
      break;
 80038d4:	e03c      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 fab0 	bl	8003e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2150      	movs	r1, #80	@ 0x50
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fb09 	bl	8003f06 <TIM_ITRx_SetConfig>
      break;
 80038f4:	e02c      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	461a      	mov	r2, r3
 8003904:	f000 facf 	bl	8003ea6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2160      	movs	r1, #96	@ 0x60
 800390e:	4618      	mov	r0, r3
 8003910:	f000 faf9 	bl	8003f06 <TIM_ITRx_SetConfig>
      break;
 8003914:	e01c      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	461a      	mov	r2, r3
 8003924:	f000 fa90 	bl	8003e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2140      	movs	r1, #64	@ 0x40
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fae9 	bl	8003f06 <TIM_ITRx_SetConfig>
      break;
 8003934:	e00c      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f000 fae0 	bl	8003f06 <TIM_ITRx_SetConfig>
      break;
 8003946:	e003      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e000      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800394e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a40      	ldr	r2, [pc, #256]	@ (8003abc <TIM_Base_SetConfig+0x114>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c6:	d00f      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3d      	ldr	r2, [pc, #244]	@ (8003ac0 <TIM_Base_SetConfig+0x118>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00b      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a3c      	ldr	r2, [pc, #240]	@ (8003ac4 <TIM_Base_SetConfig+0x11c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d007      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a3b      	ldr	r2, [pc, #236]	@ (8003ac8 <TIM_Base_SetConfig+0x120>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_Base_SetConfig+0x40>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a3a      	ldr	r2, [pc, #232]	@ (8003acc <TIM_Base_SetConfig+0x124>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d108      	bne.n	80039fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2f      	ldr	r2, [pc, #188]	@ (8003abc <TIM_Base_SetConfig+0x114>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d02b      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a08:	d027      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac0 <TIM_Base_SetConfig+0x118>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d023      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac4 <TIM_Base_SetConfig+0x11c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01f      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac8 <TIM_Base_SetConfig+0x120>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01b      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a29      	ldr	r2, [pc, #164]	@ (8003acc <TIM_Base_SetConfig+0x124>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d017      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a28      	ldr	r2, [pc, #160]	@ (8003ad0 <TIM_Base_SetConfig+0x128>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a27      	ldr	r2, [pc, #156]	@ (8003ad4 <TIM_Base_SetConfig+0x12c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00f      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	@ (8003ad8 <TIM_Base_SetConfig+0x130>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a25      	ldr	r2, [pc, #148]	@ (8003adc <TIM_Base_SetConfig+0x134>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ae0 <TIM_Base_SetConfig+0x138>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a23      	ldr	r2, [pc, #140]	@ (8003ae4 <TIM_Base_SetConfig+0x13c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <TIM_Base_SetConfig+0x114>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_Base_SetConfig+0xf8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003acc <TIM_Base_SetConfig+0x124>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d103      	bne.n	8003aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	615a      	str	r2, [r3, #20]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40010400 	.word	0x40010400
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	40001800 	.word	0x40001800
 8003ae0:	40001c00 	.word	0x40001c00
 8003ae4:	40002000 	.word	0x40002000

08003ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 0302 	bic.w	r3, r3, #2
 8003b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a20      	ldr	r2, [pc, #128]	@ (8003bc0 <TIM_OC1_SetConfig+0xd8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_OC1_SetConfig+0x64>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc4 <TIM_OC1_SetConfig+0xdc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10c      	bne.n	8003b66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 0308 	bic.w	r3, r3, #8
 8003b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a15      	ldr	r2, [pc, #84]	@ (8003bc0 <TIM_OC1_SetConfig+0xd8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_OC1_SetConfig+0x8e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a14      	ldr	r2, [pc, #80]	@ (8003bc4 <TIM_OC1_SetConfig+0xdc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d111      	bne.n	8003b9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	621a      	str	r2, [r3, #32]
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	40010400 	.word	0x40010400

08003bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f023 0210 	bic.w	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0320 	bic.w	r3, r3, #32
 8003c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a22      	ldr	r2, [pc, #136]	@ (8003cac <TIM_OC2_SetConfig+0xe4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC2_SetConfig+0x68>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a21      	ldr	r2, [pc, #132]	@ (8003cb0 <TIM_OC2_SetConfig+0xe8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10d      	bne.n	8003c4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <TIM_OC2_SetConfig+0xe4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_OC2_SetConfig+0x94>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a16      	ldr	r2, [pc, #88]	@ (8003cb0 <TIM_OC2_SetConfig+0xe8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d113      	bne.n	8003c84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0303 	bic.w	r3, r3, #3
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a21      	ldr	r2, [pc, #132]	@ (8003d94 <TIM_OC3_SetConfig+0xe0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_OC3_SetConfig+0x66>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a20      	ldr	r2, [pc, #128]	@ (8003d98 <TIM_OC3_SetConfig+0xe4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d10d      	bne.n	8003d36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a16      	ldr	r2, [pc, #88]	@ (8003d94 <TIM_OC3_SetConfig+0xe0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_OC3_SetConfig+0x92>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a15      	ldr	r2, [pc, #84]	@ (8003d98 <TIM_OC3_SetConfig+0xe4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d113      	bne.n	8003d6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	621a      	str	r2, [r3, #32]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	40010000 	.word	0x40010000
 8003d98:	40010400 	.word	0x40010400

08003d9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	031b      	lsls	r3, r3, #12
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a12      	ldr	r2, [pc, #72]	@ (8003e40 <TIM_OC4_SetConfig+0xa4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_OC4_SetConfig+0x68>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a11      	ldr	r2, [pc, #68]	@ (8003e44 <TIM_OC4_SetConfig+0xa8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d109      	bne.n	8003e18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40010400 	.word	0x40010400

08003e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f023 0201 	bic.w	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 030a 	bic.w	r3, r3, #10
 8003e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	621a      	str	r2, [r3, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b087      	sub	sp, #28
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f023 0210 	bic.w	r2, r3, #16
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	031b      	lsls	r3, r3, #12
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	621a      	str	r2, [r3, #32]
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f043 0307 	orr.w	r3, r3, #7
 8003f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	609a      	str	r2, [r3, #8]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	021a      	lsls	r2, r3, #8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	609a      	str	r2, [r3, #8]
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 031f 	and.w	r3, r3, #31
 8003f8e:	2201      	movs	r2, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e05a      	b.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a21      	ldr	r2, [pc, #132]	@ (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402c:	d01d      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1b      	ldr	r2, [pc, #108]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1a      	ldr	r2, [pc, #104]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a18      	ldr	r2, [pc, #96]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a15      	ldr	r2, [pc, #84]	@ (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10c      	bne.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	4313      	orrs	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	40000c00 	.word	0x40000c00
 80040b4:	40010400 	.word	0x40010400
 80040b8:	40014000 	.word	0x40014000
 80040bc:	40001800 	.word	0x40001800

080040c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040d8:	2302      	movs	r3, #2
 80040da:	e03d      	b.n	8004158 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e03f      	b.n	800421e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd fc9a 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	@ 0x24
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fcdf 	bl	8004b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	4613      	mov	r3, r2
 8004232:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b20      	cmp	r3, #32
 800423e:	d11d      	bne.n	800427c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_UART_Receive_IT+0x26>
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e016      	b.n	800427e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_UART_Receive_IT+0x38>
 800425a:	2302      	movs	r3, #2
 800425c:	e00f      	b.n	800427e <HAL_UART_Receive_IT+0x58>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	461a      	mov	r2, r3
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fab6 	bl	80047e4 <UART_Start_Receive_IT>
 8004278:	4603      	mov	r3, r0
 800427a:	e000      	b.n	800427e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b0ba      	sub	sp, #232	@ 0xe8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_UART_IRQHandler+0x66>
 80042da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fb99 	bl	8004a1e <UART_Receive_IT>
      return;
 80042ec:	e256      	b.n	800479c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80de 	beq.w	80044b4 <HAL_UART_IRQHandler+0x22c>
 80042f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004308:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80d1 	beq.w	80044b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_UART_IRQHandler+0xae>
 800431e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <HAL_UART_IRQHandler+0xd2>
 8004342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	f043 0202 	orr.w	r2, r3, #2
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_UART_IRQHandler+0xf6>
 8004366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f043 0204 	orr.w	r2, r3, #4
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d011      	beq.n	80043ae <HAL_UART_IRQHandler+0x126>
 800438a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d105      	bne.n	80043a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	f043 0208 	orr.w	r2, r3, #8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 81ed 	beq.w	8004792 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_UART_IRQHandler+0x14e>
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fb24 	bl	8004a1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <HAL_UART_IRQHandler+0x17a>
 80043fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d04f      	beq.n	80044a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa2c 	bl	8004860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004412:	2b40      	cmp	r3, #64	@ 0x40
 8004414:	d141      	bne.n	800449a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800442c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004442:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800444e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800445a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1d9      	bne.n	8004416 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004466:	2b00      	cmp	r3, #0
 8004468:	d013      	beq.n	8004492 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446e:	4a7d      	ldr	r2, [pc, #500]	@ (8004664 <HAL_UART_IRQHandler+0x3dc>)
 8004470:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd ff99 	bl	80023ae <HAL_DMA_Abort_IT>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800448c:	4610      	mov	r0, r2
 800448e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	e00e      	b.n	80044b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f990 	bl	80047b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	e00a      	b.n	80044b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f98c 	bl	80047b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	e006      	b.n	80044b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f988 	bl	80047b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80044ae:	e170      	b.n	8004792 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b0:	bf00      	nop
    return;
 80044b2:	e16e      	b.n	8004792 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	f040 814a 	bne.w	8004752 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8143 	beq.w	8004752 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 813c 	beq.w	8004752 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fa:	2b40      	cmp	r3, #64	@ 0x40
 80044fc:	f040 80b4 	bne.w	8004668 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800450c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8140 	beq.w	8004796 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800451a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800451e:	429a      	cmp	r2, r3
 8004520:	f080 8139 	bcs.w	8004796 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800452a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004536:	f000 8088 	beq.w	800464a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004550:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004566:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800456a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004572:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800457e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1d9      	bne.n	800453a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3314      	adds	r3, #20
 800458c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004596:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3314      	adds	r3, #20
 80045a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e1      	bne.n	8004586 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3314      	adds	r3, #20
 80045c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e3      	bne.n	80045c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461a:	f023 0310 	bic.w	r3, r3, #16
 800461e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800462c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800462e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004632:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800463a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e3      	bne.n	8004608 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	4618      	mov	r0, r3
 8004646:	f7fd fe42 	bl	80022ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004652:	b29b      	uxth	r3, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	b29b      	uxth	r3, r3
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8b6 	bl	80047cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004660:	e099      	b.n	8004796 <HAL_UART_IRQHandler+0x50e>
 8004662:	bf00      	nop
 8004664:	08004927 	.word	0x08004927
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004670:	b29b      	uxth	r3, r3
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 808b 	beq.w	800479a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8086 	beq.w	800479a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800469e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80046b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e3      	bne.n	800468e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	623b      	str	r3, [r7, #32]
   return(result);
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3314      	adds	r3, #20
 80046e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80046ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e3      	bne.n	80046c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	60fb      	str	r3, [r7, #12]
   return(result);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0310 	bic.w	r3, r3, #16
 8004722:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004730:	61fa      	str	r2, [r7, #28]
 8004732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	69b9      	ldr	r1, [r7, #24]
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	617b      	str	r3, [r7, #20]
   return(result);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e3      	bne.n	800470c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004748:	4619      	mov	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f83e 	bl	80047cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004750:	e023      	b.n	800479a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <HAL_UART_IRQHandler+0x4ea>
 800475e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8ef 	bl	800494e <UART_Transmit_IT>
    return;
 8004770:	e014      	b.n	800479c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <HAL_UART_IRQHandler+0x514>
 800477e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f92f 	bl	80049ee <UART_EndTransmit_IT>
    return;
 8004790:	e004      	b.n	800479c <HAL_UART_IRQHandler+0x514>
    return;
 8004792:	bf00      	nop
 8004794:	e002      	b.n	800479c <HAL_UART_IRQHandler+0x514>
      return;
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <HAL_UART_IRQHandler+0x514>
      return;
 800479a:	bf00      	nop
  }
}
 800479c:	37e8      	adds	r7, #232	@ 0xe8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop

080047a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2222      	movs	r2, #34	@ 0x22
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004830:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0220 	orr.w	r2, r2, #32
 8004850:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004860:	b480      	push	{r7}
 8004862:	b095      	sub	sp, #84	@ 0x54
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	330c      	adds	r3, #12
 800486e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800487e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004888:	643a      	str	r2, [r7, #64]	@ 0x40
 800488a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800488e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e5      	bne.n	8004868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3314      	adds	r3, #20
 80048a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e5      	bne.n	800489c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d119      	bne.n	800490c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f023 0310 	bic.w	r3, r3, #16
 80048ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048f8:	61ba      	str	r2, [r7, #24]
 80048fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6979      	ldr	r1, [r7, #20]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	613b      	str	r3, [r7, #16]
   return(result);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800491a:	bf00      	nop
 800491c:	3754      	adds	r7, #84	@ 0x54
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004932:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f7ff ff39 	bl	80047b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b21      	cmp	r3, #33	@ 0x21
 8004960:	d13e      	bne.n	80049e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496a:	d114      	bne.n	8004996 <UART_Transmit_IT+0x48>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d110      	bne.n	8004996 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004988:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	1c9a      	adds	r2, r3, #2
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	621a      	str	r2, [r3, #32]
 8004994:	e008      	b.n	80049a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	1c59      	adds	r1, r3, #1
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6211      	str	r1, [r2, #32]
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4619      	mov	r1, r3
 80049b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10f      	bne.n	80049dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fec8 	bl	80047a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b08c      	sub	sp, #48	@ 0x30
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b22      	cmp	r3, #34	@ 0x22
 8004a30:	f040 80ab 	bne.w	8004b8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3c:	d117      	bne.n	8004a6e <UART_Receive_IT+0x50>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d113      	bne.n	8004a6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	1c9a      	adds	r2, r3, #2
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a6c:	e026      	b.n	8004abc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a80:	d007      	beq.n	8004a92 <UART_Receive_IT+0x74>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <UART_Receive_IT+0x82>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	e008      	b.n	8004ab2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d15a      	bne.n	8004b86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0220 	bic.w	r2, r2, #32
 8004ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0201 	bic.w	r2, r2, #1
 8004afe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d135      	bne.n	8004b7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	613b      	str	r3, [r7, #16]
   return(result);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f023 0310 	bic.w	r3, r3, #16
 8004b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b36:	623a      	str	r2, [r7, #32]
 8004b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	69f9      	ldr	r1, [r7, #28]
 8004b3c:	6a3a      	ldr	r2, [r7, #32]
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d10a      	bne.n	8004b6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fe29 	bl	80047cc <HAL_UARTEx_RxEventCallback>
 8004b7a:	e002      	b.n	8004b82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fb ff03 	bl	8000988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e002      	b.n	8004b8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	e000      	b.n	8004b8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
  }
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3730      	adds	r7, #48	@ 0x30
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b98:	b0c0      	sub	sp, #256	@ 0x100
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	68d9      	ldr	r1, [r3, #12]
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	ea40 0301 	orr.w	r3, r0, r1
 8004bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bec:	f021 010c 	bic.w	r1, r1, #12
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0e:	6999      	ldr	r1, [r3, #24]
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	ea40 0301 	orr.w	r3, r0, r1
 8004c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b8f      	ldr	r3, [pc, #572]	@ (8004e60 <UART_SetConfig+0x2cc>)
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d005      	beq.n	8004c34 <UART_SetConfig+0xa0>
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8004e64 <UART_SetConfig+0x2d0>)
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d104      	bne.n	8004c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c34:	f7fe f9d8 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8004c38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c3c:	e003      	b.n	8004c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c3e:	f7fe f9bf 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 8004c42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c50:	f040 810c 	bne.w	8004e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c66:	4622      	mov	r2, r4
 8004c68:	462b      	mov	r3, r5
 8004c6a:	1891      	adds	r1, r2, r2
 8004c6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c6e:	415b      	adcs	r3, r3
 8004c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c76:	4621      	mov	r1, r4
 8004c78:	eb12 0801 	adds.w	r8, r2, r1
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	eb43 0901 	adc.w	r9, r3, r1
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c96:	4690      	mov	r8, r2
 8004c98:	4699      	mov	r9, r3
 8004c9a:	4623      	mov	r3, r4
 8004c9c:	eb18 0303 	adds.w	r3, r8, r3
 8004ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	eb49 0303 	adc.w	r3, r9, r3
 8004caa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	18db      	adds	r3, r3, r3
 8004cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cc8:	4613      	mov	r3, r2
 8004cca:	eb42 0303 	adc.w	r3, r2, r3
 8004cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cd8:	f7fb fad2 	bl	8000280 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4b61      	ldr	r3, [pc, #388]	@ (8004e68 <UART_SetConfig+0x2d4>)
 8004ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	011c      	lsls	r4, r3, #4
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d04:	415b      	adcs	r3, r3
 8004d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d12:	4649      	mov	r1, r9
 8004d14:	eb43 0b01 	adc.w	fp, r3, r1
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d2c:	4692      	mov	sl, r2
 8004d2e:	469b      	mov	fp, r3
 8004d30:	4643      	mov	r3, r8
 8004d32:	eb1a 0303 	adds.w	r3, sl, r3
 8004d36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	18db      	adds	r3, r3, r3
 8004d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d5e:	4613      	mov	r3, r2
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d6e:	f7fb fa87 	bl	8000280 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	4b3b      	ldr	r3, [pc, #236]	@ (8004e68 <UART_SetConfig+0x2d4>)
 8004d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2264      	movs	r2, #100	@ 0x64
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	1acb      	subs	r3, r1, r3
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d8e:	4b36      	ldr	r3, [pc, #216]	@ (8004e68 <UART_SetConfig+0x2d4>)
 8004d90:	fba3 2302 	umull	r2, r3, r3, r2
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d9c:	441c      	add	r4, r3
 8004d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004da8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004db0:	4642      	mov	r2, r8
 8004db2:	464b      	mov	r3, r9
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004db8:	415b      	adcs	r3, r3
 8004dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	1851      	adds	r1, r2, r1
 8004dc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	414b      	adcs	r3, r1
 8004dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004dd8:	4659      	mov	r1, fp
 8004dda:	00cb      	lsls	r3, r1, #3
 8004ddc:	4651      	mov	r1, sl
 8004dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de2:	4651      	mov	r1, sl
 8004de4:	00ca      	lsls	r2, r1, #3
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	4642      	mov	r2, r8
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004df4:	464b      	mov	r3, r9
 8004df6:	460a      	mov	r2, r1
 8004df8:	eb42 0303 	adc.w	r3, r2, r3
 8004dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e14:	460b      	mov	r3, r1
 8004e16:	18db      	adds	r3, r3, r3
 8004e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	eb42 0303 	adc.w	r3, r2, r3
 8004e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e2a:	f7fb fa29 	bl	8000280 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4b0d      	ldr	r3, [pc, #52]	@ (8004e68 <UART_SetConfig+0x2d4>)
 8004e34:	fba3 1302 	umull	r1, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	2164      	movs	r1, #100	@ 0x64
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	3332      	adds	r3, #50	@ 0x32
 8004e46:	4a08      	ldr	r2, [pc, #32]	@ (8004e68 <UART_SetConfig+0x2d4>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f003 0207 	and.w	r2, r3, #7
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4422      	add	r2, r4
 8004e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e5c:	e106      	b.n	800506c <UART_SetConfig+0x4d8>
 8004e5e:	bf00      	nop
 8004e60:	40011000 	.word	0x40011000
 8004e64:	40011400 	.word	0x40011400
 8004e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e7e:	4642      	mov	r2, r8
 8004e80:	464b      	mov	r3, r9
 8004e82:	1891      	adds	r1, r2, r2
 8004e84:	6239      	str	r1, [r7, #32]
 8004e86:	415b      	adcs	r3, r3
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e8e:	4641      	mov	r1, r8
 8004e90:	1854      	adds	r4, r2, r1
 8004e92:	4649      	mov	r1, r9
 8004e94:	eb43 0501 	adc.w	r5, r3, r1
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	00eb      	lsls	r3, r5, #3
 8004ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea6:	00e2      	lsls	r2, r4, #3
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	461d      	mov	r5, r3
 8004eac:	4643      	mov	r3, r8
 8004eae:	18e3      	adds	r3, r4, r3
 8004eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	eb45 0303 	adc.w	r3, r5, r3
 8004eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eda:	4629      	mov	r1, r5
 8004edc:	008b      	lsls	r3, r1, #2
 8004ede:	4621      	mov	r1, r4
 8004ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	008a      	lsls	r2, r1, #2
 8004ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004eec:	f7fb f9c8 	bl	8000280 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4b60      	ldr	r3, [pc, #384]	@ (8005078 <UART_SetConfig+0x4e4>)
 8004ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	011c      	lsls	r4, r3, #4
 8004efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	1891      	adds	r1, r2, r2
 8004f16:	61b9      	str	r1, [r7, #24]
 8004f18:	415b      	adcs	r3, r3
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f20:	4641      	mov	r1, r8
 8004f22:	1851      	adds	r1, r2, r1
 8004f24:	6139      	str	r1, [r7, #16]
 8004f26:	4649      	mov	r1, r9
 8004f28:	414b      	adcs	r3, r1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f38:	4659      	mov	r1, fp
 8004f3a:	00cb      	lsls	r3, r1, #3
 8004f3c:	4651      	mov	r1, sl
 8004f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f42:	4651      	mov	r1, sl
 8004f44:	00ca      	lsls	r2, r1, #3
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f54:	464b      	mov	r3, r9
 8004f56:	460a      	mov	r2, r1
 8004f58:	eb42 0303 	adc.w	r3, r2, r3
 8004f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f78:	4649      	mov	r1, r9
 8004f7a:	008b      	lsls	r3, r1, #2
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f82:	4641      	mov	r1, r8
 8004f84:	008a      	lsls	r2, r1, #2
 8004f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f8a:	f7fb f979 	bl	8000280 <__aeabi_uldivmod>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4611      	mov	r1, r2
 8004f94:	4b38      	ldr	r3, [pc, #224]	@ (8005078 <UART_SetConfig+0x4e4>)
 8004f96:	fba3 2301 	umull	r2, r3, r3, r1
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2264      	movs	r2, #100	@ 0x64
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	1acb      	subs	r3, r1, r3
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	3332      	adds	r3, #50	@ 0x32
 8004fa8:	4a33      	ldr	r2, [pc, #204]	@ (8005078 <UART_SetConfig+0x4e4>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fb4:	441c      	add	r4, r3
 8004fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fba:	2200      	movs	r2, #0
 8004fbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	1891      	adds	r1, r2, r2
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	415b      	adcs	r3, r3
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	1851      	adds	r1, r2, r1
 8004fd8:	6039      	str	r1, [r7, #0]
 8004fda:	4649      	mov	r1, r9
 8004fdc:	414b      	adcs	r3, r1
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fec:	4659      	mov	r1, fp
 8004fee:	00cb      	lsls	r3, r1, #3
 8004ff0:	4651      	mov	r1, sl
 8004ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	00ca      	lsls	r2, r1, #3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	4642      	mov	r2, r8
 8005002:	189b      	adds	r3, r3, r2
 8005004:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005006:	464b      	mov	r3, r9
 8005008:	460a      	mov	r2, r1
 800500a:	eb42 0303 	adc.w	r3, r2, r3
 800500e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	663b      	str	r3, [r7, #96]	@ 0x60
 800501a:	667a      	str	r2, [r7, #100]	@ 0x64
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005028:	4649      	mov	r1, r9
 800502a:	008b      	lsls	r3, r1, #2
 800502c:	4641      	mov	r1, r8
 800502e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005032:	4641      	mov	r1, r8
 8005034:	008a      	lsls	r2, r1, #2
 8005036:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800503a:	f7fb f921 	bl	8000280 <__aeabi_uldivmod>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4b0d      	ldr	r3, [pc, #52]	@ (8005078 <UART_SetConfig+0x4e4>)
 8005044:	fba3 1302 	umull	r1, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	2164      	movs	r1, #100	@ 0x64
 800504c:	fb01 f303 	mul.w	r3, r1, r3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	3332      	adds	r3, #50	@ 0x32
 8005056:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <UART_SetConfig+0x4e4>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	f003 020f 	and.w	r2, r3, #15
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4422      	add	r2, r4
 800506a:	609a      	str	r2, [r3, #8]
}
 800506c:	bf00      	nop
 800506e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005072:	46bd      	mov	sp, r7
 8005074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005078:	51eb851f 	.word	0x51eb851f

0800507c <std>:
 800507c:	2300      	movs	r3, #0
 800507e:	b510      	push	{r4, lr}
 8005080:	4604      	mov	r4, r0
 8005082:	e9c0 3300 	strd	r3, r3, [r0]
 8005086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800508a:	6083      	str	r3, [r0, #8]
 800508c:	8181      	strh	r1, [r0, #12]
 800508e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005090:	81c2      	strh	r2, [r0, #14]
 8005092:	6183      	str	r3, [r0, #24]
 8005094:	4619      	mov	r1, r3
 8005096:	2208      	movs	r2, #8
 8005098:	305c      	adds	r0, #92	@ 0x5c
 800509a:	f000 f920 	bl	80052de <memset>
 800509e:	4b0d      	ldr	r3, [pc, #52]	@ (80050d4 <std+0x58>)
 80050a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80050a2:	4b0d      	ldr	r3, [pc, #52]	@ (80050d8 <std+0x5c>)
 80050a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050a6:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <std+0x60>)
 80050a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050aa:	4b0d      	ldr	r3, [pc, #52]	@ (80050e0 <std+0x64>)
 80050ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80050ae:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <std+0x68>)
 80050b0:	6224      	str	r4, [r4, #32]
 80050b2:	429c      	cmp	r4, r3
 80050b4:	d006      	beq.n	80050c4 <std+0x48>
 80050b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050ba:	4294      	cmp	r4, r2
 80050bc:	d002      	beq.n	80050c4 <std+0x48>
 80050be:	33d0      	adds	r3, #208	@ 0xd0
 80050c0:	429c      	cmp	r4, r3
 80050c2:	d105      	bne.n	80050d0 <std+0x54>
 80050c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050cc:	f000 b9dc 	b.w	8005488 <__retarget_lock_init_recursive>
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	bf00      	nop
 80050d4:	08005255 	.word	0x08005255
 80050d8:	0800527b 	.word	0x0800527b
 80050dc:	080052b3 	.word	0x080052b3
 80050e0:	080052d7 	.word	0x080052d7
 80050e4:	20000098 	.word	0x20000098

080050e8 <stdio_exit_handler>:
 80050e8:	4a02      	ldr	r2, [pc, #8]	@ (80050f4 <stdio_exit_handler+0xc>)
 80050ea:	4903      	ldr	r1, [pc, #12]	@ (80050f8 <stdio_exit_handler+0x10>)
 80050ec:	4803      	ldr	r0, [pc, #12]	@ (80050fc <stdio_exit_handler+0x14>)
 80050ee:	f000 b869 	b.w	80051c4 <_fwalk_sglue>
 80050f2:	bf00      	nop
 80050f4:	20000010 	.word	0x20000010
 80050f8:	08005e09 	.word	0x08005e09
 80050fc:	20000020 	.word	0x20000020

08005100 <cleanup_stdio>:
 8005100:	6841      	ldr	r1, [r0, #4]
 8005102:	4b0c      	ldr	r3, [pc, #48]	@ (8005134 <cleanup_stdio+0x34>)
 8005104:	4299      	cmp	r1, r3
 8005106:	b510      	push	{r4, lr}
 8005108:	4604      	mov	r4, r0
 800510a:	d001      	beq.n	8005110 <cleanup_stdio+0x10>
 800510c:	f000 fe7c 	bl	8005e08 <_fflush_r>
 8005110:	68a1      	ldr	r1, [r4, #8]
 8005112:	4b09      	ldr	r3, [pc, #36]	@ (8005138 <cleanup_stdio+0x38>)
 8005114:	4299      	cmp	r1, r3
 8005116:	d002      	beq.n	800511e <cleanup_stdio+0x1e>
 8005118:	4620      	mov	r0, r4
 800511a:	f000 fe75 	bl	8005e08 <_fflush_r>
 800511e:	68e1      	ldr	r1, [r4, #12]
 8005120:	4b06      	ldr	r3, [pc, #24]	@ (800513c <cleanup_stdio+0x3c>)
 8005122:	4299      	cmp	r1, r3
 8005124:	d004      	beq.n	8005130 <cleanup_stdio+0x30>
 8005126:	4620      	mov	r0, r4
 8005128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512c:	f000 be6c 	b.w	8005e08 <_fflush_r>
 8005130:	bd10      	pop	{r4, pc}
 8005132:	bf00      	nop
 8005134:	20000098 	.word	0x20000098
 8005138:	20000100 	.word	0x20000100
 800513c:	20000168 	.word	0x20000168

08005140 <global_stdio_init.part.0>:
 8005140:	b510      	push	{r4, lr}
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <global_stdio_init.part.0+0x30>)
 8005144:	4c0b      	ldr	r4, [pc, #44]	@ (8005174 <global_stdio_init.part.0+0x34>)
 8005146:	4a0c      	ldr	r2, [pc, #48]	@ (8005178 <global_stdio_init.part.0+0x38>)
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	4620      	mov	r0, r4
 800514c:	2200      	movs	r2, #0
 800514e:	2104      	movs	r1, #4
 8005150:	f7ff ff94 	bl	800507c <std>
 8005154:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005158:	2201      	movs	r2, #1
 800515a:	2109      	movs	r1, #9
 800515c:	f7ff ff8e 	bl	800507c <std>
 8005160:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005164:	2202      	movs	r2, #2
 8005166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800516a:	2112      	movs	r1, #18
 800516c:	f7ff bf86 	b.w	800507c <std>
 8005170:	200001d0 	.word	0x200001d0
 8005174:	20000098 	.word	0x20000098
 8005178:	080050e9 	.word	0x080050e9

0800517c <__sfp_lock_acquire>:
 800517c:	4801      	ldr	r0, [pc, #4]	@ (8005184 <__sfp_lock_acquire+0x8>)
 800517e:	f000 b984 	b.w	800548a <__retarget_lock_acquire_recursive>
 8005182:	bf00      	nop
 8005184:	200001d9 	.word	0x200001d9

08005188 <__sfp_lock_release>:
 8005188:	4801      	ldr	r0, [pc, #4]	@ (8005190 <__sfp_lock_release+0x8>)
 800518a:	f000 b97f 	b.w	800548c <__retarget_lock_release_recursive>
 800518e:	bf00      	nop
 8005190:	200001d9 	.word	0x200001d9

08005194 <__sinit>:
 8005194:	b510      	push	{r4, lr}
 8005196:	4604      	mov	r4, r0
 8005198:	f7ff fff0 	bl	800517c <__sfp_lock_acquire>
 800519c:	6a23      	ldr	r3, [r4, #32]
 800519e:	b11b      	cbz	r3, 80051a8 <__sinit+0x14>
 80051a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a4:	f7ff bff0 	b.w	8005188 <__sfp_lock_release>
 80051a8:	4b04      	ldr	r3, [pc, #16]	@ (80051bc <__sinit+0x28>)
 80051aa:	6223      	str	r3, [r4, #32]
 80051ac:	4b04      	ldr	r3, [pc, #16]	@ (80051c0 <__sinit+0x2c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f5      	bne.n	80051a0 <__sinit+0xc>
 80051b4:	f7ff ffc4 	bl	8005140 <global_stdio_init.part.0>
 80051b8:	e7f2      	b.n	80051a0 <__sinit+0xc>
 80051ba:	bf00      	nop
 80051bc:	08005101 	.word	0x08005101
 80051c0:	200001d0 	.word	0x200001d0

080051c4 <_fwalk_sglue>:
 80051c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c8:	4607      	mov	r7, r0
 80051ca:	4688      	mov	r8, r1
 80051cc:	4614      	mov	r4, r2
 80051ce:	2600      	movs	r6, #0
 80051d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051d4:	f1b9 0901 	subs.w	r9, r9, #1
 80051d8:	d505      	bpl.n	80051e6 <_fwalk_sglue+0x22>
 80051da:	6824      	ldr	r4, [r4, #0]
 80051dc:	2c00      	cmp	r4, #0
 80051de:	d1f7      	bne.n	80051d0 <_fwalk_sglue+0xc>
 80051e0:	4630      	mov	r0, r6
 80051e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051e6:	89ab      	ldrh	r3, [r5, #12]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d907      	bls.n	80051fc <_fwalk_sglue+0x38>
 80051ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051f0:	3301      	adds	r3, #1
 80051f2:	d003      	beq.n	80051fc <_fwalk_sglue+0x38>
 80051f4:	4629      	mov	r1, r5
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c0      	blx	r8
 80051fa:	4306      	orrs	r6, r0
 80051fc:	3568      	adds	r5, #104	@ 0x68
 80051fe:	e7e9      	b.n	80051d4 <_fwalk_sglue+0x10>

08005200 <siscanf>:
 8005200:	b40e      	push	{r1, r2, r3}
 8005202:	b530      	push	{r4, r5, lr}
 8005204:	b09c      	sub	sp, #112	@ 0x70
 8005206:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005208:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800520c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005210:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005214:	9002      	str	r0, [sp, #8]
 8005216:	9006      	str	r0, [sp, #24]
 8005218:	f7fa ffda 	bl	80001d0 <strlen>
 800521c:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <siscanf+0x4c>)
 800521e:	9003      	str	r0, [sp, #12]
 8005220:	9007      	str	r0, [sp, #28]
 8005222:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005224:	480a      	ldr	r0, [pc, #40]	@ (8005250 <siscanf+0x50>)
 8005226:	9401      	str	r4, [sp, #4]
 8005228:	2300      	movs	r3, #0
 800522a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800522c:	9314      	str	r3, [sp, #80]	@ 0x50
 800522e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005232:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005236:	462a      	mov	r2, r5
 8005238:	4623      	mov	r3, r4
 800523a:	a902      	add	r1, sp, #8
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f000 fa9d 	bl	800577c <__ssvfiscanf_r>
 8005242:	b01c      	add	sp, #112	@ 0x70
 8005244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005248:	b003      	add	sp, #12
 800524a:	4770      	bx	lr
 800524c:	08005277 	.word	0x08005277
 8005250:	2000001c 	.word	0x2000001c

08005254 <__sread>:
 8005254:	b510      	push	{r4, lr}
 8005256:	460c      	mov	r4, r1
 8005258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525c:	f000 f8c6 	bl	80053ec <_read_r>
 8005260:	2800      	cmp	r0, #0
 8005262:	bfab      	itete	ge
 8005264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005266:	89a3      	ldrhlt	r3, [r4, #12]
 8005268:	181b      	addge	r3, r3, r0
 800526a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800526e:	bfac      	ite	ge
 8005270:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005272:	81a3      	strhlt	r3, [r4, #12]
 8005274:	bd10      	pop	{r4, pc}

08005276 <__seofread>:
 8005276:	2000      	movs	r0, #0
 8005278:	4770      	bx	lr

0800527a <__swrite>:
 800527a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800527e:	461f      	mov	r7, r3
 8005280:	898b      	ldrh	r3, [r1, #12]
 8005282:	05db      	lsls	r3, r3, #23
 8005284:	4605      	mov	r5, r0
 8005286:	460c      	mov	r4, r1
 8005288:	4616      	mov	r6, r2
 800528a:	d505      	bpl.n	8005298 <__swrite+0x1e>
 800528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005290:	2302      	movs	r3, #2
 8005292:	2200      	movs	r2, #0
 8005294:	f000 f898 	bl	80053c8 <_lseek_r>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800529e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	4632      	mov	r2, r6
 80052a6:	463b      	mov	r3, r7
 80052a8:	4628      	mov	r0, r5
 80052aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ae:	f000 b8af 	b.w	8005410 <_write_r>

080052b2 <__sseek>:
 80052b2:	b510      	push	{r4, lr}
 80052b4:	460c      	mov	r4, r1
 80052b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ba:	f000 f885 	bl	80053c8 <_lseek_r>
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	bf15      	itete	ne
 80052c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052ce:	81a3      	strheq	r3, [r4, #12]
 80052d0:	bf18      	it	ne
 80052d2:	81a3      	strhne	r3, [r4, #12]
 80052d4:	bd10      	pop	{r4, pc}

080052d6 <__sclose>:
 80052d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052da:	f000 b865 	b.w	80053a8 <_close_r>

080052de <memset>:
 80052de:	4402      	add	r2, r0
 80052e0:	4603      	mov	r3, r0
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d100      	bne.n	80052e8 <memset+0xa>
 80052e6:	4770      	bx	lr
 80052e8:	f803 1b01 	strb.w	r1, [r3], #1
 80052ec:	e7f9      	b.n	80052e2 <memset+0x4>
	...

080052f0 <strtok>:
 80052f0:	4b16      	ldr	r3, [pc, #88]	@ (800534c <strtok+0x5c>)
 80052f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f6:	681f      	ldr	r7, [r3, #0]
 80052f8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80052fa:	4605      	mov	r5, r0
 80052fc:	460e      	mov	r6, r1
 80052fe:	b9ec      	cbnz	r4, 800533c <strtok+0x4c>
 8005300:	2050      	movs	r0, #80	@ 0x50
 8005302:	f000 f92d 	bl	8005560 <malloc>
 8005306:	4602      	mov	r2, r0
 8005308:	6478      	str	r0, [r7, #68]	@ 0x44
 800530a:	b920      	cbnz	r0, 8005316 <strtok+0x26>
 800530c:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <strtok+0x60>)
 800530e:	4811      	ldr	r0, [pc, #68]	@ (8005354 <strtok+0x64>)
 8005310:	215b      	movs	r1, #91	@ 0x5b
 8005312:	f000 f8bd 	bl	8005490 <__assert_func>
 8005316:	e9c0 4400 	strd	r4, r4, [r0]
 800531a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800531e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005322:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005326:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800532a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800532e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005332:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005336:	6184      	str	r4, [r0, #24]
 8005338:	7704      	strb	r4, [r0, #28]
 800533a:	6244      	str	r4, [r0, #36]	@ 0x24
 800533c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	2301      	movs	r3, #1
 8005344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005348:	f000 b806 	b.w	8005358 <__strtok_r>
 800534c:	2000001c 	.word	0x2000001c
 8005350:	08006a8c 	.word	0x08006a8c
 8005354:	08006aa3 	.word	0x08006aa3

08005358 <__strtok_r>:
 8005358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535a:	4604      	mov	r4, r0
 800535c:	b908      	cbnz	r0, 8005362 <__strtok_r+0xa>
 800535e:	6814      	ldr	r4, [r2, #0]
 8005360:	b144      	cbz	r4, 8005374 <__strtok_r+0x1c>
 8005362:	4620      	mov	r0, r4
 8005364:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005368:	460f      	mov	r7, r1
 800536a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800536e:	b91e      	cbnz	r6, 8005378 <__strtok_r+0x20>
 8005370:	b965      	cbnz	r5, 800538c <__strtok_r+0x34>
 8005372:	6015      	str	r5, [r2, #0]
 8005374:	2000      	movs	r0, #0
 8005376:	e005      	b.n	8005384 <__strtok_r+0x2c>
 8005378:	42b5      	cmp	r5, r6
 800537a:	d1f6      	bne.n	800536a <__strtok_r+0x12>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f0      	bne.n	8005362 <__strtok_r+0xa>
 8005380:	6014      	str	r4, [r2, #0]
 8005382:	7003      	strb	r3, [r0, #0]
 8005384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005386:	461c      	mov	r4, r3
 8005388:	e00c      	b.n	80053a4 <__strtok_r+0x4c>
 800538a:	b915      	cbnz	r5, 8005392 <__strtok_r+0x3a>
 800538c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005390:	460e      	mov	r6, r1
 8005392:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005396:	42ab      	cmp	r3, r5
 8005398:	d1f7      	bne.n	800538a <__strtok_r+0x32>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f3      	beq.n	8005386 <__strtok_r+0x2e>
 800539e:	2300      	movs	r3, #0
 80053a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	e7ed      	b.n	8005384 <__strtok_r+0x2c>

080053a8 <_close_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4d06      	ldr	r5, [pc, #24]	@ (80053c4 <_close_r+0x1c>)
 80053ac:	2300      	movs	r3, #0
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	f7fc fd62 	bl	8001e7c <_close>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_close_r+0x1a>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_close_r+0x1a>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	200001d4 	.word	0x200001d4

080053c8 <_lseek_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4d07      	ldr	r5, [pc, #28]	@ (80053e8 <_lseek_r+0x20>)
 80053cc:	4604      	mov	r4, r0
 80053ce:	4608      	mov	r0, r1
 80053d0:	4611      	mov	r1, r2
 80053d2:	2200      	movs	r2, #0
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f7fc fd77 	bl	8001eca <_lseek>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_lseek_r+0x1e>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_lseek_r+0x1e>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	200001d4 	.word	0x200001d4

080053ec <_read_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	@ (800540c <_read_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fc fd05 	bl	8001e0a <_read>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_read_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_read_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	200001d4 	.word	0x200001d4

08005410 <_write_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4d07      	ldr	r5, [pc, #28]	@ (8005430 <_write_r+0x20>)
 8005414:	4604      	mov	r4, r0
 8005416:	4608      	mov	r0, r1
 8005418:	4611      	mov	r1, r2
 800541a:	2200      	movs	r2, #0
 800541c:	602a      	str	r2, [r5, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	f7fc fd10 	bl	8001e44 <_write>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_write_r+0x1e>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_write_r+0x1e>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	200001d4 	.word	0x200001d4

08005434 <__errno>:
 8005434:	4b01      	ldr	r3, [pc, #4]	@ (800543c <__errno+0x8>)
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	2000001c 	.word	0x2000001c

08005440 <__libc_init_array>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4d0d      	ldr	r5, [pc, #52]	@ (8005478 <__libc_init_array+0x38>)
 8005444:	4c0d      	ldr	r4, [pc, #52]	@ (800547c <__libc_init_array+0x3c>)
 8005446:	1b64      	subs	r4, r4, r5
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	2600      	movs	r6, #0
 800544c:	42a6      	cmp	r6, r4
 800544e:	d109      	bne.n	8005464 <__libc_init_array+0x24>
 8005450:	4d0b      	ldr	r5, [pc, #44]	@ (8005480 <__libc_init_array+0x40>)
 8005452:	4c0c      	ldr	r4, [pc, #48]	@ (8005484 <__libc_init_array+0x44>)
 8005454:	f001 fafa 	bl	8006a4c <_init>
 8005458:	1b64      	subs	r4, r4, r5
 800545a:	10a4      	asrs	r4, r4, #2
 800545c:	2600      	movs	r6, #0
 800545e:	42a6      	cmp	r6, r4
 8005460:	d105      	bne.n	800546e <__libc_init_array+0x2e>
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	f855 3b04 	ldr.w	r3, [r5], #4
 8005468:	4798      	blx	r3
 800546a:	3601      	adds	r6, #1
 800546c:	e7ee      	b.n	800544c <__libc_init_array+0xc>
 800546e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005472:	4798      	blx	r3
 8005474:	3601      	adds	r6, #1
 8005476:	e7f2      	b.n	800545e <__libc_init_array+0x1e>
 8005478:	08006c90 	.word	0x08006c90
 800547c:	08006c90 	.word	0x08006c90
 8005480:	08006c90 	.word	0x08006c90
 8005484:	08006c94 	.word	0x08006c94

08005488 <__retarget_lock_init_recursive>:
 8005488:	4770      	bx	lr

0800548a <__retarget_lock_acquire_recursive>:
 800548a:	4770      	bx	lr

0800548c <__retarget_lock_release_recursive>:
 800548c:	4770      	bx	lr
	...

08005490 <__assert_func>:
 8005490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005492:	4614      	mov	r4, r2
 8005494:	461a      	mov	r2, r3
 8005496:	4b09      	ldr	r3, [pc, #36]	@ (80054bc <__assert_func+0x2c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4605      	mov	r5, r0
 800549c:	68d8      	ldr	r0, [r3, #12]
 800549e:	b954      	cbnz	r4, 80054b6 <__assert_func+0x26>
 80054a0:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <__assert_func+0x30>)
 80054a2:	461c      	mov	r4, r3
 80054a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054a8:	9100      	str	r1, [sp, #0]
 80054aa:	462b      	mov	r3, r5
 80054ac:	4905      	ldr	r1, [pc, #20]	@ (80054c4 <__assert_func+0x34>)
 80054ae:	f000 fcd3 	bl	8005e58 <fiprintf>
 80054b2:	f000 fd75 	bl	8005fa0 <abort>
 80054b6:	4b04      	ldr	r3, [pc, #16]	@ (80054c8 <__assert_func+0x38>)
 80054b8:	e7f4      	b.n	80054a4 <__assert_func+0x14>
 80054ba:	bf00      	nop
 80054bc:	2000001c 	.word	0x2000001c
 80054c0:	08006b38 	.word	0x08006b38
 80054c4:	08006b0a 	.word	0x08006b0a
 80054c8:	08006afd 	.word	0x08006afd

080054cc <_free_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4605      	mov	r5, r0
 80054d0:	2900      	cmp	r1, #0
 80054d2:	d041      	beq.n	8005558 <_free_r+0x8c>
 80054d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d8:	1f0c      	subs	r4, r1, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfb8      	it	lt
 80054de:	18e4      	addlt	r4, r4, r3
 80054e0:	f000 f8e8 	bl	80056b4 <__malloc_lock>
 80054e4:	4a1d      	ldr	r2, [pc, #116]	@ (800555c <_free_r+0x90>)
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	b933      	cbnz	r3, 80054f8 <_free_r+0x2c>
 80054ea:	6063      	str	r3, [r4, #4]
 80054ec:	6014      	str	r4, [r2, #0]
 80054ee:	4628      	mov	r0, r5
 80054f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054f4:	f000 b8e4 	b.w	80056c0 <__malloc_unlock>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d908      	bls.n	800550e <_free_r+0x42>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	1821      	adds	r1, r4, r0
 8005500:	428b      	cmp	r3, r1
 8005502:	bf01      	itttt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	e7ed      	b.n	80054ea <_free_r+0x1e>
 800550e:	461a      	mov	r2, r3
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b10b      	cbz	r3, 8005518 <_free_r+0x4c>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d9fa      	bls.n	800550e <_free_r+0x42>
 8005518:	6811      	ldr	r1, [r2, #0]
 800551a:	1850      	adds	r0, r2, r1
 800551c:	42a0      	cmp	r0, r4
 800551e:	d10b      	bne.n	8005538 <_free_r+0x6c>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	4401      	add	r1, r0
 8005524:	1850      	adds	r0, r2, r1
 8005526:	4283      	cmp	r3, r0
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	d1e0      	bne.n	80054ee <_free_r+0x22>
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	6053      	str	r3, [r2, #4]
 8005532:	4408      	add	r0, r1
 8005534:	6010      	str	r0, [r2, #0]
 8005536:	e7da      	b.n	80054ee <_free_r+0x22>
 8005538:	d902      	bls.n	8005540 <_free_r+0x74>
 800553a:	230c      	movs	r3, #12
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	e7d6      	b.n	80054ee <_free_r+0x22>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	1821      	adds	r1, r4, r0
 8005544:	428b      	cmp	r3, r1
 8005546:	bf04      	itt	eq
 8005548:	6819      	ldreq	r1, [r3, #0]
 800554a:	685b      	ldreq	r3, [r3, #4]
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	bf04      	itt	eq
 8005550:	1809      	addeq	r1, r1, r0
 8005552:	6021      	streq	r1, [r4, #0]
 8005554:	6054      	str	r4, [r2, #4]
 8005556:	e7ca      	b.n	80054ee <_free_r+0x22>
 8005558:	bd38      	pop	{r3, r4, r5, pc}
 800555a:	bf00      	nop
 800555c:	200001e0 	.word	0x200001e0

08005560 <malloc>:
 8005560:	4b02      	ldr	r3, [pc, #8]	@ (800556c <malloc+0xc>)
 8005562:	4601      	mov	r1, r0
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	f000 b825 	b.w	80055b4 <_malloc_r>
 800556a:	bf00      	nop
 800556c:	2000001c 	.word	0x2000001c

08005570 <sbrk_aligned>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4e0f      	ldr	r6, [pc, #60]	@ (80055b0 <sbrk_aligned+0x40>)
 8005574:	460c      	mov	r4, r1
 8005576:	6831      	ldr	r1, [r6, #0]
 8005578:	4605      	mov	r5, r0
 800557a:	b911      	cbnz	r1, 8005582 <sbrk_aligned+0x12>
 800557c:	f000 fcf2 	bl	8005f64 <_sbrk_r>
 8005580:	6030      	str	r0, [r6, #0]
 8005582:	4621      	mov	r1, r4
 8005584:	4628      	mov	r0, r5
 8005586:	f000 fced 	bl	8005f64 <_sbrk_r>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	d103      	bne.n	8005596 <sbrk_aligned+0x26>
 800558e:	f04f 34ff 	mov.w	r4, #4294967295
 8005592:	4620      	mov	r0, r4
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	1cc4      	adds	r4, r0, #3
 8005598:	f024 0403 	bic.w	r4, r4, #3
 800559c:	42a0      	cmp	r0, r4
 800559e:	d0f8      	beq.n	8005592 <sbrk_aligned+0x22>
 80055a0:	1a21      	subs	r1, r4, r0
 80055a2:	4628      	mov	r0, r5
 80055a4:	f000 fcde 	bl	8005f64 <_sbrk_r>
 80055a8:	3001      	adds	r0, #1
 80055aa:	d1f2      	bne.n	8005592 <sbrk_aligned+0x22>
 80055ac:	e7ef      	b.n	800558e <sbrk_aligned+0x1e>
 80055ae:	bf00      	nop
 80055b0:	200001dc 	.word	0x200001dc

080055b4 <_malloc_r>:
 80055b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b8:	1ccd      	adds	r5, r1, #3
 80055ba:	f025 0503 	bic.w	r5, r5, #3
 80055be:	3508      	adds	r5, #8
 80055c0:	2d0c      	cmp	r5, #12
 80055c2:	bf38      	it	cc
 80055c4:	250c      	movcc	r5, #12
 80055c6:	2d00      	cmp	r5, #0
 80055c8:	4606      	mov	r6, r0
 80055ca:	db01      	blt.n	80055d0 <_malloc_r+0x1c>
 80055cc:	42a9      	cmp	r1, r5
 80055ce:	d904      	bls.n	80055da <_malloc_r+0x26>
 80055d0:	230c      	movs	r3, #12
 80055d2:	6033      	str	r3, [r6, #0]
 80055d4:	2000      	movs	r0, #0
 80055d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056b0 <_malloc_r+0xfc>
 80055de:	f000 f869 	bl	80056b4 <__malloc_lock>
 80055e2:	f8d8 3000 	ldr.w	r3, [r8]
 80055e6:	461c      	mov	r4, r3
 80055e8:	bb44      	cbnz	r4, 800563c <_malloc_r+0x88>
 80055ea:	4629      	mov	r1, r5
 80055ec:	4630      	mov	r0, r6
 80055ee:	f7ff ffbf 	bl	8005570 <sbrk_aligned>
 80055f2:	1c43      	adds	r3, r0, #1
 80055f4:	4604      	mov	r4, r0
 80055f6:	d158      	bne.n	80056aa <_malloc_r+0xf6>
 80055f8:	f8d8 4000 	ldr.w	r4, [r8]
 80055fc:	4627      	mov	r7, r4
 80055fe:	2f00      	cmp	r7, #0
 8005600:	d143      	bne.n	800568a <_malloc_r+0xd6>
 8005602:	2c00      	cmp	r4, #0
 8005604:	d04b      	beq.n	800569e <_malloc_r+0xea>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	4639      	mov	r1, r7
 800560a:	4630      	mov	r0, r6
 800560c:	eb04 0903 	add.w	r9, r4, r3
 8005610:	f000 fca8 	bl	8005f64 <_sbrk_r>
 8005614:	4581      	cmp	r9, r0
 8005616:	d142      	bne.n	800569e <_malloc_r+0xea>
 8005618:	6821      	ldr	r1, [r4, #0]
 800561a:	1a6d      	subs	r5, r5, r1
 800561c:	4629      	mov	r1, r5
 800561e:	4630      	mov	r0, r6
 8005620:	f7ff ffa6 	bl	8005570 <sbrk_aligned>
 8005624:	3001      	adds	r0, #1
 8005626:	d03a      	beq.n	800569e <_malloc_r+0xea>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	442b      	add	r3, r5
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	f8d8 3000 	ldr.w	r3, [r8]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	bb62      	cbnz	r2, 8005690 <_malloc_r+0xdc>
 8005636:	f8c8 7000 	str.w	r7, [r8]
 800563a:	e00f      	b.n	800565c <_malloc_r+0xa8>
 800563c:	6822      	ldr	r2, [r4, #0]
 800563e:	1b52      	subs	r2, r2, r5
 8005640:	d420      	bmi.n	8005684 <_malloc_r+0xd0>
 8005642:	2a0b      	cmp	r2, #11
 8005644:	d917      	bls.n	8005676 <_malloc_r+0xc2>
 8005646:	1961      	adds	r1, r4, r5
 8005648:	42a3      	cmp	r3, r4
 800564a:	6025      	str	r5, [r4, #0]
 800564c:	bf18      	it	ne
 800564e:	6059      	strne	r1, [r3, #4]
 8005650:	6863      	ldr	r3, [r4, #4]
 8005652:	bf08      	it	eq
 8005654:	f8c8 1000 	streq.w	r1, [r8]
 8005658:	5162      	str	r2, [r4, r5]
 800565a:	604b      	str	r3, [r1, #4]
 800565c:	4630      	mov	r0, r6
 800565e:	f000 f82f 	bl	80056c0 <__malloc_unlock>
 8005662:	f104 000b 	add.w	r0, r4, #11
 8005666:	1d23      	adds	r3, r4, #4
 8005668:	f020 0007 	bic.w	r0, r0, #7
 800566c:	1ac2      	subs	r2, r0, r3
 800566e:	bf1c      	itt	ne
 8005670:	1a1b      	subne	r3, r3, r0
 8005672:	50a3      	strne	r3, [r4, r2]
 8005674:	e7af      	b.n	80055d6 <_malloc_r+0x22>
 8005676:	6862      	ldr	r2, [r4, #4]
 8005678:	42a3      	cmp	r3, r4
 800567a:	bf0c      	ite	eq
 800567c:	f8c8 2000 	streq.w	r2, [r8]
 8005680:	605a      	strne	r2, [r3, #4]
 8005682:	e7eb      	b.n	800565c <_malloc_r+0xa8>
 8005684:	4623      	mov	r3, r4
 8005686:	6864      	ldr	r4, [r4, #4]
 8005688:	e7ae      	b.n	80055e8 <_malloc_r+0x34>
 800568a:	463c      	mov	r4, r7
 800568c:	687f      	ldr	r7, [r7, #4]
 800568e:	e7b6      	b.n	80055fe <_malloc_r+0x4a>
 8005690:	461a      	mov	r2, r3
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	42a3      	cmp	r3, r4
 8005696:	d1fb      	bne.n	8005690 <_malloc_r+0xdc>
 8005698:	2300      	movs	r3, #0
 800569a:	6053      	str	r3, [r2, #4]
 800569c:	e7de      	b.n	800565c <_malloc_r+0xa8>
 800569e:	230c      	movs	r3, #12
 80056a0:	6033      	str	r3, [r6, #0]
 80056a2:	4630      	mov	r0, r6
 80056a4:	f000 f80c 	bl	80056c0 <__malloc_unlock>
 80056a8:	e794      	b.n	80055d4 <_malloc_r+0x20>
 80056aa:	6005      	str	r5, [r0, #0]
 80056ac:	e7d6      	b.n	800565c <_malloc_r+0xa8>
 80056ae:	bf00      	nop
 80056b0:	200001e0 	.word	0x200001e0

080056b4 <__malloc_lock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	@ (80056bc <__malloc_lock+0x8>)
 80056b6:	f7ff bee8 	b.w	800548a <__retarget_lock_acquire_recursive>
 80056ba:	bf00      	nop
 80056bc:	200001d8 	.word	0x200001d8

080056c0 <__malloc_unlock>:
 80056c0:	4801      	ldr	r0, [pc, #4]	@ (80056c8 <__malloc_unlock+0x8>)
 80056c2:	f7ff bee3 	b.w	800548c <__retarget_lock_release_recursive>
 80056c6:	bf00      	nop
 80056c8:	200001d8 	.word	0x200001d8

080056cc <_sungetc_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	1c4b      	adds	r3, r1, #1
 80056d0:	4614      	mov	r4, r2
 80056d2:	d103      	bne.n	80056dc <_sungetc_r+0x10>
 80056d4:	f04f 35ff 	mov.w	r5, #4294967295
 80056d8:	4628      	mov	r0, r5
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	8993      	ldrh	r3, [r2, #12]
 80056de:	f023 0320 	bic.w	r3, r3, #32
 80056e2:	8193      	strh	r3, [r2, #12]
 80056e4:	6853      	ldr	r3, [r2, #4]
 80056e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056e8:	b2cd      	uxtb	r5, r1
 80056ea:	b18a      	cbz	r2, 8005710 <_sungetc_r+0x44>
 80056ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80056ee:	429a      	cmp	r2, r3
 80056f0:	dd08      	ble.n	8005704 <_sungetc_r+0x38>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	1e5a      	subs	r2, r3, #1
 80056f6:	6022      	str	r2, [r4, #0]
 80056f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80056fc:	6863      	ldr	r3, [r4, #4]
 80056fe:	3301      	adds	r3, #1
 8005700:	6063      	str	r3, [r4, #4]
 8005702:	e7e9      	b.n	80056d8 <_sungetc_r+0xc>
 8005704:	4621      	mov	r1, r4
 8005706:	f000 fbf2 	bl	8005eee <__submore>
 800570a:	2800      	cmp	r0, #0
 800570c:	d0f1      	beq.n	80056f2 <_sungetc_r+0x26>
 800570e:	e7e1      	b.n	80056d4 <_sungetc_r+0x8>
 8005710:	6921      	ldr	r1, [r4, #16]
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	b141      	cbz	r1, 8005728 <_sungetc_r+0x5c>
 8005716:	4291      	cmp	r1, r2
 8005718:	d206      	bcs.n	8005728 <_sungetc_r+0x5c>
 800571a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800571e:	42a9      	cmp	r1, r5
 8005720:	d102      	bne.n	8005728 <_sungetc_r+0x5c>
 8005722:	3a01      	subs	r2, #1
 8005724:	6022      	str	r2, [r4, #0]
 8005726:	e7ea      	b.n	80056fe <_sungetc_r+0x32>
 8005728:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800572c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005730:	6363      	str	r3, [r4, #52]	@ 0x34
 8005732:	2303      	movs	r3, #3
 8005734:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005736:	4623      	mov	r3, r4
 8005738:	f803 5f46 	strb.w	r5, [r3, #70]!
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	2301      	movs	r3, #1
 8005740:	e7de      	b.n	8005700 <_sungetc_r+0x34>

08005742 <__ssrefill_r>:
 8005742:	b510      	push	{r4, lr}
 8005744:	460c      	mov	r4, r1
 8005746:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005748:	b169      	cbz	r1, 8005766 <__ssrefill_r+0x24>
 800574a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800574e:	4299      	cmp	r1, r3
 8005750:	d001      	beq.n	8005756 <__ssrefill_r+0x14>
 8005752:	f7ff febb 	bl	80054cc <_free_r>
 8005756:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005758:	6063      	str	r3, [r4, #4]
 800575a:	2000      	movs	r0, #0
 800575c:	6360      	str	r0, [r4, #52]	@ 0x34
 800575e:	b113      	cbz	r3, 8005766 <__ssrefill_r+0x24>
 8005760:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	bd10      	pop	{r4, pc}
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	6063      	str	r3, [r4, #4]
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f043 0320 	orr.w	r3, r3, #32
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	f04f 30ff 	mov.w	r0, #4294967295
 800577a:	e7f3      	b.n	8005764 <__ssrefill_r+0x22>

0800577c <__ssvfiscanf_r>:
 800577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	460c      	mov	r4, r1
 8005782:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005786:	2100      	movs	r1, #0
 8005788:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800578c:	49a5      	ldr	r1, [pc, #660]	@ (8005a24 <__ssvfiscanf_r+0x2a8>)
 800578e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005790:	f10d 0804 	add.w	r8, sp, #4
 8005794:	49a4      	ldr	r1, [pc, #656]	@ (8005a28 <__ssvfiscanf_r+0x2ac>)
 8005796:	4fa5      	ldr	r7, [pc, #660]	@ (8005a2c <__ssvfiscanf_r+0x2b0>)
 8005798:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800579c:	4606      	mov	r6, r0
 800579e:	91a1      	str	r1, [sp, #644]	@ 0x284
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	7813      	ldrb	r3, [r2, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8158 	beq.w	8005a5a <__ssvfiscanf_r+0x2de>
 80057aa:	5cf9      	ldrb	r1, [r7, r3]
 80057ac:	f011 0108 	ands.w	r1, r1, #8
 80057b0:	f102 0501 	add.w	r5, r2, #1
 80057b4:	d019      	beq.n	80057ea <__ssvfiscanf_r+0x6e>
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	dd0f      	ble.n	80057dc <__ssvfiscanf_r+0x60>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	5cba      	ldrb	r2, [r7, r2]
 80057c2:	0712      	lsls	r2, r2, #28
 80057c4:	d401      	bmi.n	80057ca <__ssvfiscanf_r+0x4e>
 80057c6:	462a      	mov	r2, r5
 80057c8:	e7eb      	b.n	80057a2 <__ssvfiscanf_r+0x26>
 80057ca:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80057cc:	3201      	adds	r2, #1
 80057ce:	9245      	str	r2, [sp, #276]	@ 0x114
 80057d0:	6862      	ldr	r2, [r4, #4]
 80057d2:	3301      	adds	r3, #1
 80057d4:	3a01      	subs	r2, #1
 80057d6:	6062      	str	r2, [r4, #4]
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	e7ec      	b.n	80057b6 <__ssvfiscanf_r+0x3a>
 80057dc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80057de:	4621      	mov	r1, r4
 80057e0:	4630      	mov	r0, r6
 80057e2:	4798      	blx	r3
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d0e9      	beq.n	80057bc <__ssvfiscanf_r+0x40>
 80057e8:	e7ed      	b.n	80057c6 <__ssvfiscanf_r+0x4a>
 80057ea:	2b25      	cmp	r3, #37	@ 0x25
 80057ec:	d012      	beq.n	8005814 <__ssvfiscanf_r+0x98>
 80057ee:	4699      	mov	r9, r3
 80057f0:	6863      	ldr	r3, [r4, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f340 8093 	ble.w	800591e <__ssvfiscanf_r+0x1a2>
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	7813      	ldrb	r3, [r2, #0]
 80057fc:	454b      	cmp	r3, r9
 80057fe:	f040 812c 	bne.w	8005a5a <__ssvfiscanf_r+0x2de>
 8005802:	6863      	ldr	r3, [r4, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800580a:	3201      	adds	r2, #1
 800580c:	3301      	adds	r3, #1
 800580e:	6022      	str	r2, [r4, #0]
 8005810:	9345      	str	r3, [sp, #276]	@ 0x114
 8005812:	e7d8      	b.n	80057c6 <__ssvfiscanf_r+0x4a>
 8005814:	9141      	str	r1, [sp, #260]	@ 0x104
 8005816:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005818:	7853      	ldrb	r3, [r2, #1]
 800581a:	2b2a      	cmp	r3, #42	@ 0x2a
 800581c:	bf02      	ittt	eq
 800581e:	2310      	moveq	r3, #16
 8005820:	1c95      	addeq	r5, r2, #2
 8005822:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005824:	220a      	movs	r2, #10
 8005826:	46a9      	mov	r9, r5
 8005828:	f819 1b01 	ldrb.w	r1, [r9], #1
 800582c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005830:	2b09      	cmp	r3, #9
 8005832:	d91e      	bls.n	8005872 <__ssvfiscanf_r+0xf6>
 8005834:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005a30 <__ssvfiscanf_r+0x2b4>
 8005838:	2203      	movs	r2, #3
 800583a:	4650      	mov	r0, sl
 800583c:	f7fa fcd0 	bl	80001e0 <memchr>
 8005840:	b138      	cbz	r0, 8005852 <__ssvfiscanf_r+0xd6>
 8005842:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005844:	eba0 000a 	sub.w	r0, r0, sl
 8005848:	2301      	movs	r3, #1
 800584a:	4083      	lsls	r3, r0
 800584c:	4313      	orrs	r3, r2
 800584e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005850:	464d      	mov	r5, r9
 8005852:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005856:	2b78      	cmp	r3, #120	@ 0x78
 8005858:	d806      	bhi.n	8005868 <__ssvfiscanf_r+0xec>
 800585a:	2b57      	cmp	r3, #87	@ 0x57
 800585c:	d810      	bhi.n	8005880 <__ssvfiscanf_r+0x104>
 800585e:	2b25      	cmp	r3, #37	@ 0x25
 8005860:	d0c5      	beq.n	80057ee <__ssvfiscanf_r+0x72>
 8005862:	d857      	bhi.n	8005914 <__ssvfiscanf_r+0x198>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d065      	beq.n	8005934 <__ssvfiscanf_r+0x1b8>
 8005868:	2303      	movs	r3, #3
 800586a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800586c:	230a      	movs	r3, #10
 800586e:	9342      	str	r3, [sp, #264]	@ 0x108
 8005870:	e078      	b.n	8005964 <__ssvfiscanf_r+0x1e8>
 8005872:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005874:	fb02 1103 	mla	r1, r2, r3, r1
 8005878:	3930      	subs	r1, #48	@ 0x30
 800587a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800587c:	464d      	mov	r5, r9
 800587e:	e7d2      	b.n	8005826 <__ssvfiscanf_r+0xaa>
 8005880:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005884:	2a20      	cmp	r2, #32
 8005886:	d8ef      	bhi.n	8005868 <__ssvfiscanf_r+0xec>
 8005888:	a101      	add	r1, pc, #4	@ (adr r1, 8005890 <__ssvfiscanf_r+0x114>)
 800588a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800588e:	bf00      	nop
 8005890:	08005943 	.word	0x08005943
 8005894:	08005869 	.word	0x08005869
 8005898:	08005869 	.word	0x08005869
 800589c:	0800599d 	.word	0x0800599d
 80058a0:	08005869 	.word	0x08005869
 80058a4:	08005869 	.word	0x08005869
 80058a8:	08005869 	.word	0x08005869
 80058ac:	08005869 	.word	0x08005869
 80058b0:	08005869 	.word	0x08005869
 80058b4:	08005869 	.word	0x08005869
 80058b8:	08005869 	.word	0x08005869
 80058bc:	080059b3 	.word	0x080059b3
 80058c0:	08005999 	.word	0x08005999
 80058c4:	0800591b 	.word	0x0800591b
 80058c8:	0800591b 	.word	0x0800591b
 80058cc:	0800591b 	.word	0x0800591b
 80058d0:	08005869 	.word	0x08005869
 80058d4:	08005955 	.word	0x08005955
 80058d8:	08005869 	.word	0x08005869
 80058dc:	08005869 	.word	0x08005869
 80058e0:	08005869 	.word	0x08005869
 80058e4:	08005869 	.word	0x08005869
 80058e8:	080059c3 	.word	0x080059c3
 80058ec:	0800595d 	.word	0x0800595d
 80058f0:	0800593b 	.word	0x0800593b
 80058f4:	08005869 	.word	0x08005869
 80058f8:	08005869 	.word	0x08005869
 80058fc:	080059bf 	.word	0x080059bf
 8005900:	08005869 	.word	0x08005869
 8005904:	08005999 	.word	0x08005999
 8005908:	08005869 	.word	0x08005869
 800590c:	08005869 	.word	0x08005869
 8005910:	08005943 	.word	0x08005943
 8005914:	3b45      	subs	r3, #69	@ 0x45
 8005916:	2b02      	cmp	r3, #2
 8005918:	d8a6      	bhi.n	8005868 <__ssvfiscanf_r+0xec>
 800591a:	2305      	movs	r3, #5
 800591c:	e021      	b.n	8005962 <__ssvfiscanf_r+0x1e6>
 800591e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005920:	4621      	mov	r1, r4
 8005922:	4630      	mov	r0, r6
 8005924:	4798      	blx	r3
 8005926:	2800      	cmp	r0, #0
 8005928:	f43f af66 	beq.w	80057f8 <__ssvfiscanf_r+0x7c>
 800592c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800592e:	2800      	cmp	r0, #0
 8005930:	f040 808b 	bne.w	8005a4a <__ssvfiscanf_r+0x2ce>
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	e08b      	b.n	8005a52 <__ssvfiscanf_r+0x2d6>
 800593a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800593c:	f042 0220 	orr.w	r2, r2, #32
 8005940:	9241      	str	r2, [sp, #260]	@ 0x104
 8005942:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005948:	9241      	str	r2, [sp, #260]	@ 0x104
 800594a:	2210      	movs	r2, #16
 800594c:	2b6e      	cmp	r3, #110	@ 0x6e
 800594e:	9242      	str	r2, [sp, #264]	@ 0x108
 8005950:	d902      	bls.n	8005958 <__ssvfiscanf_r+0x1dc>
 8005952:	e005      	b.n	8005960 <__ssvfiscanf_r+0x1e4>
 8005954:	2300      	movs	r3, #0
 8005956:	9342      	str	r3, [sp, #264]	@ 0x108
 8005958:	2303      	movs	r3, #3
 800595a:	e002      	b.n	8005962 <__ssvfiscanf_r+0x1e6>
 800595c:	2308      	movs	r3, #8
 800595e:	9342      	str	r3, [sp, #264]	@ 0x108
 8005960:	2304      	movs	r3, #4
 8005962:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005964:	6863      	ldr	r3, [r4, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	dd39      	ble.n	80059de <__ssvfiscanf_r+0x262>
 800596a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800596c:	0659      	lsls	r1, r3, #25
 800596e:	d404      	bmi.n	800597a <__ssvfiscanf_r+0x1fe>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	781a      	ldrb	r2, [r3, #0]
 8005974:	5cba      	ldrb	r2, [r7, r2]
 8005976:	0712      	lsls	r2, r2, #28
 8005978:	d438      	bmi.n	80059ec <__ssvfiscanf_r+0x270>
 800597a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800597c:	2b02      	cmp	r3, #2
 800597e:	dc47      	bgt.n	8005a10 <__ssvfiscanf_r+0x294>
 8005980:	466b      	mov	r3, sp
 8005982:	4622      	mov	r2, r4
 8005984:	a941      	add	r1, sp, #260	@ 0x104
 8005986:	4630      	mov	r0, r6
 8005988:	f000 f86c 	bl	8005a64 <_scanf_chars>
 800598c:	2801      	cmp	r0, #1
 800598e:	d064      	beq.n	8005a5a <__ssvfiscanf_r+0x2de>
 8005990:	2802      	cmp	r0, #2
 8005992:	f47f af18 	bne.w	80057c6 <__ssvfiscanf_r+0x4a>
 8005996:	e7c9      	b.n	800592c <__ssvfiscanf_r+0x1b0>
 8005998:	220a      	movs	r2, #10
 800599a:	e7d7      	b.n	800594c <__ssvfiscanf_r+0x1d0>
 800599c:	4629      	mov	r1, r5
 800599e:	4640      	mov	r0, r8
 80059a0:	f000 fa6c 	bl	8005e7c <__sccl>
 80059a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80059a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80059ac:	4605      	mov	r5, r0
 80059ae:	2301      	movs	r3, #1
 80059b0:	e7d7      	b.n	8005962 <__ssvfiscanf_r+0x1e6>
 80059b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80059b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80059ba:	2300      	movs	r3, #0
 80059bc:	e7d1      	b.n	8005962 <__ssvfiscanf_r+0x1e6>
 80059be:	2302      	movs	r3, #2
 80059c0:	e7cf      	b.n	8005962 <__ssvfiscanf_r+0x1e6>
 80059c2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80059c4:	06c3      	lsls	r3, r0, #27
 80059c6:	f53f aefe 	bmi.w	80057c6 <__ssvfiscanf_r+0x4a>
 80059ca:	9b00      	ldr	r3, [sp, #0]
 80059cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80059ce:	1d19      	adds	r1, r3, #4
 80059d0:	9100      	str	r1, [sp, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	07c0      	lsls	r0, r0, #31
 80059d6:	bf4c      	ite	mi
 80059d8:	801a      	strhmi	r2, [r3, #0]
 80059da:	601a      	strpl	r2, [r3, #0]
 80059dc:	e6f3      	b.n	80057c6 <__ssvfiscanf_r+0x4a>
 80059de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80059e0:	4621      	mov	r1, r4
 80059e2:	4630      	mov	r0, r6
 80059e4:	4798      	blx	r3
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d0bf      	beq.n	800596a <__ssvfiscanf_r+0x1ee>
 80059ea:	e79f      	b.n	800592c <__ssvfiscanf_r+0x1b0>
 80059ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80059ee:	3201      	adds	r2, #1
 80059f0:	9245      	str	r2, [sp, #276]	@ 0x114
 80059f2:	6862      	ldr	r2, [r4, #4]
 80059f4:	3a01      	subs	r2, #1
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	6062      	str	r2, [r4, #4]
 80059fa:	dd02      	ble.n	8005a02 <__ssvfiscanf_r+0x286>
 80059fc:	3301      	adds	r3, #1
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	e7b6      	b.n	8005970 <__ssvfiscanf_r+0x1f4>
 8005a02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005a04:	4621      	mov	r1, r4
 8005a06:	4630      	mov	r0, r6
 8005a08:	4798      	blx	r3
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d0b0      	beq.n	8005970 <__ssvfiscanf_r+0x1f4>
 8005a0e:	e78d      	b.n	800592c <__ssvfiscanf_r+0x1b0>
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	dc0f      	bgt.n	8005a34 <__ssvfiscanf_r+0x2b8>
 8005a14:	466b      	mov	r3, sp
 8005a16:	4622      	mov	r2, r4
 8005a18:	a941      	add	r1, sp, #260	@ 0x104
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f000 f87c 	bl	8005b18 <_scanf_i>
 8005a20:	e7b4      	b.n	800598c <__ssvfiscanf_r+0x210>
 8005a22:	bf00      	nop
 8005a24:	080056cd 	.word	0x080056cd
 8005a28:	08005743 	.word	0x08005743
 8005a2c:	08006b59 	.word	0x08006b59
 8005a30:	08006b39 	.word	0x08006b39
 8005a34:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <__ssvfiscanf_r+0x2e4>)
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f43f aec5 	beq.w	80057c6 <__ssvfiscanf_r+0x4a>
 8005a3c:	466b      	mov	r3, sp
 8005a3e:	4622      	mov	r2, r4
 8005a40:	a941      	add	r1, sp, #260	@ 0x104
 8005a42:	4630      	mov	r0, r6
 8005a44:	f3af 8000 	nop.w
 8005a48:	e7a0      	b.n	800598c <__ssvfiscanf_r+0x210>
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	065b      	lsls	r3, r3, #25
 8005a4e:	f53f af71 	bmi.w	8005934 <__ssvfiscanf_r+0x1b8>
 8005a52:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005a5c:	e7f9      	b.n	8005a52 <__ssvfiscanf_r+0x2d6>
 8005a5e:	bf00      	nop
 8005a60:	00000000 	.word	0x00000000

08005a64 <_scanf_chars>:
 8005a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a68:	4615      	mov	r5, r2
 8005a6a:	688a      	ldr	r2, [r1, #8]
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	b932      	cbnz	r2, 8005a80 <_scanf_chars+0x1c>
 8005a72:	698a      	ldr	r2, [r1, #24]
 8005a74:	2a00      	cmp	r2, #0
 8005a76:	bf14      	ite	ne
 8005a78:	f04f 32ff 	movne.w	r2, #4294967295
 8005a7c:	2201      	moveq	r2, #1
 8005a7e:	608a      	str	r2, [r1, #8]
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005b14 <_scanf_chars+0xb0>
 8005a86:	06d1      	lsls	r1, r2, #27
 8005a88:	bf5f      	itttt	pl
 8005a8a:	681a      	ldrpl	r2, [r3, #0]
 8005a8c:	1d11      	addpl	r1, r2, #4
 8005a8e:	6019      	strpl	r1, [r3, #0]
 8005a90:	6816      	ldrpl	r6, [r2, #0]
 8005a92:	2700      	movs	r7, #0
 8005a94:	69a0      	ldr	r0, [r4, #24]
 8005a96:	b188      	cbz	r0, 8005abc <_scanf_chars+0x58>
 8005a98:	2801      	cmp	r0, #1
 8005a9a:	d107      	bne.n	8005aac <_scanf_chars+0x48>
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	781a      	ldrb	r2, [r3, #0]
 8005aa0:	6963      	ldr	r3, [r4, #20]
 8005aa2:	5c9b      	ldrb	r3, [r3, r2]
 8005aa4:	b953      	cbnz	r3, 8005abc <_scanf_chars+0x58>
 8005aa6:	2f00      	cmp	r7, #0
 8005aa8:	d031      	beq.n	8005b0e <_scanf_chars+0xaa>
 8005aaa:	e022      	b.n	8005af2 <_scanf_chars+0x8e>
 8005aac:	2802      	cmp	r0, #2
 8005aae:	d120      	bne.n	8005af2 <_scanf_chars+0x8e>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005ab8:	071b      	lsls	r3, r3, #28
 8005aba:	d41a      	bmi.n	8005af2 <_scanf_chars+0x8e>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	06da      	lsls	r2, r3, #27
 8005ac0:	bf5e      	ittt	pl
 8005ac2:	682b      	ldrpl	r3, [r5, #0]
 8005ac4:	781b      	ldrbpl	r3, [r3, #0]
 8005ac6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005aca:	682a      	ldr	r2, [r5, #0]
 8005acc:	686b      	ldr	r3, [r5, #4]
 8005ace:	3201      	adds	r2, #1
 8005ad0:	602a      	str	r2, [r5, #0]
 8005ad2:	68a2      	ldr	r2, [r4, #8]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	3a01      	subs	r2, #1
 8005ad8:	606b      	str	r3, [r5, #4]
 8005ada:	3701      	adds	r7, #1
 8005adc:	60a2      	str	r2, [r4, #8]
 8005ade:	b142      	cbz	r2, 8005af2 <_scanf_chars+0x8e>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dcd7      	bgt.n	8005a94 <_scanf_chars+0x30>
 8005ae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4640      	mov	r0, r8
 8005aec:	4798      	blx	r3
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d0d0      	beq.n	8005a94 <_scanf_chars+0x30>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	f013 0310 	ands.w	r3, r3, #16
 8005af8:	d105      	bne.n	8005b06 <_scanf_chars+0xa2>
 8005afa:	68e2      	ldr	r2, [r4, #12]
 8005afc:	3201      	adds	r2, #1
 8005afe:	60e2      	str	r2, [r4, #12]
 8005b00:	69a2      	ldr	r2, [r4, #24]
 8005b02:	b102      	cbz	r2, 8005b06 <_scanf_chars+0xa2>
 8005b04:	7033      	strb	r3, [r6, #0]
 8005b06:	6923      	ldr	r3, [r4, #16]
 8005b08:	443b      	add	r3, r7
 8005b0a:	6123      	str	r3, [r4, #16]
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b12:	bf00      	nop
 8005b14:	08006b59 	.word	0x08006b59

08005b18 <_scanf_i>:
 8005b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	4698      	mov	r8, r3
 8005b1e:	4b74      	ldr	r3, [pc, #464]	@ (8005cf0 <_scanf_i+0x1d8>)
 8005b20:	460c      	mov	r4, r1
 8005b22:	4682      	mov	sl, r0
 8005b24:	4616      	mov	r6, r2
 8005b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	ab03      	add	r3, sp, #12
 8005b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005b32:	4b70      	ldr	r3, [pc, #448]	@ (8005cf4 <_scanf_i+0x1dc>)
 8005b34:	69a1      	ldr	r1, [r4, #24]
 8005b36:	4a70      	ldr	r2, [pc, #448]	@ (8005cf8 <_scanf_i+0x1e0>)
 8005b38:	2903      	cmp	r1, #3
 8005b3a:	bf08      	it	eq
 8005b3c:	461a      	moveq	r2, r3
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	9201      	str	r2, [sp, #4]
 8005b42:	1e5a      	subs	r2, r3, #1
 8005b44:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005b48:	bf88      	it	hi
 8005b4a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005b4e:	4627      	mov	r7, r4
 8005b50:	bf82      	ittt	hi
 8005b52:	eb03 0905 	addhi.w	r9, r3, r5
 8005b56:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005b5a:	60a3      	strhi	r3, [r4, #8]
 8005b5c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005b60:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005b64:	bf98      	it	ls
 8005b66:	f04f 0900 	movls.w	r9, #0
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	463d      	mov	r5, r7
 8005b6e:	f04f 0b00 	mov.w	fp, #0
 8005b72:	6831      	ldr	r1, [r6, #0]
 8005b74:	ab03      	add	r3, sp, #12
 8005b76:	7809      	ldrb	r1, [r1, #0]
 8005b78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f7fa fb2f 	bl	80001e0 <memchr>
 8005b82:	b328      	cbz	r0, 8005bd0 <_scanf_i+0xb8>
 8005b84:	f1bb 0f01 	cmp.w	fp, #1
 8005b88:	d159      	bne.n	8005c3e <_scanf_i+0x126>
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	b92a      	cbnz	r2, 8005b9a <_scanf_i+0x82>
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	2108      	movs	r1, #8
 8005b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b96:	6061      	str	r1, [r4, #4]
 8005b98:	6022      	str	r2, [r4, #0]
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005ba0:	6022      	str	r2, [r4, #0]
 8005ba2:	68a2      	ldr	r2, [r4, #8]
 8005ba4:	1e51      	subs	r1, r2, #1
 8005ba6:	60a1      	str	r1, [r4, #8]
 8005ba8:	b192      	cbz	r2, 8005bd0 <_scanf_i+0xb8>
 8005baa:	6832      	ldr	r2, [r6, #0]
 8005bac:	1c51      	adds	r1, r2, #1
 8005bae:	6031      	str	r1, [r6, #0]
 8005bb0:	7812      	ldrb	r2, [r2, #0]
 8005bb2:	f805 2b01 	strb.w	r2, [r5], #1
 8005bb6:	6872      	ldr	r2, [r6, #4]
 8005bb8:	3a01      	subs	r2, #1
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	6072      	str	r2, [r6, #4]
 8005bbe:	dc07      	bgt.n	8005bd0 <_scanf_i+0xb8>
 8005bc0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4650      	mov	r0, sl
 8005bc8:	4790      	blx	r2
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	f040 8085 	bne.w	8005cda <_scanf_i+0x1c2>
 8005bd0:	f10b 0b01 	add.w	fp, fp, #1
 8005bd4:	f1bb 0f03 	cmp.w	fp, #3
 8005bd8:	d1cb      	bne.n	8005b72 <_scanf_i+0x5a>
 8005bda:	6863      	ldr	r3, [r4, #4]
 8005bdc:	b90b      	cbnz	r3, 8005be2 <_scanf_i+0xca>
 8005bde:	230a      	movs	r3, #10
 8005be0:	6063      	str	r3, [r4, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	4945      	ldr	r1, [pc, #276]	@ (8005cfc <_scanf_i+0x1e4>)
 8005be6:	6960      	ldr	r0, [r4, #20]
 8005be8:	1ac9      	subs	r1, r1, r3
 8005bea:	f000 f947 	bl	8005e7c <__sccl>
 8005bee:	f04f 0b00 	mov.w	fp, #0
 8005bf2:	68a3      	ldr	r3, [r4, #8]
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d03d      	beq.n	8005c76 <_scanf_i+0x15e>
 8005bfa:	6831      	ldr	r1, [r6, #0]
 8005bfc:	6960      	ldr	r0, [r4, #20]
 8005bfe:	f891 c000 	ldrb.w	ip, [r1]
 8005c02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d035      	beq.n	8005c76 <_scanf_i+0x15e>
 8005c0a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005c0e:	d124      	bne.n	8005c5a <_scanf_i+0x142>
 8005c10:	0510      	lsls	r0, r2, #20
 8005c12:	d522      	bpl.n	8005c5a <_scanf_i+0x142>
 8005c14:	f10b 0b01 	add.w	fp, fp, #1
 8005c18:	f1b9 0f00 	cmp.w	r9, #0
 8005c1c:	d003      	beq.n	8005c26 <_scanf_i+0x10e>
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f109 39ff 	add.w	r9, r9, #4294967295
 8005c24:	60a3      	str	r3, [r4, #8]
 8005c26:	6873      	ldr	r3, [r6, #4]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	6073      	str	r3, [r6, #4]
 8005c2e:	dd1b      	ble.n	8005c68 <_scanf_i+0x150>
 8005c30:	6833      	ldr	r3, [r6, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60a3      	str	r3, [r4, #8]
 8005c3c:	e7d9      	b.n	8005bf2 <_scanf_i+0xda>
 8005c3e:	f1bb 0f02 	cmp.w	fp, #2
 8005c42:	d1ae      	bne.n	8005ba2 <_scanf_i+0x8a>
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005c4a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005c4e:	d1bf      	bne.n	8005bd0 <_scanf_i+0xb8>
 8005c50:	2110      	movs	r1, #16
 8005c52:	6061      	str	r1, [r4, #4]
 8005c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c58:	e7a2      	b.n	8005ba0 <_scanf_i+0x88>
 8005c5a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005c5e:	6022      	str	r2, [r4, #0]
 8005c60:	780b      	ldrb	r3, [r1, #0]
 8005c62:	f805 3b01 	strb.w	r3, [r5], #1
 8005c66:	e7de      	b.n	8005c26 <_scanf_i+0x10e>
 8005c68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	4650      	mov	r0, sl
 8005c70:	4798      	blx	r3
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d0df      	beq.n	8005c36 <_scanf_i+0x11e>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	05d9      	lsls	r1, r3, #23
 8005c7a:	d50d      	bpl.n	8005c98 <_scanf_i+0x180>
 8005c7c:	42bd      	cmp	r5, r7
 8005c7e:	d909      	bls.n	8005c94 <_scanf_i+0x17c>
 8005c80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c88:	4632      	mov	r2, r6
 8005c8a:	4650      	mov	r0, sl
 8005c8c:	4798      	blx	r3
 8005c8e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005c92:	464d      	mov	r5, r9
 8005c94:	42bd      	cmp	r5, r7
 8005c96:	d028      	beq.n	8005cea <_scanf_i+0x1d2>
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	f012 0210 	ands.w	r2, r2, #16
 8005c9e:	d113      	bne.n	8005cc8 <_scanf_i+0x1b0>
 8005ca0:	702a      	strb	r2, [r5, #0]
 8005ca2:	6863      	ldr	r3, [r4, #4]
 8005ca4:	9e01      	ldr	r6, [sp, #4]
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4650      	mov	r0, sl
 8005caa:	47b0      	blx	r6
 8005cac:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb0:	6821      	ldr	r1, [r4, #0]
 8005cb2:	1d1a      	adds	r2, r3, #4
 8005cb4:	f8c8 2000 	str.w	r2, [r8]
 8005cb8:	f011 0f20 	tst.w	r1, #32
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	d00f      	beq.n	8005ce0 <_scanf_i+0x1c8>
 8005cc0:	6018      	str	r0, [r3, #0]
 8005cc2:	68e3      	ldr	r3, [r4, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60e3      	str	r3, [r4, #12]
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	1bed      	subs	r5, r5, r7
 8005ccc:	445d      	add	r5, fp
 8005cce:	442b      	add	r3, r5
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	b007      	add	sp, #28
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cda:	f04f 0b00 	mov.w	fp, #0
 8005cde:	e7ca      	b.n	8005c76 <_scanf_i+0x15e>
 8005ce0:	07ca      	lsls	r2, r1, #31
 8005ce2:	bf4c      	ite	mi
 8005ce4:	8018      	strhmi	r0, [r3, #0]
 8005ce6:	6018      	strpl	r0, [r3, #0]
 8005ce8:	e7eb      	b.n	8005cc2 <_scanf_i+0x1aa>
 8005cea:	2001      	movs	r0, #1
 8005cec:	e7f2      	b.n	8005cd4 <_scanf_i+0x1bc>
 8005cee:	bf00      	nop
 8005cf0:	08006a68 	.word	0x08006a68
 8005cf4:	08006101 	.word	0x08006101
 8005cf8:	080061e1 	.word	0x080061e1
 8005cfc:	08006b4d 	.word	0x08006b4d

08005d00 <__sflush_r>:
 8005d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d08:	0716      	lsls	r6, r2, #28
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	d454      	bmi.n	8005dba <__sflush_r+0xba>
 8005d10:	684b      	ldr	r3, [r1, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	dc02      	bgt.n	8005d1c <__sflush_r+0x1c>
 8005d16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dd48      	ble.n	8005dae <__sflush_r+0xae>
 8005d1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	d045      	beq.n	8005dae <__sflush_r+0xae>
 8005d22:	2300      	movs	r3, #0
 8005d24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d28:	682f      	ldr	r7, [r5, #0]
 8005d2a:	6a21      	ldr	r1, [r4, #32]
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	d030      	beq.n	8005d92 <__sflush_r+0x92>
 8005d30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	0759      	lsls	r1, r3, #29
 8005d36:	d505      	bpl.n	8005d44 <__sflush_r+0x44>
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	1ad2      	subs	r2, r2, r3
 8005d3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d3e:	b10b      	cbz	r3, 8005d44 <__sflush_r+0x44>
 8005d40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d48:	6a21      	ldr	r1, [r4, #32]
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b0      	blx	r6
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	d106      	bne.n	8005d62 <__sflush_r+0x62>
 8005d54:	6829      	ldr	r1, [r5, #0]
 8005d56:	291d      	cmp	r1, #29
 8005d58:	d82b      	bhi.n	8005db2 <__sflush_r+0xb2>
 8005d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005e04 <__sflush_r+0x104>)
 8005d5c:	410a      	asrs	r2, r1
 8005d5e:	07d6      	lsls	r6, r2, #31
 8005d60:	d427      	bmi.n	8005db2 <__sflush_r+0xb2>
 8005d62:	2200      	movs	r2, #0
 8005d64:	6062      	str	r2, [r4, #4]
 8005d66:	04d9      	lsls	r1, r3, #19
 8005d68:	6922      	ldr	r2, [r4, #16]
 8005d6a:	6022      	str	r2, [r4, #0]
 8005d6c:	d504      	bpl.n	8005d78 <__sflush_r+0x78>
 8005d6e:	1c42      	adds	r2, r0, #1
 8005d70:	d101      	bne.n	8005d76 <__sflush_r+0x76>
 8005d72:	682b      	ldr	r3, [r5, #0]
 8005d74:	b903      	cbnz	r3, 8005d78 <__sflush_r+0x78>
 8005d76:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d7a:	602f      	str	r7, [r5, #0]
 8005d7c:	b1b9      	cbz	r1, 8005dae <__sflush_r+0xae>
 8005d7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d82:	4299      	cmp	r1, r3
 8005d84:	d002      	beq.n	8005d8c <__sflush_r+0x8c>
 8005d86:	4628      	mov	r0, r5
 8005d88:	f7ff fba0 	bl	80054cc <_free_r>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d90:	e00d      	b.n	8005dae <__sflush_r+0xae>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4628      	mov	r0, r5
 8005d96:	47b0      	blx	r6
 8005d98:	4602      	mov	r2, r0
 8005d9a:	1c50      	adds	r0, r2, #1
 8005d9c:	d1c9      	bne.n	8005d32 <__sflush_r+0x32>
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0c6      	beq.n	8005d32 <__sflush_r+0x32>
 8005da4:	2b1d      	cmp	r3, #29
 8005da6:	d001      	beq.n	8005dac <__sflush_r+0xac>
 8005da8:	2b16      	cmp	r3, #22
 8005daa:	d11e      	bne.n	8005dea <__sflush_r+0xea>
 8005dac:	602f      	str	r7, [r5, #0]
 8005dae:	2000      	movs	r0, #0
 8005db0:	e022      	b.n	8005df8 <__sflush_r+0xf8>
 8005db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005db6:	b21b      	sxth	r3, r3
 8005db8:	e01b      	b.n	8005df2 <__sflush_r+0xf2>
 8005dba:	690f      	ldr	r7, [r1, #16]
 8005dbc:	2f00      	cmp	r7, #0
 8005dbe:	d0f6      	beq.n	8005dae <__sflush_r+0xae>
 8005dc0:	0793      	lsls	r3, r2, #30
 8005dc2:	680e      	ldr	r6, [r1, #0]
 8005dc4:	bf08      	it	eq
 8005dc6:	694b      	ldreq	r3, [r1, #20]
 8005dc8:	600f      	str	r7, [r1, #0]
 8005dca:	bf18      	it	ne
 8005dcc:	2300      	movne	r3, #0
 8005dce:	eba6 0807 	sub.w	r8, r6, r7
 8005dd2:	608b      	str	r3, [r1, #8]
 8005dd4:	f1b8 0f00 	cmp.w	r8, #0
 8005dd8:	dde9      	ble.n	8005dae <__sflush_r+0xae>
 8005dda:	6a21      	ldr	r1, [r4, #32]
 8005ddc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005dde:	4643      	mov	r3, r8
 8005de0:	463a      	mov	r2, r7
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b0      	blx	r6
 8005de6:	2800      	cmp	r0, #0
 8005de8:	dc08      	bgt.n	8005dfc <__sflush_r+0xfc>
 8005dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005df2:	81a3      	strh	r3, [r4, #12]
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dfc:	4407      	add	r7, r0
 8005dfe:	eba8 0800 	sub.w	r8, r8, r0
 8005e02:	e7e7      	b.n	8005dd4 <__sflush_r+0xd4>
 8005e04:	dfbffffe 	.word	0xdfbffffe

08005e08 <_fflush_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	690b      	ldr	r3, [r1, #16]
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	460c      	mov	r4, r1
 8005e10:	b913      	cbnz	r3, 8005e18 <_fflush_r+0x10>
 8005e12:	2500      	movs	r5, #0
 8005e14:	4628      	mov	r0, r5
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	b118      	cbz	r0, 8005e22 <_fflush_r+0x1a>
 8005e1a:	6a03      	ldr	r3, [r0, #32]
 8005e1c:	b90b      	cbnz	r3, 8005e22 <_fflush_r+0x1a>
 8005e1e:	f7ff f9b9 	bl	8005194 <__sinit>
 8005e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f3      	beq.n	8005e12 <_fflush_r+0xa>
 8005e2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e2c:	07d0      	lsls	r0, r2, #31
 8005e2e:	d404      	bmi.n	8005e3a <_fflush_r+0x32>
 8005e30:	0599      	lsls	r1, r3, #22
 8005e32:	d402      	bmi.n	8005e3a <_fflush_r+0x32>
 8005e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e36:	f7ff fb28 	bl	800548a <__retarget_lock_acquire_recursive>
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	f7ff ff5f 	bl	8005d00 <__sflush_r>
 8005e42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e44:	07da      	lsls	r2, r3, #31
 8005e46:	4605      	mov	r5, r0
 8005e48:	d4e4      	bmi.n	8005e14 <_fflush_r+0xc>
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	059b      	lsls	r3, r3, #22
 8005e4e:	d4e1      	bmi.n	8005e14 <_fflush_r+0xc>
 8005e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e52:	f7ff fb1b 	bl	800548c <__retarget_lock_release_recursive>
 8005e56:	e7dd      	b.n	8005e14 <_fflush_r+0xc>

08005e58 <fiprintf>:
 8005e58:	b40e      	push	{r1, r2, r3}
 8005e5a:	b503      	push	{r0, r1, lr}
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	ab03      	add	r3, sp, #12
 8005e60:	4805      	ldr	r0, [pc, #20]	@ (8005e78 <fiprintf+0x20>)
 8005e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e66:	6800      	ldr	r0, [r0, #0]
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	f000 f9e5 	bl	8006238 <_vfiprintf_r>
 8005e6e:	b002      	add	sp, #8
 8005e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e74:	b003      	add	sp, #12
 8005e76:	4770      	bx	lr
 8005e78:	2000001c 	.word	0x2000001c

08005e7c <__sccl>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	780b      	ldrb	r3, [r1, #0]
 8005e80:	4604      	mov	r4, r0
 8005e82:	2b5e      	cmp	r3, #94	@ 0x5e
 8005e84:	bf0b      	itete	eq
 8005e86:	784b      	ldrbeq	r3, [r1, #1]
 8005e88:	1c4a      	addne	r2, r1, #1
 8005e8a:	1c8a      	addeq	r2, r1, #2
 8005e8c:	2100      	movne	r1, #0
 8005e8e:	bf08      	it	eq
 8005e90:	2101      	moveq	r1, #1
 8005e92:	3801      	subs	r0, #1
 8005e94:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005e98:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005e9c:	42a8      	cmp	r0, r5
 8005e9e:	d1fb      	bne.n	8005e98 <__sccl+0x1c>
 8005ea0:	b90b      	cbnz	r3, 8005ea6 <__sccl+0x2a>
 8005ea2:	1e50      	subs	r0, r2, #1
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	f081 0101 	eor.w	r1, r1, #1
 8005eaa:	54e1      	strb	r1, [r4, r3]
 8005eac:	4610      	mov	r0, r2
 8005eae:	4602      	mov	r2, r0
 8005eb0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005eb4:	2d2d      	cmp	r5, #45	@ 0x2d
 8005eb6:	d005      	beq.n	8005ec4 <__sccl+0x48>
 8005eb8:	2d5d      	cmp	r5, #93	@ 0x5d
 8005eba:	d016      	beq.n	8005eea <__sccl+0x6e>
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	d0f1      	beq.n	8005ea4 <__sccl+0x28>
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	e7f2      	b.n	8005eaa <__sccl+0x2e>
 8005ec4:	7846      	ldrb	r6, [r0, #1]
 8005ec6:	2e5d      	cmp	r6, #93	@ 0x5d
 8005ec8:	d0fa      	beq.n	8005ec0 <__sccl+0x44>
 8005eca:	42b3      	cmp	r3, r6
 8005ecc:	dcf8      	bgt.n	8005ec0 <__sccl+0x44>
 8005ece:	3002      	adds	r0, #2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	3201      	adds	r2, #1
 8005ed4:	4296      	cmp	r6, r2
 8005ed6:	54a1      	strb	r1, [r4, r2]
 8005ed8:	dcfb      	bgt.n	8005ed2 <__sccl+0x56>
 8005eda:	1af2      	subs	r2, r6, r3
 8005edc:	3a01      	subs	r2, #1
 8005ede:	1c5d      	adds	r5, r3, #1
 8005ee0:	42b3      	cmp	r3, r6
 8005ee2:	bfa8      	it	ge
 8005ee4:	2200      	movge	r2, #0
 8005ee6:	18ab      	adds	r3, r5, r2
 8005ee8:	e7e1      	b.n	8005eae <__sccl+0x32>
 8005eea:	4610      	mov	r0, r2
 8005eec:	e7da      	b.n	8005ea4 <__sccl+0x28>

08005eee <__submore>:
 8005eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005ef6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005efa:	4299      	cmp	r1, r3
 8005efc:	d11d      	bne.n	8005f3a <__submore+0x4c>
 8005efe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f02:	f7ff fb57 	bl	80055b4 <_malloc_r>
 8005f06:	b918      	cbnz	r0, 8005f10 <__submore+0x22>
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f14:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005f16:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005f1a:	6360      	str	r0, [r4, #52]	@ 0x34
 8005f1c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005f20:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005f24:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005f28:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005f2c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005f30:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005f34:	6020      	str	r0, [r4, #0]
 8005f36:	2000      	movs	r0, #0
 8005f38:	e7e8      	b.n	8005f0c <__submore+0x1e>
 8005f3a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005f3c:	0077      	lsls	r7, r6, #1
 8005f3e:	463a      	mov	r2, r7
 8005f40:	f000 f835 	bl	8005fae <_realloc_r>
 8005f44:	4605      	mov	r5, r0
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0de      	beq.n	8005f08 <__submore+0x1a>
 8005f4a:	eb00 0806 	add.w	r8, r0, r6
 8005f4e:	4601      	mov	r1, r0
 8005f50:	4632      	mov	r2, r6
 8005f52:	4640      	mov	r0, r8
 8005f54:	f000 f816 	bl	8005f84 <memcpy>
 8005f58:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005f5c:	f8c4 8000 	str.w	r8, [r4]
 8005f60:	e7e9      	b.n	8005f36 <__submore+0x48>
	...

08005f64 <_sbrk_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d06      	ldr	r5, [pc, #24]	@ (8005f80 <_sbrk_r+0x1c>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	f7fb ffb8 	bl	8001ee4 <_sbrk>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_sbrk_r+0x1a>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_sbrk_r+0x1a>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	200001d4 	.word	0x200001d4

08005f84 <memcpy>:
 8005f84:	440a      	add	r2, r1
 8005f86:	4291      	cmp	r1, r2
 8005f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f8c:	d100      	bne.n	8005f90 <memcpy+0xc>
 8005f8e:	4770      	bx	lr
 8005f90:	b510      	push	{r4, lr}
 8005f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f9a:	4291      	cmp	r1, r2
 8005f9c:	d1f9      	bne.n	8005f92 <memcpy+0xe>
 8005f9e:	bd10      	pop	{r4, pc}

08005fa0 <abort>:
 8005fa0:	b508      	push	{r3, lr}
 8005fa2:	2006      	movs	r0, #6
 8005fa4:	f000 fcaa 	bl	80068fc <raise>
 8005fa8:	2001      	movs	r0, #1
 8005faa:	f7fb ff23 	bl	8001df4 <_exit>

08005fae <_realloc_r>:
 8005fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	4615      	mov	r5, r2
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	b921      	cbnz	r1, 8005fc4 <_realloc_r+0x16>
 8005fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	f7ff baf8 	b.w	80055b4 <_malloc_r>
 8005fc4:	b92a      	cbnz	r2, 8005fd2 <_realloc_r+0x24>
 8005fc6:	f7ff fa81 	bl	80054cc <_free_r>
 8005fca:	2400      	movs	r4, #0
 8005fcc:	4620      	mov	r0, r4
 8005fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd2:	f000 fcaf 	bl	8006934 <_malloc_usable_size_r>
 8005fd6:	4285      	cmp	r5, r0
 8005fd8:	4606      	mov	r6, r0
 8005fda:	d802      	bhi.n	8005fe2 <_realloc_r+0x34>
 8005fdc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005fe0:	d8f4      	bhi.n	8005fcc <_realloc_r+0x1e>
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	f7ff fae5 	bl	80055b4 <_malloc_r>
 8005fea:	4607      	mov	r7, r0
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d0ec      	beq.n	8005fca <_realloc_r+0x1c>
 8005ff0:	42b5      	cmp	r5, r6
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	bf28      	it	cs
 8005ff8:	4632      	movcs	r2, r6
 8005ffa:	f7ff ffc3 	bl	8005f84 <memcpy>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4640      	mov	r0, r8
 8006002:	f7ff fa63 	bl	80054cc <_free_r>
 8006006:	463c      	mov	r4, r7
 8006008:	e7e0      	b.n	8005fcc <_realloc_r+0x1e>
	...

0800600c <_strtol_l.constprop.0>:
 800600c:	2b24      	cmp	r3, #36	@ 0x24
 800600e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006012:	4686      	mov	lr, r0
 8006014:	4690      	mov	r8, r2
 8006016:	d801      	bhi.n	800601c <_strtol_l.constprop.0+0x10>
 8006018:	2b01      	cmp	r3, #1
 800601a:	d106      	bne.n	800602a <_strtol_l.constprop.0+0x1e>
 800601c:	f7ff fa0a 	bl	8005434 <__errno>
 8006020:	2316      	movs	r3, #22
 8006022:	6003      	str	r3, [r0, #0]
 8006024:	2000      	movs	r0, #0
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	4834      	ldr	r0, [pc, #208]	@ (80060fc <_strtol_l.constprop.0+0xf0>)
 800602c:	460d      	mov	r5, r1
 800602e:	462a      	mov	r2, r5
 8006030:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006034:	5d06      	ldrb	r6, [r0, r4]
 8006036:	f016 0608 	ands.w	r6, r6, #8
 800603a:	d1f8      	bne.n	800602e <_strtol_l.constprop.0+0x22>
 800603c:	2c2d      	cmp	r4, #45	@ 0x2d
 800603e:	d12d      	bne.n	800609c <_strtol_l.constprop.0+0x90>
 8006040:	782c      	ldrb	r4, [r5, #0]
 8006042:	2601      	movs	r6, #1
 8006044:	1c95      	adds	r5, r2, #2
 8006046:	f033 0210 	bics.w	r2, r3, #16
 800604a:	d109      	bne.n	8006060 <_strtol_l.constprop.0+0x54>
 800604c:	2c30      	cmp	r4, #48	@ 0x30
 800604e:	d12a      	bne.n	80060a6 <_strtol_l.constprop.0+0x9a>
 8006050:	782a      	ldrb	r2, [r5, #0]
 8006052:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006056:	2a58      	cmp	r2, #88	@ 0x58
 8006058:	d125      	bne.n	80060a6 <_strtol_l.constprop.0+0x9a>
 800605a:	786c      	ldrb	r4, [r5, #1]
 800605c:	2310      	movs	r3, #16
 800605e:	3502      	adds	r5, #2
 8006060:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006064:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006068:	2200      	movs	r2, #0
 800606a:	fbbc f9f3 	udiv	r9, ip, r3
 800606e:	4610      	mov	r0, r2
 8006070:	fb03 ca19 	mls	sl, r3, r9, ip
 8006074:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006078:	2f09      	cmp	r7, #9
 800607a:	d81b      	bhi.n	80060b4 <_strtol_l.constprop.0+0xa8>
 800607c:	463c      	mov	r4, r7
 800607e:	42a3      	cmp	r3, r4
 8006080:	dd27      	ble.n	80060d2 <_strtol_l.constprop.0+0xc6>
 8006082:	1c57      	adds	r7, r2, #1
 8006084:	d007      	beq.n	8006096 <_strtol_l.constprop.0+0x8a>
 8006086:	4581      	cmp	r9, r0
 8006088:	d320      	bcc.n	80060cc <_strtol_l.constprop.0+0xc0>
 800608a:	d101      	bne.n	8006090 <_strtol_l.constprop.0+0x84>
 800608c:	45a2      	cmp	sl, r4
 800608e:	db1d      	blt.n	80060cc <_strtol_l.constprop.0+0xc0>
 8006090:	fb00 4003 	mla	r0, r0, r3, r4
 8006094:	2201      	movs	r2, #1
 8006096:	f815 4b01 	ldrb.w	r4, [r5], #1
 800609a:	e7eb      	b.n	8006074 <_strtol_l.constprop.0+0x68>
 800609c:	2c2b      	cmp	r4, #43	@ 0x2b
 800609e:	bf04      	itt	eq
 80060a0:	782c      	ldrbeq	r4, [r5, #0]
 80060a2:	1c95      	addeq	r5, r2, #2
 80060a4:	e7cf      	b.n	8006046 <_strtol_l.constprop.0+0x3a>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1da      	bne.n	8006060 <_strtol_l.constprop.0+0x54>
 80060aa:	2c30      	cmp	r4, #48	@ 0x30
 80060ac:	bf0c      	ite	eq
 80060ae:	2308      	moveq	r3, #8
 80060b0:	230a      	movne	r3, #10
 80060b2:	e7d5      	b.n	8006060 <_strtol_l.constprop.0+0x54>
 80060b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80060b8:	2f19      	cmp	r7, #25
 80060ba:	d801      	bhi.n	80060c0 <_strtol_l.constprop.0+0xb4>
 80060bc:	3c37      	subs	r4, #55	@ 0x37
 80060be:	e7de      	b.n	800607e <_strtol_l.constprop.0+0x72>
 80060c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80060c4:	2f19      	cmp	r7, #25
 80060c6:	d804      	bhi.n	80060d2 <_strtol_l.constprop.0+0xc6>
 80060c8:	3c57      	subs	r4, #87	@ 0x57
 80060ca:	e7d8      	b.n	800607e <_strtol_l.constprop.0+0x72>
 80060cc:	f04f 32ff 	mov.w	r2, #4294967295
 80060d0:	e7e1      	b.n	8006096 <_strtol_l.constprop.0+0x8a>
 80060d2:	1c53      	adds	r3, r2, #1
 80060d4:	d108      	bne.n	80060e8 <_strtol_l.constprop.0+0xdc>
 80060d6:	2322      	movs	r3, #34	@ 0x22
 80060d8:	f8ce 3000 	str.w	r3, [lr]
 80060dc:	4660      	mov	r0, ip
 80060de:	f1b8 0f00 	cmp.w	r8, #0
 80060e2:	d0a0      	beq.n	8006026 <_strtol_l.constprop.0+0x1a>
 80060e4:	1e69      	subs	r1, r5, #1
 80060e6:	e006      	b.n	80060f6 <_strtol_l.constprop.0+0xea>
 80060e8:	b106      	cbz	r6, 80060ec <_strtol_l.constprop.0+0xe0>
 80060ea:	4240      	negs	r0, r0
 80060ec:	f1b8 0f00 	cmp.w	r8, #0
 80060f0:	d099      	beq.n	8006026 <_strtol_l.constprop.0+0x1a>
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	d1f6      	bne.n	80060e4 <_strtol_l.constprop.0+0xd8>
 80060f6:	f8c8 1000 	str.w	r1, [r8]
 80060fa:	e794      	b.n	8006026 <_strtol_l.constprop.0+0x1a>
 80060fc:	08006b59 	.word	0x08006b59

08006100 <_strtol_r>:
 8006100:	f7ff bf84 	b.w	800600c <_strtol_l.constprop.0>

08006104 <_strtoul_l.constprop.0>:
 8006104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006108:	4e34      	ldr	r6, [pc, #208]	@ (80061dc <_strtoul_l.constprop.0+0xd8>)
 800610a:	4686      	mov	lr, r0
 800610c:	460d      	mov	r5, r1
 800610e:	4628      	mov	r0, r5
 8006110:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006114:	5d37      	ldrb	r7, [r6, r4]
 8006116:	f017 0708 	ands.w	r7, r7, #8
 800611a:	d1f8      	bne.n	800610e <_strtoul_l.constprop.0+0xa>
 800611c:	2c2d      	cmp	r4, #45	@ 0x2d
 800611e:	d12f      	bne.n	8006180 <_strtoul_l.constprop.0+0x7c>
 8006120:	782c      	ldrb	r4, [r5, #0]
 8006122:	2701      	movs	r7, #1
 8006124:	1c85      	adds	r5, r0, #2
 8006126:	f033 0010 	bics.w	r0, r3, #16
 800612a:	d109      	bne.n	8006140 <_strtoul_l.constprop.0+0x3c>
 800612c:	2c30      	cmp	r4, #48	@ 0x30
 800612e:	d12c      	bne.n	800618a <_strtoul_l.constprop.0+0x86>
 8006130:	7828      	ldrb	r0, [r5, #0]
 8006132:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006136:	2858      	cmp	r0, #88	@ 0x58
 8006138:	d127      	bne.n	800618a <_strtoul_l.constprop.0+0x86>
 800613a:	786c      	ldrb	r4, [r5, #1]
 800613c:	2310      	movs	r3, #16
 800613e:	3502      	adds	r5, #2
 8006140:	f04f 38ff 	mov.w	r8, #4294967295
 8006144:	2600      	movs	r6, #0
 8006146:	fbb8 f8f3 	udiv	r8, r8, r3
 800614a:	fb03 f908 	mul.w	r9, r3, r8
 800614e:	ea6f 0909 	mvn.w	r9, r9
 8006152:	4630      	mov	r0, r6
 8006154:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006158:	f1bc 0f09 	cmp.w	ip, #9
 800615c:	d81c      	bhi.n	8006198 <_strtoul_l.constprop.0+0x94>
 800615e:	4664      	mov	r4, ip
 8006160:	42a3      	cmp	r3, r4
 8006162:	dd2a      	ble.n	80061ba <_strtoul_l.constprop.0+0xb6>
 8006164:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006168:	d007      	beq.n	800617a <_strtoul_l.constprop.0+0x76>
 800616a:	4580      	cmp	r8, r0
 800616c:	d322      	bcc.n	80061b4 <_strtoul_l.constprop.0+0xb0>
 800616e:	d101      	bne.n	8006174 <_strtoul_l.constprop.0+0x70>
 8006170:	45a1      	cmp	r9, r4
 8006172:	db1f      	blt.n	80061b4 <_strtoul_l.constprop.0+0xb0>
 8006174:	fb00 4003 	mla	r0, r0, r3, r4
 8006178:	2601      	movs	r6, #1
 800617a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800617e:	e7e9      	b.n	8006154 <_strtoul_l.constprop.0+0x50>
 8006180:	2c2b      	cmp	r4, #43	@ 0x2b
 8006182:	bf04      	itt	eq
 8006184:	782c      	ldrbeq	r4, [r5, #0]
 8006186:	1c85      	addeq	r5, r0, #2
 8006188:	e7cd      	b.n	8006126 <_strtoul_l.constprop.0+0x22>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1d8      	bne.n	8006140 <_strtoul_l.constprop.0+0x3c>
 800618e:	2c30      	cmp	r4, #48	@ 0x30
 8006190:	bf0c      	ite	eq
 8006192:	2308      	moveq	r3, #8
 8006194:	230a      	movne	r3, #10
 8006196:	e7d3      	b.n	8006140 <_strtoul_l.constprop.0+0x3c>
 8006198:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800619c:	f1bc 0f19 	cmp.w	ip, #25
 80061a0:	d801      	bhi.n	80061a6 <_strtoul_l.constprop.0+0xa2>
 80061a2:	3c37      	subs	r4, #55	@ 0x37
 80061a4:	e7dc      	b.n	8006160 <_strtoul_l.constprop.0+0x5c>
 80061a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80061aa:	f1bc 0f19 	cmp.w	ip, #25
 80061ae:	d804      	bhi.n	80061ba <_strtoul_l.constprop.0+0xb6>
 80061b0:	3c57      	subs	r4, #87	@ 0x57
 80061b2:	e7d5      	b.n	8006160 <_strtoul_l.constprop.0+0x5c>
 80061b4:	f04f 36ff 	mov.w	r6, #4294967295
 80061b8:	e7df      	b.n	800617a <_strtoul_l.constprop.0+0x76>
 80061ba:	1c73      	adds	r3, r6, #1
 80061bc:	d106      	bne.n	80061cc <_strtoul_l.constprop.0+0xc8>
 80061be:	2322      	movs	r3, #34	@ 0x22
 80061c0:	f8ce 3000 	str.w	r3, [lr]
 80061c4:	4630      	mov	r0, r6
 80061c6:	b932      	cbnz	r2, 80061d6 <_strtoul_l.constprop.0+0xd2>
 80061c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061cc:	b107      	cbz	r7, 80061d0 <_strtoul_l.constprop.0+0xcc>
 80061ce:	4240      	negs	r0, r0
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	d0f9      	beq.n	80061c8 <_strtoul_l.constprop.0+0xc4>
 80061d4:	b106      	cbz	r6, 80061d8 <_strtoul_l.constprop.0+0xd4>
 80061d6:	1e69      	subs	r1, r5, #1
 80061d8:	6011      	str	r1, [r2, #0]
 80061da:	e7f5      	b.n	80061c8 <_strtoul_l.constprop.0+0xc4>
 80061dc:	08006b59 	.word	0x08006b59

080061e0 <_strtoul_r>:
 80061e0:	f7ff bf90 	b.w	8006104 <_strtoul_l.constprop.0>

080061e4 <__sfputc_r>:
 80061e4:	6893      	ldr	r3, [r2, #8]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	b410      	push	{r4}
 80061ec:	6093      	str	r3, [r2, #8]
 80061ee:	da08      	bge.n	8006202 <__sfputc_r+0x1e>
 80061f0:	6994      	ldr	r4, [r2, #24]
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	db01      	blt.n	80061fa <__sfputc_r+0x16>
 80061f6:	290a      	cmp	r1, #10
 80061f8:	d103      	bne.n	8006202 <__sfputc_r+0x1e>
 80061fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061fe:	f000 bac1 	b.w	8006784 <__swbuf_r>
 8006202:	6813      	ldr	r3, [r2, #0]
 8006204:	1c58      	adds	r0, r3, #1
 8006206:	6010      	str	r0, [r2, #0]
 8006208:	7019      	strb	r1, [r3, #0]
 800620a:	4608      	mov	r0, r1
 800620c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006210:	4770      	bx	lr

08006212 <__sfputs_r>:
 8006212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006214:	4606      	mov	r6, r0
 8006216:	460f      	mov	r7, r1
 8006218:	4614      	mov	r4, r2
 800621a:	18d5      	adds	r5, r2, r3
 800621c:	42ac      	cmp	r4, r5
 800621e:	d101      	bne.n	8006224 <__sfputs_r+0x12>
 8006220:	2000      	movs	r0, #0
 8006222:	e007      	b.n	8006234 <__sfputs_r+0x22>
 8006224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006228:	463a      	mov	r2, r7
 800622a:	4630      	mov	r0, r6
 800622c:	f7ff ffda 	bl	80061e4 <__sfputc_r>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d1f3      	bne.n	800621c <__sfputs_r+0xa>
 8006234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006238 <_vfiprintf_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	460d      	mov	r5, r1
 800623e:	b09d      	sub	sp, #116	@ 0x74
 8006240:	4614      	mov	r4, r2
 8006242:	4698      	mov	r8, r3
 8006244:	4606      	mov	r6, r0
 8006246:	b118      	cbz	r0, 8006250 <_vfiprintf_r+0x18>
 8006248:	6a03      	ldr	r3, [r0, #32]
 800624a:	b90b      	cbnz	r3, 8006250 <_vfiprintf_r+0x18>
 800624c:	f7fe ffa2 	bl	8005194 <__sinit>
 8006250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006252:	07d9      	lsls	r1, r3, #31
 8006254:	d405      	bmi.n	8006262 <_vfiprintf_r+0x2a>
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	059a      	lsls	r2, r3, #22
 800625a:	d402      	bmi.n	8006262 <_vfiprintf_r+0x2a>
 800625c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800625e:	f7ff f914 	bl	800548a <__retarget_lock_acquire_recursive>
 8006262:	89ab      	ldrh	r3, [r5, #12]
 8006264:	071b      	lsls	r3, r3, #28
 8006266:	d501      	bpl.n	800626c <_vfiprintf_r+0x34>
 8006268:	692b      	ldr	r3, [r5, #16]
 800626a:	b99b      	cbnz	r3, 8006294 <_vfiprintf_r+0x5c>
 800626c:	4629      	mov	r1, r5
 800626e:	4630      	mov	r0, r6
 8006270:	f000 fac6 	bl	8006800 <__swsetup_r>
 8006274:	b170      	cbz	r0, 8006294 <_vfiprintf_r+0x5c>
 8006276:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006278:	07dc      	lsls	r4, r3, #31
 800627a:	d504      	bpl.n	8006286 <_vfiprintf_r+0x4e>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	b01d      	add	sp, #116	@ 0x74
 8006282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006286:	89ab      	ldrh	r3, [r5, #12]
 8006288:	0598      	lsls	r0, r3, #22
 800628a:	d4f7      	bmi.n	800627c <_vfiprintf_r+0x44>
 800628c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800628e:	f7ff f8fd 	bl	800548c <__retarget_lock_release_recursive>
 8006292:	e7f3      	b.n	800627c <_vfiprintf_r+0x44>
 8006294:	2300      	movs	r3, #0
 8006296:	9309      	str	r3, [sp, #36]	@ 0x24
 8006298:	2320      	movs	r3, #32
 800629a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800629e:	f8cd 800c 	str.w	r8, [sp, #12]
 80062a2:	2330      	movs	r3, #48	@ 0x30
 80062a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006454 <_vfiprintf_r+0x21c>
 80062a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062ac:	f04f 0901 	mov.w	r9, #1
 80062b0:	4623      	mov	r3, r4
 80062b2:	469a      	mov	sl, r3
 80062b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b8:	b10a      	cbz	r2, 80062be <_vfiprintf_r+0x86>
 80062ba:	2a25      	cmp	r2, #37	@ 0x25
 80062bc:	d1f9      	bne.n	80062b2 <_vfiprintf_r+0x7a>
 80062be:	ebba 0b04 	subs.w	fp, sl, r4
 80062c2:	d00b      	beq.n	80062dc <_vfiprintf_r+0xa4>
 80062c4:	465b      	mov	r3, fp
 80062c6:	4622      	mov	r2, r4
 80062c8:	4629      	mov	r1, r5
 80062ca:	4630      	mov	r0, r6
 80062cc:	f7ff ffa1 	bl	8006212 <__sfputs_r>
 80062d0:	3001      	adds	r0, #1
 80062d2:	f000 80a7 	beq.w	8006424 <_vfiprintf_r+0x1ec>
 80062d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062d8:	445a      	add	r2, fp
 80062da:	9209      	str	r2, [sp, #36]	@ 0x24
 80062dc:	f89a 3000 	ldrb.w	r3, [sl]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 809f 	beq.w	8006424 <_vfiprintf_r+0x1ec>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f0:	f10a 0a01 	add.w	sl, sl, #1
 80062f4:	9304      	str	r3, [sp, #16]
 80062f6:	9307      	str	r3, [sp, #28]
 80062f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80062fe:	4654      	mov	r4, sl
 8006300:	2205      	movs	r2, #5
 8006302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006306:	4853      	ldr	r0, [pc, #332]	@ (8006454 <_vfiprintf_r+0x21c>)
 8006308:	f7f9 ff6a 	bl	80001e0 <memchr>
 800630c:	9a04      	ldr	r2, [sp, #16]
 800630e:	b9d8      	cbnz	r0, 8006348 <_vfiprintf_r+0x110>
 8006310:	06d1      	lsls	r1, r2, #27
 8006312:	bf44      	itt	mi
 8006314:	2320      	movmi	r3, #32
 8006316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800631a:	0713      	lsls	r3, r2, #28
 800631c:	bf44      	itt	mi
 800631e:	232b      	movmi	r3, #43	@ 0x2b
 8006320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006324:	f89a 3000 	ldrb.w	r3, [sl]
 8006328:	2b2a      	cmp	r3, #42	@ 0x2a
 800632a:	d015      	beq.n	8006358 <_vfiprintf_r+0x120>
 800632c:	9a07      	ldr	r2, [sp, #28]
 800632e:	4654      	mov	r4, sl
 8006330:	2000      	movs	r0, #0
 8006332:	f04f 0c0a 	mov.w	ip, #10
 8006336:	4621      	mov	r1, r4
 8006338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800633c:	3b30      	subs	r3, #48	@ 0x30
 800633e:	2b09      	cmp	r3, #9
 8006340:	d94b      	bls.n	80063da <_vfiprintf_r+0x1a2>
 8006342:	b1b0      	cbz	r0, 8006372 <_vfiprintf_r+0x13a>
 8006344:	9207      	str	r2, [sp, #28]
 8006346:	e014      	b.n	8006372 <_vfiprintf_r+0x13a>
 8006348:	eba0 0308 	sub.w	r3, r0, r8
 800634c:	fa09 f303 	lsl.w	r3, r9, r3
 8006350:	4313      	orrs	r3, r2
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	46a2      	mov	sl, r4
 8006356:	e7d2      	b.n	80062fe <_vfiprintf_r+0xc6>
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	1d19      	adds	r1, r3, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	9103      	str	r1, [sp, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	bfbb      	ittet	lt
 8006364:	425b      	neglt	r3, r3
 8006366:	f042 0202 	orrlt.w	r2, r2, #2
 800636a:	9307      	strge	r3, [sp, #28]
 800636c:	9307      	strlt	r3, [sp, #28]
 800636e:	bfb8      	it	lt
 8006370:	9204      	strlt	r2, [sp, #16]
 8006372:	7823      	ldrb	r3, [r4, #0]
 8006374:	2b2e      	cmp	r3, #46	@ 0x2e
 8006376:	d10a      	bne.n	800638e <_vfiprintf_r+0x156>
 8006378:	7863      	ldrb	r3, [r4, #1]
 800637a:	2b2a      	cmp	r3, #42	@ 0x2a
 800637c:	d132      	bne.n	80063e4 <_vfiprintf_r+0x1ac>
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	1d1a      	adds	r2, r3, #4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	9203      	str	r2, [sp, #12]
 8006386:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800638a:	3402      	adds	r4, #2
 800638c:	9305      	str	r3, [sp, #20]
 800638e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006464 <_vfiprintf_r+0x22c>
 8006392:	7821      	ldrb	r1, [r4, #0]
 8006394:	2203      	movs	r2, #3
 8006396:	4650      	mov	r0, sl
 8006398:	f7f9 ff22 	bl	80001e0 <memchr>
 800639c:	b138      	cbz	r0, 80063ae <_vfiprintf_r+0x176>
 800639e:	9b04      	ldr	r3, [sp, #16]
 80063a0:	eba0 000a 	sub.w	r0, r0, sl
 80063a4:	2240      	movs	r2, #64	@ 0x40
 80063a6:	4082      	lsls	r2, r0
 80063a8:	4313      	orrs	r3, r2
 80063aa:	3401      	adds	r4, #1
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b2:	4829      	ldr	r0, [pc, #164]	@ (8006458 <_vfiprintf_r+0x220>)
 80063b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063b8:	2206      	movs	r2, #6
 80063ba:	f7f9 ff11 	bl	80001e0 <memchr>
 80063be:	2800      	cmp	r0, #0
 80063c0:	d03f      	beq.n	8006442 <_vfiprintf_r+0x20a>
 80063c2:	4b26      	ldr	r3, [pc, #152]	@ (800645c <_vfiprintf_r+0x224>)
 80063c4:	bb1b      	cbnz	r3, 800640e <_vfiprintf_r+0x1d6>
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	3307      	adds	r3, #7
 80063ca:	f023 0307 	bic.w	r3, r3, #7
 80063ce:	3308      	adds	r3, #8
 80063d0:	9303      	str	r3, [sp, #12]
 80063d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d4:	443b      	add	r3, r7
 80063d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d8:	e76a      	b.n	80062b0 <_vfiprintf_r+0x78>
 80063da:	fb0c 3202 	mla	r2, ip, r2, r3
 80063de:	460c      	mov	r4, r1
 80063e0:	2001      	movs	r0, #1
 80063e2:	e7a8      	b.n	8006336 <_vfiprintf_r+0xfe>
 80063e4:	2300      	movs	r3, #0
 80063e6:	3401      	adds	r4, #1
 80063e8:	9305      	str	r3, [sp, #20]
 80063ea:	4619      	mov	r1, r3
 80063ec:	f04f 0c0a 	mov.w	ip, #10
 80063f0:	4620      	mov	r0, r4
 80063f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063f6:	3a30      	subs	r2, #48	@ 0x30
 80063f8:	2a09      	cmp	r2, #9
 80063fa:	d903      	bls.n	8006404 <_vfiprintf_r+0x1cc>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0c6      	beq.n	800638e <_vfiprintf_r+0x156>
 8006400:	9105      	str	r1, [sp, #20]
 8006402:	e7c4      	b.n	800638e <_vfiprintf_r+0x156>
 8006404:	fb0c 2101 	mla	r1, ip, r1, r2
 8006408:	4604      	mov	r4, r0
 800640a:	2301      	movs	r3, #1
 800640c:	e7f0      	b.n	80063f0 <_vfiprintf_r+0x1b8>
 800640e:	ab03      	add	r3, sp, #12
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	462a      	mov	r2, r5
 8006414:	4b12      	ldr	r3, [pc, #72]	@ (8006460 <_vfiprintf_r+0x228>)
 8006416:	a904      	add	r1, sp, #16
 8006418:	4630      	mov	r0, r6
 800641a:	f3af 8000 	nop.w
 800641e:	4607      	mov	r7, r0
 8006420:	1c78      	adds	r0, r7, #1
 8006422:	d1d6      	bne.n	80063d2 <_vfiprintf_r+0x19a>
 8006424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006426:	07d9      	lsls	r1, r3, #31
 8006428:	d405      	bmi.n	8006436 <_vfiprintf_r+0x1fe>
 800642a:	89ab      	ldrh	r3, [r5, #12]
 800642c:	059a      	lsls	r2, r3, #22
 800642e:	d402      	bmi.n	8006436 <_vfiprintf_r+0x1fe>
 8006430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006432:	f7ff f82b 	bl	800548c <__retarget_lock_release_recursive>
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	065b      	lsls	r3, r3, #25
 800643a:	f53f af1f 	bmi.w	800627c <_vfiprintf_r+0x44>
 800643e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006440:	e71e      	b.n	8006280 <_vfiprintf_r+0x48>
 8006442:	ab03      	add	r3, sp, #12
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	462a      	mov	r2, r5
 8006448:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <_vfiprintf_r+0x228>)
 800644a:	a904      	add	r1, sp, #16
 800644c:	4630      	mov	r0, r6
 800644e:	f000 f879 	bl	8006544 <_printf_i>
 8006452:	e7e4      	b.n	800641e <_vfiprintf_r+0x1e6>
 8006454:	08006c59 	.word	0x08006c59
 8006458:	08006c5f 	.word	0x08006c5f
 800645c:	00000000 	.word	0x00000000
 8006460:	08006213 	.word	0x08006213
 8006464:	08006b39 	.word	0x08006b39

08006468 <_printf_common>:
 8006468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	4616      	mov	r6, r2
 800646e:	4698      	mov	r8, r3
 8006470:	688a      	ldr	r2, [r1, #8]
 8006472:	690b      	ldr	r3, [r1, #16]
 8006474:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006478:	4293      	cmp	r3, r2
 800647a:	bfb8      	it	lt
 800647c:	4613      	movlt	r3, r2
 800647e:	6033      	str	r3, [r6, #0]
 8006480:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006484:	4607      	mov	r7, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b10a      	cbz	r2, 800648e <_printf_common+0x26>
 800648a:	3301      	adds	r3, #1
 800648c:	6033      	str	r3, [r6, #0]
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	0699      	lsls	r1, r3, #26
 8006492:	bf42      	ittt	mi
 8006494:	6833      	ldrmi	r3, [r6, #0]
 8006496:	3302      	addmi	r3, #2
 8006498:	6033      	strmi	r3, [r6, #0]
 800649a:	6825      	ldr	r5, [r4, #0]
 800649c:	f015 0506 	ands.w	r5, r5, #6
 80064a0:	d106      	bne.n	80064b0 <_printf_common+0x48>
 80064a2:	f104 0a19 	add.w	sl, r4, #25
 80064a6:	68e3      	ldr	r3, [r4, #12]
 80064a8:	6832      	ldr	r2, [r6, #0]
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	42ab      	cmp	r3, r5
 80064ae:	dc26      	bgt.n	80064fe <_printf_common+0x96>
 80064b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064b4:	6822      	ldr	r2, [r4, #0]
 80064b6:	3b00      	subs	r3, #0
 80064b8:	bf18      	it	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	0692      	lsls	r2, r2, #26
 80064be:	d42b      	bmi.n	8006518 <_printf_common+0xb0>
 80064c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064c4:	4641      	mov	r1, r8
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c8      	blx	r9
 80064ca:	3001      	adds	r0, #1
 80064cc:	d01e      	beq.n	800650c <_printf_common+0xa4>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	6922      	ldr	r2, [r4, #16]
 80064d2:	f003 0306 	and.w	r3, r3, #6
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	bf02      	ittt	eq
 80064da:	68e5      	ldreq	r5, [r4, #12]
 80064dc:	6833      	ldreq	r3, [r6, #0]
 80064de:	1aed      	subeq	r5, r5, r3
 80064e0:	68a3      	ldr	r3, [r4, #8]
 80064e2:	bf0c      	ite	eq
 80064e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064e8:	2500      	movne	r5, #0
 80064ea:	4293      	cmp	r3, r2
 80064ec:	bfc4      	itt	gt
 80064ee:	1a9b      	subgt	r3, r3, r2
 80064f0:	18ed      	addgt	r5, r5, r3
 80064f2:	2600      	movs	r6, #0
 80064f4:	341a      	adds	r4, #26
 80064f6:	42b5      	cmp	r5, r6
 80064f8:	d11a      	bne.n	8006530 <_printf_common+0xc8>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e008      	b.n	8006510 <_printf_common+0xa8>
 80064fe:	2301      	movs	r3, #1
 8006500:	4652      	mov	r2, sl
 8006502:	4641      	mov	r1, r8
 8006504:	4638      	mov	r0, r7
 8006506:	47c8      	blx	r9
 8006508:	3001      	adds	r0, #1
 800650a:	d103      	bne.n	8006514 <_printf_common+0xac>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006514:	3501      	adds	r5, #1
 8006516:	e7c6      	b.n	80064a6 <_printf_common+0x3e>
 8006518:	18e1      	adds	r1, r4, r3
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	2030      	movs	r0, #48	@ 0x30
 800651e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006522:	4422      	add	r2, r4
 8006524:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006528:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800652c:	3302      	adds	r3, #2
 800652e:	e7c7      	b.n	80064c0 <_printf_common+0x58>
 8006530:	2301      	movs	r3, #1
 8006532:	4622      	mov	r2, r4
 8006534:	4641      	mov	r1, r8
 8006536:	4638      	mov	r0, r7
 8006538:	47c8      	blx	r9
 800653a:	3001      	adds	r0, #1
 800653c:	d0e6      	beq.n	800650c <_printf_common+0xa4>
 800653e:	3601      	adds	r6, #1
 8006540:	e7d9      	b.n	80064f6 <_printf_common+0x8e>
	...

08006544 <_printf_i>:
 8006544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	7e0f      	ldrb	r7, [r1, #24]
 800654a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800654c:	2f78      	cmp	r7, #120	@ 0x78
 800654e:	4691      	mov	r9, r2
 8006550:	4680      	mov	r8, r0
 8006552:	460c      	mov	r4, r1
 8006554:	469a      	mov	sl, r3
 8006556:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800655a:	d807      	bhi.n	800656c <_printf_i+0x28>
 800655c:	2f62      	cmp	r7, #98	@ 0x62
 800655e:	d80a      	bhi.n	8006576 <_printf_i+0x32>
 8006560:	2f00      	cmp	r7, #0
 8006562:	f000 80d2 	beq.w	800670a <_printf_i+0x1c6>
 8006566:	2f58      	cmp	r7, #88	@ 0x58
 8006568:	f000 80b9 	beq.w	80066de <_printf_i+0x19a>
 800656c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006570:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006574:	e03a      	b.n	80065ec <_printf_i+0xa8>
 8006576:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800657a:	2b15      	cmp	r3, #21
 800657c:	d8f6      	bhi.n	800656c <_printf_i+0x28>
 800657e:	a101      	add	r1, pc, #4	@ (adr r1, 8006584 <_printf_i+0x40>)
 8006580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006584:	080065dd 	.word	0x080065dd
 8006588:	080065f1 	.word	0x080065f1
 800658c:	0800656d 	.word	0x0800656d
 8006590:	0800656d 	.word	0x0800656d
 8006594:	0800656d 	.word	0x0800656d
 8006598:	0800656d 	.word	0x0800656d
 800659c:	080065f1 	.word	0x080065f1
 80065a0:	0800656d 	.word	0x0800656d
 80065a4:	0800656d 	.word	0x0800656d
 80065a8:	0800656d 	.word	0x0800656d
 80065ac:	0800656d 	.word	0x0800656d
 80065b0:	080066f1 	.word	0x080066f1
 80065b4:	0800661b 	.word	0x0800661b
 80065b8:	080066ab 	.word	0x080066ab
 80065bc:	0800656d 	.word	0x0800656d
 80065c0:	0800656d 	.word	0x0800656d
 80065c4:	08006713 	.word	0x08006713
 80065c8:	0800656d 	.word	0x0800656d
 80065cc:	0800661b 	.word	0x0800661b
 80065d0:	0800656d 	.word	0x0800656d
 80065d4:	0800656d 	.word	0x0800656d
 80065d8:	080066b3 	.word	0x080066b3
 80065dc:	6833      	ldr	r3, [r6, #0]
 80065de:	1d1a      	adds	r2, r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6032      	str	r2, [r6, #0]
 80065e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065ec:	2301      	movs	r3, #1
 80065ee:	e09d      	b.n	800672c <_printf_i+0x1e8>
 80065f0:	6833      	ldr	r3, [r6, #0]
 80065f2:	6820      	ldr	r0, [r4, #0]
 80065f4:	1d19      	adds	r1, r3, #4
 80065f6:	6031      	str	r1, [r6, #0]
 80065f8:	0606      	lsls	r6, r0, #24
 80065fa:	d501      	bpl.n	8006600 <_printf_i+0xbc>
 80065fc:	681d      	ldr	r5, [r3, #0]
 80065fe:	e003      	b.n	8006608 <_printf_i+0xc4>
 8006600:	0645      	lsls	r5, r0, #25
 8006602:	d5fb      	bpl.n	80065fc <_printf_i+0xb8>
 8006604:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006608:	2d00      	cmp	r5, #0
 800660a:	da03      	bge.n	8006614 <_printf_i+0xd0>
 800660c:	232d      	movs	r3, #45	@ 0x2d
 800660e:	426d      	negs	r5, r5
 8006610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006614:	4859      	ldr	r0, [pc, #356]	@ (800677c <_printf_i+0x238>)
 8006616:	230a      	movs	r3, #10
 8006618:	e011      	b.n	800663e <_printf_i+0xfa>
 800661a:	6821      	ldr	r1, [r4, #0]
 800661c:	6833      	ldr	r3, [r6, #0]
 800661e:	0608      	lsls	r0, r1, #24
 8006620:	f853 5b04 	ldr.w	r5, [r3], #4
 8006624:	d402      	bmi.n	800662c <_printf_i+0xe8>
 8006626:	0649      	lsls	r1, r1, #25
 8006628:	bf48      	it	mi
 800662a:	b2ad      	uxthmi	r5, r5
 800662c:	2f6f      	cmp	r7, #111	@ 0x6f
 800662e:	4853      	ldr	r0, [pc, #332]	@ (800677c <_printf_i+0x238>)
 8006630:	6033      	str	r3, [r6, #0]
 8006632:	bf14      	ite	ne
 8006634:	230a      	movne	r3, #10
 8006636:	2308      	moveq	r3, #8
 8006638:	2100      	movs	r1, #0
 800663a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800663e:	6866      	ldr	r6, [r4, #4]
 8006640:	60a6      	str	r6, [r4, #8]
 8006642:	2e00      	cmp	r6, #0
 8006644:	bfa2      	ittt	ge
 8006646:	6821      	ldrge	r1, [r4, #0]
 8006648:	f021 0104 	bicge.w	r1, r1, #4
 800664c:	6021      	strge	r1, [r4, #0]
 800664e:	b90d      	cbnz	r5, 8006654 <_printf_i+0x110>
 8006650:	2e00      	cmp	r6, #0
 8006652:	d04b      	beq.n	80066ec <_printf_i+0x1a8>
 8006654:	4616      	mov	r6, r2
 8006656:	fbb5 f1f3 	udiv	r1, r5, r3
 800665a:	fb03 5711 	mls	r7, r3, r1, r5
 800665e:	5dc7      	ldrb	r7, [r0, r7]
 8006660:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006664:	462f      	mov	r7, r5
 8006666:	42bb      	cmp	r3, r7
 8006668:	460d      	mov	r5, r1
 800666a:	d9f4      	bls.n	8006656 <_printf_i+0x112>
 800666c:	2b08      	cmp	r3, #8
 800666e:	d10b      	bne.n	8006688 <_printf_i+0x144>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	07df      	lsls	r7, r3, #31
 8006674:	d508      	bpl.n	8006688 <_printf_i+0x144>
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	6861      	ldr	r1, [r4, #4]
 800667a:	4299      	cmp	r1, r3
 800667c:	bfde      	ittt	le
 800667e:	2330      	movle	r3, #48	@ 0x30
 8006680:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006684:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006688:	1b92      	subs	r2, r2, r6
 800668a:	6122      	str	r2, [r4, #16]
 800668c:	f8cd a000 	str.w	sl, [sp]
 8006690:	464b      	mov	r3, r9
 8006692:	aa03      	add	r2, sp, #12
 8006694:	4621      	mov	r1, r4
 8006696:	4640      	mov	r0, r8
 8006698:	f7ff fee6 	bl	8006468 <_printf_common>
 800669c:	3001      	adds	r0, #1
 800669e:	d14a      	bne.n	8006736 <_printf_i+0x1f2>
 80066a0:	f04f 30ff 	mov.w	r0, #4294967295
 80066a4:	b004      	add	sp, #16
 80066a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f043 0320 	orr.w	r3, r3, #32
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	4833      	ldr	r0, [pc, #204]	@ (8006780 <_printf_i+0x23c>)
 80066b4:	2778      	movs	r7, #120	@ 0x78
 80066b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	6831      	ldr	r1, [r6, #0]
 80066be:	061f      	lsls	r7, r3, #24
 80066c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80066c4:	d402      	bmi.n	80066cc <_printf_i+0x188>
 80066c6:	065f      	lsls	r7, r3, #25
 80066c8:	bf48      	it	mi
 80066ca:	b2ad      	uxthmi	r5, r5
 80066cc:	6031      	str	r1, [r6, #0]
 80066ce:	07d9      	lsls	r1, r3, #31
 80066d0:	bf44      	itt	mi
 80066d2:	f043 0320 	orrmi.w	r3, r3, #32
 80066d6:	6023      	strmi	r3, [r4, #0]
 80066d8:	b11d      	cbz	r5, 80066e2 <_printf_i+0x19e>
 80066da:	2310      	movs	r3, #16
 80066dc:	e7ac      	b.n	8006638 <_printf_i+0xf4>
 80066de:	4827      	ldr	r0, [pc, #156]	@ (800677c <_printf_i+0x238>)
 80066e0:	e7e9      	b.n	80066b6 <_printf_i+0x172>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	f023 0320 	bic.w	r3, r3, #32
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	e7f6      	b.n	80066da <_printf_i+0x196>
 80066ec:	4616      	mov	r6, r2
 80066ee:	e7bd      	b.n	800666c <_printf_i+0x128>
 80066f0:	6833      	ldr	r3, [r6, #0]
 80066f2:	6825      	ldr	r5, [r4, #0]
 80066f4:	6961      	ldr	r1, [r4, #20]
 80066f6:	1d18      	adds	r0, r3, #4
 80066f8:	6030      	str	r0, [r6, #0]
 80066fa:	062e      	lsls	r6, r5, #24
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	d501      	bpl.n	8006704 <_printf_i+0x1c0>
 8006700:	6019      	str	r1, [r3, #0]
 8006702:	e002      	b.n	800670a <_printf_i+0x1c6>
 8006704:	0668      	lsls	r0, r5, #25
 8006706:	d5fb      	bpl.n	8006700 <_printf_i+0x1bc>
 8006708:	8019      	strh	r1, [r3, #0]
 800670a:	2300      	movs	r3, #0
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	4616      	mov	r6, r2
 8006710:	e7bc      	b.n	800668c <_printf_i+0x148>
 8006712:	6833      	ldr	r3, [r6, #0]
 8006714:	1d1a      	adds	r2, r3, #4
 8006716:	6032      	str	r2, [r6, #0]
 8006718:	681e      	ldr	r6, [r3, #0]
 800671a:	6862      	ldr	r2, [r4, #4]
 800671c:	2100      	movs	r1, #0
 800671e:	4630      	mov	r0, r6
 8006720:	f7f9 fd5e 	bl	80001e0 <memchr>
 8006724:	b108      	cbz	r0, 800672a <_printf_i+0x1e6>
 8006726:	1b80      	subs	r0, r0, r6
 8006728:	6060      	str	r0, [r4, #4]
 800672a:	6863      	ldr	r3, [r4, #4]
 800672c:	6123      	str	r3, [r4, #16]
 800672e:	2300      	movs	r3, #0
 8006730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006734:	e7aa      	b.n	800668c <_printf_i+0x148>
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	4632      	mov	r2, r6
 800673a:	4649      	mov	r1, r9
 800673c:	4640      	mov	r0, r8
 800673e:	47d0      	blx	sl
 8006740:	3001      	adds	r0, #1
 8006742:	d0ad      	beq.n	80066a0 <_printf_i+0x15c>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	079b      	lsls	r3, r3, #30
 8006748:	d413      	bmi.n	8006772 <_printf_i+0x22e>
 800674a:	68e0      	ldr	r0, [r4, #12]
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	4298      	cmp	r0, r3
 8006750:	bfb8      	it	lt
 8006752:	4618      	movlt	r0, r3
 8006754:	e7a6      	b.n	80066a4 <_printf_i+0x160>
 8006756:	2301      	movs	r3, #1
 8006758:	4632      	mov	r2, r6
 800675a:	4649      	mov	r1, r9
 800675c:	4640      	mov	r0, r8
 800675e:	47d0      	blx	sl
 8006760:	3001      	adds	r0, #1
 8006762:	d09d      	beq.n	80066a0 <_printf_i+0x15c>
 8006764:	3501      	adds	r5, #1
 8006766:	68e3      	ldr	r3, [r4, #12]
 8006768:	9903      	ldr	r1, [sp, #12]
 800676a:	1a5b      	subs	r3, r3, r1
 800676c:	42ab      	cmp	r3, r5
 800676e:	dcf2      	bgt.n	8006756 <_printf_i+0x212>
 8006770:	e7eb      	b.n	800674a <_printf_i+0x206>
 8006772:	2500      	movs	r5, #0
 8006774:	f104 0619 	add.w	r6, r4, #25
 8006778:	e7f5      	b.n	8006766 <_printf_i+0x222>
 800677a:	bf00      	nop
 800677c:	08006c66 	.word	0x08006c66
 8006780:	08006c77 	.word	0x08006c77

08006784 <__swbuf_r>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	460e      	mov	r6, r1
 8006788:	4614      	mov	r4, r2
 800678a:	4605      	mov	r5, r0
 800678c:	b118      	cbz	r0, 8006796 <__swbuf_r+0x12>
 800678e:	6a03      	ldr	r3, [r0, #32]
 8006790:	b90b      	cbnz	r3, 8006796 <__swbuf_r+0x12>
 8006792:	f7fe fcff 	bl	8005194 <__sinit>
 8006796:	69a3      	ldr	r3, [r4, #24]
 8006798:	60a3      	str	r3, [r4, #8]
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	071a      	lsls	r2, r3, #28
 800679e:	d501      	bpl.n	80067a4 <__swbuf_r+0x20>
 80067a0:	6923      	ldr	r3, [r4, #16]
 80067a2:	b943      	cbnz	r3, 80067b6 <__swbuf_r+0x32>
 80067a4:	4621      	mov	r1, r4
 80067a6:	4628      	mov	r0, r5
 80067a8:	f000 f82a 	bl	8006800 <__swsetup_r>
 80067ac:	b118      	cbz	r0, 80067b6 <__swbuf_r+0x32>
 80067ae:	f04f 37ff 	mov.w	r7, #4294967295
 80067b2:	4638      	mov	r0, r7
 80067b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	6922      	ldr	r2, [r4, #16]
 80067ba:	1a98      	subs	r0, r3, r2
 80067bc:	6963      	ldr	r3, [r4, #20]
 80067be:	b2f6      	uxtb	r6, r6
 80067c0:	4283      	cmp	r3, r0
 80067c2:	4637      	mov	r7, r6
 80067c4:	dc05      	bgt.n	80067d2 <__swbuf_r+0x4e>
 80067c6:	4621      	mov	r1, r4
 80067c8:	4628      	mov	r0, r5
 80067ca:	f7ff fb1d 	bl	8005e08 <_fflush_r>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d1ed      	bne.n	80067ae <__swbuf_r+0x2a>
 80067d2:	68a3      	ldr	r3, [r4, #8]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	60a3      	str	r3, [r4, #8]
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	6022      	str	r2, [r4, #0]
 80067de:	701e      	strb	r6, [r3, #0]
 80067e0:	6962      	ldr	r2, [r4, #20]
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d004      	beq.n	80067f2 <__swbuf_r+0x6e>
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	07db      	lsls	r3, r3, #31
 80067ec:	d5e1      	bpl.n	80067b2 <__swbuf_r+0x2e>
 80067ee:	2e0a      	cmp	r6, #10
 80067f0:	d1df      	bne.n	80067b2 <__swbuf_r+0x2e>
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	f7ff fb07 	bl	8005e08 <_fflush_r>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d0d9      	beq.n	80067b2 <__swbuf_r+0x2e>
 80067fe:	e7d6      	b.n	80067ae <__swbuf_r+0x2a>

08006800 <__swsetup_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4b29      	ldr	r3, [pc, #164]	@ (80068a8 <__swsetup_r+0xa8>)
 8006804:	4605      	mov	r5, r0
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	460c      	mov	r4, r1
 800680a:	b118      	cbz	r0, 8006814 <__swsetup_r+0x14>
 800680c:	6a03      	ldr	r3, [r0, #32]
 800680e:	b90b      	cbnz	r3, 8006814 <__swsetup_r+0x14>
 8006810:	f7fe fcc0 	bl	8005194 <__sinit>
 8006814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006818:	0719      	lsls	r1, r3, #28
 800681a:	d422      	bmi.n	8006862 <__swsetup_r+0x62>
 800681c:	06da      	lsls	r2, r3, #27
 800681e:	d407      	bmi.n	8006830 <__swsetup_r+0x30>
 8006820:	2209      	movs	r2, #9
 8006822:	602a      	str	r2, [r5, #0]
 8006824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	e033      	b.n	8006898 <__swsetup_r+0x98>
 8006830:	0758      	lsls	r0, r3, #29
 8006832:	d512      	bpl.n	800685a <__swsetup_r+0x5a>
 8006834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006836:	b141      	cbz	r1, 800684a <__swsetup_r+0x4a>
 8006838:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800683c:	4299      	cmp	r1, r3
 800683e:	d002      	beq.n	8006846 <__swsetup_r+0x46>
 8006840:	4628      	mov	r0, r5
 8006842:	f7fe fe43 	bl	80054cc <_free_r>
 8006846:	2300      	movs	r3, #0
 8006848:	6363      	str	r3, [r4, #52]	@ 0x34
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	2300      	movs	r3, #0
 8006854:	6063      	str	r3, [r4, #4]
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	f043 0308 	orr.w	r3, r3, #8
 8006860:	81a3      	strh	r3, [r4, #12]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	b94b      	cbnz	r3, 800687a <__swsetup_r+0x7a>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800686c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006870:	d003      	beq.n	800687a <__swsetup_r+0x7a>
 8006872:	4621      	mov	r1, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f000 f88b 	bl	8006990 <__smakebuf_r>
 800687a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687e:	f013 0201 	ands.w	r2, r3, #1
 8006882:	d00a      	beq.n	800689a <__swsetup_r+0x9a>
 8006884:	2200      	movs	r2, #0
 8006886:	60a2      	str	r2, [r4, #8]
 8006888:	6962      	ldr	r2, [r4, #20]
 800688a:	4252      	negs	r2, r2
 800688c:	61a2      	str	r2, [r4, #24]
 800688e:	6922      	ldr	r2, [r4, #16]
 8006890:	b942      	cbnz	r2, 80068a4 <__swsetup_r+0xa4>
 8006892:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006896:	d1c5      	bne.n	8006824 <__swsetup_r+0x24>
 8006898:	bd38      	pop	{r3, r4, r5, pc}
 800689a:	0799      	lsls	r1, r3, #30
 800689c:	bf58      	it	pl
 800689e:	6962      	ldrpl	r2, [r4, #20]
 80068a0:	60a2      	str	r2, [r4, #8]
 80068a2:	e7f4      	b.n	800688e <__swsetup_r+0x8e>
 80068a4:	2000      	movs	r0, #0
 80068a6:	e7f7      	b.n	8006898 <__swsetup_r+0x98>
 80068a8:	2000001c 	.word	0x2000001c

080068ac <_raise_r>:
 80068ac:	291f      	cmp	r1, #31
 80068ae:	b538      	push	{r3, r4, r5, lr}
 80068b0:	4605      	mov	r5, r0
 80068b2:	460c      	mov	r4, r1
 80068b4:	d904      	bls.n	80068c0 <_raise_r+0x14>
 80068b6:	2316      	movs	r3, #22
 80068b8:	6003      	str	r3, [r0, #0]
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80068c2:	b112      	cbz	r2, 80068ca <_raise_r+0x1e>
 80068c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068c8:	b94b      	cbnz	r3, 80068de <_raise_r+0x32>
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 f830 	bl	8006930 <_getpid_r>
 80068d0:	4622      	mov	r2, r4
 80068d2:	4601      	mov	r1, r0
 80068d4:	4628      	mov	r0, r5
 80068d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068da:	f000 b817 	b.w	800690c <_kill_r>
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d00a      	beq.n	80068f8 <_raise_r+0x4c>
 80068e2:	1c59      	adds	r1, r3, #1
 80068e4:	d103      	bne.n	80068ee <_raise_r+0x42>
 80068e6:	2316      	movs	r3, #22
 80068e8:	6003      	str	r3, [r0, #0]
 80068ea:	2001      	movs	r0, #1
 80068ec:	e7e7      	b.n	80068be <_raise_r+0x12>
 80068ee:	2100      	movs	r1, #0
 80068f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80068f4:	4620      	mov	r0, r4
 80068f6:	4798      	blx	r3
 80068f8:	2000      	movs	r0, #0
 80068fa:	e7e0      	b.n	80068be <_raise_r+0x12>

080068fc <raise>:
 80068fc:	4b02      	ldr	r3, [pc, #8]	@ (8006908 <raise+0xc>)
 80068fe:	4601      	mov	r1, r0
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	f7ff bfd3 	b.w	80068ac <_raise_r>
 8006906:	bf00      	nop
 8006908:	2000001c 	.word	0x2000001c

0800690c <_kill_r>:
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	4d07      	ldr	r5, [pc, #28]	@ (800692c <_kill_r+0x20>)
 8006910:	2300      	movs	r3, #0
 8006912:	4604      	mov	r4, r0
 8006914:	4608      	mov	r0, r1
 8006916:	4611      	mov	r1, r2
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	f7fb fa5b 	bl	8001dd4 <_kill>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	d102      	bne.n	8006928 <_kill_r+0x1c>
 8006922:	682b      	ldr	r3, [r5, #0]
 8006924:	b103      	cbz	r3, 8006928 <_kill_r+0x1c>
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	bd38      	pop	{r3, r4, r5, pc}
 800692a:	bf00      	nop
 800692c:	200001d4 	.word	0x200001d4

08006930 <_getpid_r>:
 8006930:	f7fb ba48 	b.w	8001dc4 <_getpid>

08006934 <_malloc_usable_size_r>:
 8006934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006938:	1f18      	subs	r0, r3, #4
 800693a:	2b00      	cmp	r3, #0
 800693c:	bfbc      	itt	lt
 800693e:	580b      	ldrlt	r3, [r1, r0]
 8006940:	18c0      	addlt	r0, r0, r3
 8006942:	4770      	bx	lr

08006944 <__swhatbuf_r>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	460c      	mov	r4, r1
 8006948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694c:	2900      	cmp	r1, #0
 800694e:	b096      	sub	sp, #88	@ 0x58
 8006950:	4615      	mov	r5, r2
 8006952:	461e      	mov	r6, r3
 8006954:	da0d      	bge.n	8006972 <__swhatbuf_r+0x2e>
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800695c:	f04f 0100 	mov.w	r1, #0
 8006960:	bf14      	ite	ne
 8006962:	2340      	movne	r3, #64	@ 0x40
 8006964:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006968:	2000      	movs	r0, #0
 800696a:	6031      	str	r1, [r6, #0]
 800696c:	602b      	str	r3, [r5, #0]
 800696e:	b016      	add	sp, #88	@ 0x58
 8006970:	bd70      	pop	{r4, r5, r6, pc}
 8006972:	466a      	mov	r2, sp
 8006974:	f000 f848 	bl	8006a08 <_fstat_r>
 8006978:	2800      	cmp	r0, #0
 800697a:	dbec      	blt.n	8006956 <__swhatbuf_r+0x12>
 800697c:	9901      	ldr	r1, [sp, #4]
 800697e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006982:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006986:	4259      	negs	r1, r3
 8006988:	4159      	adcs	r1, r3
 800698a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800698e:	e7eb      	b.n	8006968 <__swhatbuf_r+0x24>

08006990 <__smakebuf_r>:
 8006990:	898b      	ldrh	r3, [r1, #12]
 8006992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006994:	079d      	lsls	r5, r3, #30
 8006996:	4606      	mov	r6, r0
 8006998:	460c      	mov	r4, r1
 800699a:	d507      	bpl.n	80069ac <__smakebuf_r+0x1c>
 800699c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	2301      	movs	r3, #1
 80069a6:	6163      	str	r3, [r4, #20]
 80069a8:	b003      	add	sp, #12
 80069aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ac:	ab01      	add	r3, sp, #4
 80069ae:	466a      	mov	r2, sp
 80069b0:	f7ff ffc8 	bl	8006944 <__swhatbuf_r>
 80069b4:	9f00      	ldr	r7, [sp, #0]
 80069b6:	4605      	mov	r5, r0
 80069b8:	4639      	mov	r1, r7
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7fe fdfa 	bl	80055b4 <_malloc_r>
 80069c0:	b948      	cbnz	r0, 80069d6 <__smakebuf_r+0x46>
 80069c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c6:	059a      	lsls	r2, r3, #22
 80069c8:	d4ee      	bmi.n	80069a8 <__smakebuf_r+0x18>
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	f043 0302 	orr.w	r3, r3, #2
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	e7e2      	b.n	800699c <__smakebuf_r+0xc>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	6020      	str	r0, [r4, #0]
 80069da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	9b01      	ldr	r3, [sp, #4]
 80069e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069e6:	b15b      	cbz	r3, 8006a00 <__smakebuf_r+0x70>
 80069e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 f81d 	bl	8006a2c <_isatty_r>
 80069f2:	b128      	cbz	r0, 8006a00 <__smakebuf_r+0x70>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f023 0303 	bic.w	r3, r3, #3
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	431d      	orrs	r5, r3
 8006a04:	81a5      	strh	r5, [r4, #12]
 8006a06:	e7cf      	b.n	80069a8 <__smakebuf_r+0x18>

08006a08 <_fstat_r>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	4d07      	ldr	r5, [pc, #28]	@ (8006a28 <_fstat_r+0x20>)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4604      	mov	r4, r0
 8006a10:	4608      	mov	r0, r1
 8006a12:	4611      	mov	r1, r2
 8006a14:	602b      	str	r3, [r5, #0]
 8006a16:	f7fb fa3d 	bl	8001e94 <_fstat>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	d102      	bne.n	8006a24 <_fstat_r+0x1c>
 8006a1e:	682b      	ldr	r3, [r5, #0]
 8006a20:	b103      	cbz	r3, 8006a24 <_fstat_r+0x1c>
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	bd38      	pop	{r3, r4, r5, pc}
 8006a26:	bf00      	nop
 8006a28:	200001d4 	.word	0x200001d4

08006a2c <_isatty_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d06      	ldr	r5, [pc, #24]	@ (8006a48 <_isatty_r+0x1c>)
 8006a30:	2300      	movs	r3, #0
 8006a32:	4604      	mov	r4, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	f7fb fa3c 	bl	8001eb4 <_isatty>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_isatty_r+0x1a>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_isatty_r+0x1a>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	200001d4 	.word	0x200001d4

08006a4c <_init>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	bf00      	nop
 8006a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a52:	bc08      	pop	{r3}
 8006a54:	469e      	mov	lr, r3
 8006a56:	4770      	bx	lr

08006a58 <_fini>:
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5a:	bf00      	nop
 8006a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5e:	bc08      	pop	{r3}
 8006a60:	469e      	mov	lr, r3
 8006a62:	4770      	bx	lr
